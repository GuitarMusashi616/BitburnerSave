{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":413,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":2238297.7624542303,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.5450833808500024,\"hacking_speed\":1.5168137785384384,\"hacking_money\":1.401436173106578,\"hacking_grow\":1.401436173106578,\"hacking\":1.928338223303084,\"strength\":1.401436173106578,\"defense\":1.401436173106578,\"dexterity\":1.401436173106578,\"agility\":1.401436173106578,\"charisma\":1.401436173106578,\"hacking_exp\":2.675845295585168,\"strength_exp\":1.7728167589798216,\"defense_exp\":1.7728167589798216,\"dexterity_exp\":1.7728167589798216,\"agility_exp\":1.7728167589798216,\"charisma_exp\":1.7728167589798216,\"company_rep\":1.401436173106578,\"faction_rep\":1.401436173106578,\"crime_money\":1.401436173106578,\"crime_success\":1.401436173106578,\"hacknet_node_money\":3.534553413216018,\"hacknet_node_purchase_cost\":0.5458685987134299,\"hacknet_node_ram_cost\":0.713553723808405,\"hacknet_node_core_cost\":0.713553723808405,\"hacknet_node_level_cost\":0.6065206652371443,\"work_money\":1.401436173106578,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":19,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":3,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"NiteSec\",\"Sector-12\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":-2.7,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":266452596.5760887,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-156480,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":272309076.5760889,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":265452596.5760887,\"work\":0,\"servers\":0,\"other\":-6700000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-2600,\"class\":-453456,\"codingcontract\":300000000,\"corporation\":0,\"crime\":560574.4692426312,\"gang\":0,\"hacking\":8157238641.687154,\"hacknet\":1023731490.8570945,\"hacknet_expenses\":-115904401.39190464,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":547715573.397165,\"work\":4165214.5825787606,\"servers\":-2876010863.131283,\"other\":-23500000,\"augmentations\":-5922109027.6814995}},\"playtimeSinceLastAug\":27482000,\"playtimeSinceLastBitnode\":773759400,\"lastAugReset\":1691047468050,\"lastNodeReset\":1690301187014,\"purchasedServers\":[],\"scriptProdSinceLastAug\":272309076.5760889,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,1]]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1681451860356},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1681451920340},{\"ID\":\"WORKOUT\",\"unlockedOn\":1681452640373},{\"ID\":\"FROZE\",\"unlockedOn\":1681459065921},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1681542866422},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1681544306371},{\"ID\":\"TRAVEL\",\"unlockedOn\":1681544366374},{\"ID\":\"TOR\",\"unlockedOn\":1681544846455},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1681544906371},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1681545386372},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1681548386394},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1681549526416},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1681569628237},{\"ID\":\"NITESEC\",\"unlockedOn\":1681570048239},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1681589549067},{\"ID\":\"4S\",\"unlockedOn\":1681671096571},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1681711707590},{\"ID\":\"DONATION\",\"unlockedOn\":1681885002287},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1681885662277},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1688512451544},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1688513051582},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1688516171776},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1688520671740},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1688521091770},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1688713565480},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1690230547945},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1690230727894},{\"ID\":\"SF1.1\",\"unlockedOn\":1690301244050}],\"terminalCommandHistory\":[\"stats/threads.js\",\"stats/threadDistr.js phantasy 805]\",\"stats/threadDistr.js phantasy 805\",\"basic/backdoor.js\",\"oneCycleAuto.js phantasy 133 617 55 x\",\"killall\",\"killall.js\",\"oneCycleAuto.js phantasy 133 617 55 x\",\"oneCycleAuto.js phantasy 133 617 55\",\"free\",\"stats/graph.js\",\"free\",\"ls stats\",\"stats/info.js\",\"stats/threads.js\",\"stats/threadDistr.js the-hub 815\",\"stats/threadDistr.js the-hub 815 1.1 1.1\",\"stats/threadDistr.js the-hub 815 1.2 1.1\",\"top\",\"kill 276\",\"top\",\"oneCycleAuto.js the-hub 649 141 25\",\"stats/graph.js\",\"connect the-hub\",\"connect.js the-hub\",\"connect foodnstuff \",\"connect max-hardware \",\"connect neo-net \",\"connect the-hub \",\"analyze\",\"home\",\"stats/alljs\",\"stats/all.js\",\"basic/backdoor.js\",\"buy -l\",\"buy relaySMTP.exe \",\"basic/backdoor.js\",\"stats/all.js\",\"stats/info.js\",\"vim stats/info.js\",\"stats/info.js\",\"vim stats/info.js\",\"stats/info.js\",\"vim stats/info.js\",\"stats/info.js\",\"vim stats/info.js\",\"stats/info.js\",\"stats/all.js\",\"stats/threads.js\",\"scan\"],\"lastUpdate\":1691074949919,\"lastSave\":1691074938520,\"totalPlaytime\":9623276600,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":134216,\"factionWorkType\":\"hacking\",\"factionName\":\"NiteSec\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"119d43b975cbba\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"51.0.7.5\",\"isConnectedTo\":true,\"maxRam\":1024,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"home\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"home\"}}],[\"basic/lib/server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Represents a Server with hacking capabilities.\\n * @class\\n */\\nclass Server {\\n  static hack_script = \\\"/basic/hack.js\\\"\\n  static grow_script = \\\"/basic/grow.js\\\"\\n  static weaken_script = \\\"/basic/weaken.js\\\"\\n  /**\\n   * @param {NS} ns - netscape instance\\n   * @param {string} hostname - The server's hostname.\\n   */\\n  constructor(ns, hostname, hack_script=Server.hack_script, grow_script=Server.grow_script, weaken_script=Server.weaken_script) {\\n    this.ns = ns\\n    this.hostname = hostname\\n    this.hack_script = hack_script\\n    this.grow_script = grow_script\\n    this.weaken_script = weaken_script\\n  }\\n\\n  /**\\n   * Fills a server with things to do\\n   * @param {string} targetHostname - The target server's hostname.\\n   */\\n  async get_busy(targetHostname, growPercent=0.25, weakenPercent=0.25) {\\n    const maxRam = this.ns.getServerMaxRam(this.hostname);\\n    let usedRam = this.ns.getServerUsedRam(this.hostname);\\n    const scriptsToRun = {};\\n    this.ns.tprintf(\\\"%s\\\", this.hostname)\\n\\n    while (true) {\\n      const script = this.pick_random(growPercent, weakenPercent);\\n      // const scriptRam = this.ns.getScriptRam(script);\\n      const scriptRam = 1.75\\n\\n      if (usedRam + scriptRam <= maxRam) {\\n        scriptsToRun[script] = (scriptsToRun[script] || 0) + 1;\\n        usedRam += scriptRam;\\n        // this.ns.tprintf(\\\"now using %s/%s\\\", usedRam, maxRam)\\n      } else {\\n        break;\\n      }\\n      await this.ns.sleep(1)\\n    }\\n\\n    for (const [script, count] of Object.entries(scriptsToRun)) {\\n      this.ns.tprintf(\\\"Running script: %s %s times\\\", script, count);\\n      this.ns.exec(script, this.hostname, count, targetHostname)\\n    }\\n    this.ns.tprintf(\\\"\\\")\\n  }\\n\\n  /**\\n   * Installs hack, weaken, and grow if it doesn't already exist\\n   */\\n  install_scripts() {\\n    if (!this.ns.fileExists(this.hack_script, this.hostname)) {\\n      this.ns.scp(this.hack_script, this.hostname)\\n    }\\n    if (!this.ns.fileExists(this.weaken_script, this.hostname)) {\\n      this.ns.scp(this.weaken_script, this.hostname)\\n    }\\n    if (!this.ns.fileExists(this.grow_script, this.hostname)) {\\n      this.ns.scp(this.grow_script, this.hostname)\\n    }\\n  }\\n\\n  /**\\n   * Kills all running programs on this server\\n   */\\n  kill_all() {\\n    this.ns.killall(this.hostname)\\n  }\\n\\n  /**\\n   * Randomly hacks, grows, or weakens target server\\n   */\\n  pick_random(growPercent=.25, weakenPercent=.25) {\\n    const rand = Math.random()\\n\\n    if (rand <= growPercent) {\\n      return this.grow_script\\n    }\\n\\n    if (rand <= growPercent + weakenPercent) {\\n      return this.weaken_script\\n    }\\n    \\n    return this.hack_script\\n  }\\n}\\n\\nexport {Server}\",\"filename\":\"basic/lib/server.js\",\"server\":\"home\"}}],[\"basic/lib/server_collection.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Represents a collection of Server objects.\\n * @class\\n */\\nclass ServerCollection {\\n  constructor() {\\n    this.servers = [];\\n  }\\n\\n  /**\\n   * Adds a server to the collection.\\n   * @param {Server} server - The server to add.\\n   */\\n  add(server) {\\n    this.servers.push(server);\\n  }\\n\\n  /**\\n   * Returns an iterator that yields Server objects.\\n   * @returns {IterableIterator<Server>}\\n   */\\n  [Symbol.iterator]() {\\n    return this.servers.values();\\n  }\\n}\\n\\nexport {ServerCollection}\",\"filename\":\"basic/lib/server_collection.js\",\"server\":\"home\"}}],[\"basic/test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {Server} from \\\"basic/lib/server.js\\\"\\nimport {ServerCollection} from \\\"basic/lib/server_collection.js\\\"\\nimport {getAllUniqueHosts} from \\\"basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst stock_option = ns.args[0]\\n\\tconst target = ns.args[1] == null ? \\\"n00dles\\\" : ns.args[1]\\n\\tconst growPercent = ns.args[2] == null ? 0.25 : Number(ns.args[2])\\n\\tconst weakenPercent = ns.args[3] == null ? 0.25 : Number(ns.args[3])\\n\\n\\n\\tconst sc = new ServerCollection()\\n//\\tsc.add(new Server(ns, \\\"n00dles\\\"))\\n//\\tsc.add(new Server(ns, \\\"foodnstuff\\\"))\\n//\\tsc.add(new Server(ns, \\\"sigma-cosmetics\\\"))\\n//\\tsc.add(new Server(ns, \\\"joesguns\\\"))\\n//\\tsc.add(new Server(ns, \\\"hong-fang-tea\\\"))\\n//\\tsc.add(new Server(ns, \\\"harakiri-sushi\\\"))\\n\\n\\tfor (const server of await getAllUniqueHosts(ns, ns.getHostname())) {\\n\\t\\tif (!ns.hasRootAccess(server)) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tif (stock_option === \\\"up\\\") {\\n\\t\\t\\tsc.add(new Server(ns, server, \\\"/basic/hack.js\\\", \\\"/basic/growStock.js\\\", \\\"/basic/weaken.js\\\"))\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tif (stock_option === \\\"down\\\") {\\n\\t\\t\\tsc.add(new Server(ns, server, \\\"/basic/hackStock.js\\\", \\\"/basic/grow.js\\\", \\\"/basic/weaken.js\\\"))\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tsc.add(new Server(ns, server))\\n\\t}\\n\\n\\tfor (const server of sc) {\\n\\t\\tserver.kill_all()\\n\\t\\tserver.install_scripts()\\n\\t\\t// server.pick_random(\\\"n00dles\\\")\\n\\t\\tawait server.get_busy(\\n\\t\\t\\ttarget,\\n\\t\\t\\tgrowPercent,\\n\\t\\t\\tweakenPercent\\n\\t\\t)\\n\\t}\\n}\",\"filename\":\"basic/test.js\",\"server\":\"home\"}}],[\"basic/check.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst target = ns.args[0]\\n\\tif (target == null) {\\n\\t\\tns.tprint(\\\"Expected Usage: check.js <target>\\\")\\n\\t\\treturn\\n\\t}\\n\\tconst server = ns.getServer(target)\\n\\tserver_print(ns, server)\\n}\\n\\n/** @param {NS} ns */\\n/** @param {Server} server */\\nfunction server_print(ns, server) {\\n\\tns.tprintf(\\\"%s/%s\\\", server.minDifficulty, server.hackDifficulty)\\n\\tns.tprintf(\\\"$%s/$%s\\\", server.moneyAvailable, server.moneyMax)\\n\\tns.tprintf(\\\"%s\\\", ns.hackAnalyzeThreads(server.hostname, server.moneyAvailable))\\n}\",\"filename\":\"basic/check.js\",\"server\":\"home\"}}],[\"basic/backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  const servers = await getAllUniqueHosts(ns, ns.getHostname())\\n  for (const server of servers) {\\n    ns.tprintf(\\\"%s\\\", server)\\n    const hacked = attemptHack(ns, server)\\n    if (hacked) {\\n      ns.tprintf(\\\"HACKED %s\\\\n\\\", server)\\n    }\\n  }\\n}\\n\\n/** @param {NS} ns \\n *  @param {string} hostname\\n*/\\nexport async function getAllUniqueHosts(ns, hostname) {\\n  let queue = [hostname];\\n  let uniqueHosts = new Set();\\n\\n  while (queue.length > 0) {\\n    const currentHost = queue.shift();\\n\\n    if (uniqueHosts.has(currentHost)) {\\n      continue;\\n    }\\n\\n    uniqueHosts.add(currentHost);\\n    const connectedHosts = ns.scan(currentHost);\\n    queue = queue.concat(connectedHosts);\\n    await ns.sleep(5)\\n  }\\n\\n  return Array.from(uniqueHosts);\\n}\\n\\n/** @param {NS} ns \\n *  @param {string} hostname\\n*/\\nfunction attemptHack(ns, hostname) {\\n  if (ns.hasRootAccess(hostname)) {\\n    ns.tprintf(\\\"Already Root\\\\n\\\")\\n    return false\\n  }\\n  const level = ns.getServerRequiredHackingLevel(hostname)\\n  if (level > ns.getHackingLevel()) {\\n    ns.tprintf(\\\"%s level required\\\\n\\\", level)\\n    return false\\n  }\\n\\n  return crack(ns, hostname)\\n}\\n\\n/** @param {NS} ns \\n *  @param {string} hostname\\n*/\\nfunction crack(ns, hostname) {\\n  \\n\\n  if (ns.fileExists('BruteSSH.exe')) {\\n    ns.brutessh(hostname)\\n  }\\n  if (ns.fileExists('FTPCrack.exe')) {\\n    ns.ftpcrack(hostname)\\n  }\\n  if (ns.fileExists('RelaySMTP.exe')) {\\n    ns.relaysmtp(hostname)\\n  }\\n  if (ns.fileExists('HTTPWorm.exe')) {\\n    ns.httpworm(hostname)\\n  }\\n  if (ns.fileExists('SQLInject.exe')) {\\n    ns.sqlinject(hostname)\\n  }\\n\\n\\n  try {\\n    ns.nuke(hostname)\\n  }\\n  catch (error) {\\n    const ports = ns.getServerNumPortsRequired(hostname)\\n    ns.tprintf(\\\"%s ports required\\\\n\\\", ports)\\n    return false\\n  }\\n  \\n  return true\\n}\",\"filename\":\"basic/backdoor.js\",\"server\":\"home\"}}],[\"basic/server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst name = ns.args[0]\\n\\tconst ramInt = Number(ns.args[1])\\n\\tconst ram = Math.pow(2, 10 + ramInt) \\n\\tconst servers = new Set(ns.getPurchasedServers())\\n\\n\\tif (name == \\\"-l\\\") {\\n\\t\\tfor (const server of servers) {\\n\\t\\t\\tns.tprintf(\\\"%s: %s GB\\\", server, ns.getServerMaxRam(server))\\n\\t\\t}\\n\\t\\treturn\\n\\t}\\n\\n\\tif (ns.args.length != 2) {\\n\\t\\tns.tprintf(\\\"Enter a new server or existing server and ram to buy / upgrade to\\\")\\n\\t\\tns.tprintf(\\\"Usage: run server.js <name> <ram>\\\")\\n\\t\\treturn\\n\\t}\\n\\n\\n\\tif (servers.has(name)) {\\n\\t\\tconst cost = ns.getPurchasedServerUpgradeCost(name, ram)\\n\\t\\tns.tprintf(\\\"Upgrading %s to %s GB will cost $%s\\\", name, ram, ns.formatNumber(cost))\\n\\t\\tif (cost == -1) {\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t\\tconst buy = await ns.prompt(\\\"Buy Upgrade y/n?\\\", {type: \\\"boolean\\\"})\\n\\t\\tif (buy) {\\n\\t\\t\\tns.upgradePurchasedServer(name, ram)\\n\\t\\t}\\n\\t\\treturn\\n\\t}\\n\\n\\tconst cost = ns.getPurchasedServerCost(ram)\\n\\tns.tprintf(\\\"Buying %s with %s GB will cost $%s\\\", name, ram, ns.formatNumber(cost))\\n\\tconst buy = await ns.prompt(\\\"Buy Server? y/n\\\", {type: \\\"boolean\\\"})\\n\\tif (buy) {\\n\\t\\tns.purchaseServer(name, ram)\\n\\t}\\n}\",\"filename\":\"basic/server.js\",\"server\":\"home\"}}],[\"basic/rename.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst name = ns.args[0]\\n\\tconst rename = ns.args[1]\\n\\n\\tif (ns.args.length != 2) {\\n\\t\\tns.tprintf(\\\"Rename an existing server\\\")\\n\\t\\tns.tprintf(\\\"Usage: run rename.js <name> <new name>\\\")\\n\\t\\treturn\\n\\t}\\n\\n\\tconst servers = new Set(ns.getPurchasedServers())\\n\\tif (!servers.has(name)) {\\n\\t\\tns.tprintf(\\\"%s is not an existing server\\\", name)\\n\\t\\treturn\\n\\t}\\n\\n\\tns.renamePurchasedServer(name, rename)\\n\\tns.tprintf(\\\"Operation Successful\\\", name)\\n}\",\"filename\":\"basic/rename.js\",\"server\":\"home\"}}],[\"basic/scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst servers = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tns.tprint(servers)\\n\\tns.tprint(ns.getMoneySources())\\n\\tns.tprint(ns.getScriptIncome())\\n\\tns.tprint(ns.getScriptExpGain())\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction info(ns, server) {\\n\\t// show best case hack return\\n\\t// show average case hack return\\n\\n\\t// show ideal ratio of grows, weakens, and hacks\\n\\t// show experience gain?\\n\\n\\t// must weaken until low sec\\n\\t// then grow until high cash\\n\\t// while weakening to keep sec low\\n\\t// then hack while cash high\\n\\t// oo based\\n\\n\\t// simultaneous grows and weakens to butter up server\\n\\t// simultaneous hacks before completion of above (timed to hit right after)\\n\\n\\t// cost / time / thread calculation first time and reoccuring\\n\\n\\t// simultaneous grows and weakens to compensate for hacks (timed to hit right after)\\n\\t// simultaneous hacks before completion of above (timed to hit right after)\\n\\n\\t\\n\\t// cluster = ICluster()\\n\\t// success = cluster.exec(\\\"script\\\", \\\"threads\\\")\\n\\t// false if not enough memory\\n\\t// throw error if script not found\\n\\n\\n\\t// servers = ServerCollection.GetUniqueHosts()\\n\\t// servers = IServerCollection\\n\\t// cluster = ICluster(servers)  // of the servers filter just rooted ones\\n\\n\\t// mm = MinMax(servers)\\n\\t// potential = drop to 50% hacks + weakens and grows to get back to 100%\\n\\t// initial = hacks and weakens to get to 100% then hacks to drop to 50%\\n\\n\\n\\t\\n\\n}\",\"filename\":\"basic/scan.js\",\"server\":\"home\"}}],[\"basic/minmax.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {assignScripts} from \\\"/basic/dist.js\\\"\\nimport {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst targetHost = ns.args[1]\\n\\tconst arg = ns.args[0]\\n\\tif (ns.args.length != 2) {\\n\\t\\tns.tprintf(\\\"Get Info to Prep Server\\\")\\n\\t\\tns.tprintf(\\\"Usage: run minmax.js -i <server>\\\\n\\\")\\n\\n\\t\\tns.tprintf(\\\"Get Cash Flow of Prepped Server\\\")\\n\\t\\tns.tprintf(\\\"Usage: run minmax.js -m <server>\\\\n\\\")\\n\\n\\t\\tns.tprintf(\\\"Prep Server\\\")\\n\\t\\tns.tprintf(\\\"Usage: run minmax.js -p <server>\\\\n\\\")\\n\\n\\t\\tns.tprintf(\\\"Run Cash Flow Cycle\\\")\\n\\t\\tns.tprintf(\\\"Usage: run minmax.js -r <server>\\\\n\\\")\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-i\\\") {\\n\\t\\tthreadsToButterUp(ns, ns.getServer(targetHost))\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-p\\\") {\\n\\t\\tconst hosts = ns.getPurchasedServers()\\n\\t\\tconst [growThreads, weakenThreads] = threadsToButterUp(ns, ns.getServer(targetHost))\\n\\t\\tbutterUp(ns, hosts, growThreads, weakenThreads, targetHost)\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-c\\\") {\\n\\t\\tlet stats = costBenefit(ns, ns.getServer(targetHost))\\n\\t\\tstats[\\\"cashPerGBSec\\\"] = cashPerThreadSec(ns, stats)\\n\\t\\tfor (const key in stats) {\\n\\t\\t\\tns.tprintf(\\\"%s: %s\\\", key, stats[key])\\n\\t\\t}\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-a\\\") {\\n\\t\\tlet serverStats = []\\n\\t\\tfor (const host of await getAllUniqueHosts(ns, ns.getHostname())) {\\n\\t\\t\\tlet stats = costBenefit(ns, ns.getServer(host))\\n\\t\\t\\tstats[\\\"cashPerGBSec\\\"] = cashPerThreadSec(ns, stats)\\n\\t\\t\\tstats[\\\"name\\\"] = host\\n\\t\\t\\tserverStats.push(stats)\\n\\t\\t}\\n\\n\\t\\tconst sortedData = serverStats.sort((a, b) => b.cashPerGBSec - a.cashPerGBSec);\\n\\t\\tfor (const stats of sortedData) {\\n\\t\\t\\tns.tprintf(\\\"%s:\\\\nCashPerGBSec: %s\\\", stats.name, stats.cashPerGBSec)\\n\\t\\t\\tdisplayRatio(ns, stats)\\n\\t\\t\\tns.tprintf(\\\"\\\\n\\\")\\n\\t\\t}\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-b\\\") {\\n\\t\\tfor (const host of await getAllUniqueHosts(ns, ns.getHostname())) {\\n\\t\\t\\tlet stats = costBenefit(ns, ns.getServer(host))\\n\\t\\t\\tns.tprintf(\\\"%s:\\\", host)\\n\\t\\t\\tdisplayRatio(ns, stats)\\n\\t\\t\\tns.tprintf(\\\"\\\\n\\\")\\n\\t\\t}\\n\\t\\treturn\\n\\t}\\n\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction costBenefit(ns, server) {\\n\\tconst hackChance = ns.hackAnalyzeChance(server.hostname)\\n\\tconst hackPercent = ns.hackAnalyze(server.hostname)\\n\\tconst hackRAM = 1.75\\n\\n\\tconst hacksPerCycle = 0.5 / hackPercent\\n\\tconst hackSecIncrease = ns.hackAnalyzeSecurity(hacksPerCycle, server.hostname)\\n\\tconst hackTime = Math.round(ns.getHackTime(server.hostname)/1000)\\n\\n\\tconst growsPerCycle = ns.growthAnalyze(server.hostname, 2)\\n\\tconst growSecIncrease = ns.growthAnalyzeSecurity(growsPerCycle, server.hostname)\\n\\tconst growTime = Math.round(ns.getGrowTime(server.hostname)/1000)\\n\\n\\tconst secIncrease = growSecIncrease + hackSecIncrease\\n\\tconst weakensPerCycle = secIncrease / .05\\n\\tconst weakenTime = Math.round(ns.getWeakenTime(server.hostname)/1000)\\n\\n\\n\\n\\n\\t// const cashPerGBSec = (hackPercent * server.moneyAvailable * hackChance) / (hackTime * hackRAM)\\n\\n\\treturn {\\n\\t\\t\\\"hackThreads\\\": hacksPerCycle,\\n\\t\\t\\\"hackTime\\\": hackTime,\\n\\t\\t\\\"growThreads\\\": growsPerCycle,\\n\\t\\t\\\"growTime\\\": growTime,\\n\\t\\t\\\"weakenThreads\\\": weakensPerCycle,\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\n\\n\\t\\t\\\"revenue\\\": server.moneyMax / 2,\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n*/\\nfunction cashPerThreadSec(ns, stats) {\\n\\t//const stats = costBenefit(ns, server)\\n\\n\\tconst hackThreadSecs = stats.hackThreads * stats.hackTime\\n\\tconst growThreadSecs = stats.growThreads * stats.growTime\\n\\tconst weakenThreadSecs = stats.weakenThreads * stats.weakenTime\\n\\n\\tconst totalThreadSecs = hackThreadSecs + growThreadSecs + weakenThreadSecs\\n\\n\\tconst cashPerThreadSec = stats.revenue / totalThreadSecs\\n\\tconst cashPerGBSec = cashPerThreadSec / 1.75\\n\\t// ns.tprintf(\\\"$/GB*Sec = %s\\\", cashPerGBSec)\\n\\treturn cashPerGBSec\\n}\\n\\n/** @param {NS} ns \\n*/\\nfunction displayRatio(ns, stats) {\\n\\t//const stats = costBenefit(ns, server)\\n\\n\\tconst hackThreadSecs = stats.hackThreads * stats.hackTime\\n\\tconst growThreadSecs = stats.growThreads * stats.growTime\\n\\tconst weakenThreadSecs = stats.weakenThreads * stats.weakenTime\\n\\n\\tconst totalThreadSecs = hackThreadSecs + growThreadSecs + weakenThreadSecs\\n\\n\\tconst percentHacks = hackThreadSecs / totalThreadSecs\\n\\tconst percentGrows = growThreadSecs / totalThreadSecs\\n\\tconst percentWeaken = weakenThreadSecs / totalThreadSecs\\n\\n\\tns.tprintf(\\\"Hack Percent: %s%s\\\", Math.round(percentHacks*100), \\\"%\\\")\\n\\tns.tprintf(\\\"Grow Percent: %s%s\\\", Math.round(percentGrows*100), \\\"%\\\")\\n\\tns.tprintf(\\\"Weaken Percent: %s%s\\\", Math.round(percentWeaken*100), \\\"%\\\")\\n\\n\\tconst cashPerThreadSec = stats.revenue / totalThreadSecs\\n\\tns.tprintf(\\\"cashPerThreadSec: %s\\\", cashPerThreadSec)\\n\\t// const cashPerGBSec = cashPerThreadSec / 1.75\\n\\t// ns.tprintf(\\\"$/GB*Sec = %s\\\", cashPerGBSec)\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction info(ns, server) {\\n\\n\\t// enough weakens for both growth and minSec\\n\\n\\t// next hacks\\n\\t// const chance = ns.hackAnalyzeChance(server.hostname)\\n\\n\\t// const cashPercentPerHack = ns.hackAnalyze(server.hostname)\\n\\t// const hackThreadsToHalve = .5/cashPercentPerHack\\n\\t// const hackSecIncrease = ns.hackAnalyzeSecurity(hackThreadsToHalve)\\n\\n\\n\\n\\t\\n\\n\\t// at buttered up time, what would be cost/benefit for a 50% cash hit\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction butterUp(ns, scriptHosts, growThreads, weakenThreads, targetHost) {\\n\\tassignScripts(ns, scriptHosts, \\\"/basic/weakenOnce.js\\\", weakenThreads, targetHost)\\n\\tassignScripts(ns, scriptHosts, \\\"/basic/growOnce.js\\\", growThreads, targetHost)\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction basicStats(ns, server) {\\n\\tns.tprintf(\\\"$%s/$%s\\\", server.moneyAvailable, server.moneyMax)\\n\\tns.tprintf(\\\"%s/%s\\\", server.minDifficulty, server.hackDifficulty)\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction threadsToButterUp(ns, server) {\\n\\n\\tconst weakTime = ns.getWeakenTime() // security\\n\\tconst growTime = ns.getGrowTime()\\n\\t\\n\\t// right now what does it take to butter up server\\n\\tconst weakenThread = 0.05\\n\\tconst multToFull = server.moneyMax / server.moneyAvailable\\n\\tconst growThreadsToDouble = ns.growthAnalyze(server.hostname, 2)\\n\\tconst growthSecIncrease = ns.growthAnalyzeSecurity(growThreadsToDouble)\\n\\n\\tlet lowerBy = server.hackDifficulty - server.minDifficulty\\n\\tlowerBy += growthSecIncrease\\n\\n\\tconst weakenThreads = lowerBy / weakenThread\\n\\tconst execGrowThreads = Math.round(growThreadsToDouble)\\n\\tconst execWeakenThreads = Math.round(weakenThreads)\\n\\n\\tbasicStats(ns, server)\\n\\tns.tprintf(\\\"Grow Threads: %s, Ram: %s GB, Time: %s\\\", execGrowThreads, Math.round(growThreadsToDouble*1.75), Math.round(growTime / 1000))\\n\\tns.tprintf(\\\"Weaken Threads: %s, Ram: %s GB, Time: %s\\\", execWeakenThreads, Math.round(weakenThreads*1.75), Math.round(weakTime / 1000))\\n\\treturn [execGrowThreads, execWeakenThreads]\\n}\",\"filename\":\"basic/minmax.js\",\"server\":\"home\"}}],[\"basic/remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length < 2) {\\n\\t\\tns.tprintf(\\\"Usage: run remote.js <script> <scriptHost> [threads] [..args]\\\")\\n\\t\\treturn\\n\\t}\\n\\n\\tconst script = ns.args[0]\\n\\tconst scriptHost = ns.args[1]\\n\\tconst threads = ns.args[2] == null ? 1 : Number(ns.args[2])\\n\\tconst args = ns.args.slice(3)\\n\\n\\tif (script === \\\"killall\\\") {\\n\\t\\tns.killall(scriptHost)\\n\\t\\treturn\\n\\t}\\n\\n\\tif (!ns.fileExists(script, scriptHost)) {\\n\\t\\tns.scp(script, scriptHost)\\n\\t}\\n\\n\\n\\tns.exec(script, scriptHost, threads, ...args)\\n}\",\"filename\":\"basic/remote.js\",\"server\":\"home\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"home\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"home\"}}],[\"basic/hackStock.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.hack(ns.args[0], {stock: true});\\n\\t}\\n}\",\"filename\":\"basic/hackStock.js\",\"server\":\"home\"}}],[\"basic/growStock.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0], {stock: true});\\n\\t}\\n}\",\"filename\":\"basic/growStock.js\",\"server\":\"home\"}}],[\"basic/stockServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\n\\tfor (const host of hosts) {\\n\\t\\tconst server = ns.getServer(host)\\n\\t\\tns.tprintf(\\\"%s:\\\\t%s\\\", server.organizationName, server.hostname)\\n\\t}\\n}\",\"filename\":\"basic/stockServers.js\",\"server\":\"home\"}}],[\"basic/dist.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Assigns the script to run on the servers such that all scripts are run a total of times times. \\n *  @param {NS} ns \\n *  @param {string[]} servers\\n *  @param {string} script\\n *  @param {number} times\\n *  @returns {Object.<string, number>} A dictionary specifying how many times the script should be run on which servers.\\n*/\\nexport function distributeScripts(ns, servers, script, times) {\\n  const distribution = {};\\n\\n  const scriptRamCost = ns.getScriptRam(script);\\n\\n  let remainingTimes = times;\\n  while (remainingTimes > 0) {\\n    for (const server of servers) {\\n      const maxRam = ns.getServerMaxRam(server);\\n      const usedRam = ns.getServerUsedRam(server);\\n      const availableRam = maxRam - usedRam;\\n\\n      if (availableRam >= scriptRamCost) {\\n        const maxRuns = Math.floor(availableRam / scriptRamCost);\\n        const runs = Math.min(remainingTimes, maxRuns);\\n\\n        if (runs > 0) {\\n          distribution[server] = runs;\\n          remainingTimes -= runs;\\n        }\\n      }\\n\\n      if (remainingTimes <= 0) {\\n        break;\\n      }\\n    }\\n\\n    if (remainingTimes > 0) {\\n      throw new Error(\\\"Not enough resources to run the script the specified number of times.\\\");\\n    }\\n  }\\n\\n  return distribution;\\n}\\n\\n/** @param {NS} ns  \\n *  @param {string[]} servers\\n *  @param {string} script\\n *  @param {number} times\\n *  @returns {Object.<string, number>} A dictionary specifying how many times the script should be run on which servers.\\n*/\\nexport function assignScripts(ns, servers, script, times, ...args) {\\n  const distr = distributeScripts(ns, servers, script, times)\\n  ns.tprint(distr)\\n  for (const server in distr) {\\n    if (!ns.fileExists(script, server)) {\\n      ns.scp(script, server)\\n    }\\n    const threads = distr[server]\\n    ns.exec(script, server, threads, ...args)\\n  }\\n}\\n\\n/** @param {NS} ns  */\\nexport async function main(ns) {\\n}\",\"filename\":\"basic/dist.js\",\"server\":\"home\"}}],[\"basic/queue.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n *  @param {string} host\\n*/\\nfunction prereq(ns, host, weak, grow, hack) {\\n\\tconst files = [weak, grow, hack]\\n\\tfor (const file of files) {\\n\\t\\tif (!ns.fileExists(file, host)) {\\n\\t\\t\\tns.scp(file, host)\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length != 4) {\\n\\t\\tns.tprintf(\\\"Usage: run queue.js <host> <threads> <grow/hack/weaken> <target>\\\")\\n\\t\\treturn\\n\\t}\\n\\n\\tconst host = ns.args[0]\\n\\tconst threads = Number(ns.args[1])\\n\\tconst script = ns.args[2]\\n\\tconst target = ns.args[3]\\n\\n\\tconst weak=\\\"/basic/weakenOnce.js\\\"\\n\\tconst grow=\\\"/basic/growOnce.js\\\"\\n\\tconst hack=\\\"/basic/hackOnce.js\\\"\\n\\n\\tprereq(ns, host, weak, grow, hack)\\n\\n\\tns.tprintf(\\\"Queued %s %s %s %s\\\", host, threads, script, target)\\n\\tif (script === \\\"grow\\\") {\\n\\t\\tawait queue(ns, grow, host, threads, target)\\n\\t\\treturn\\n\\t}\\n\\tif (script === \\\"weaken\\\") {\\n\\t\\tawait queue(ns, weak, host, threads, target)\\n\\t\\treturn\\n\\t}\\n\\tif (script === \\\"hack\\\") {\\n\\t\\tawait queue(ns, hack, host, threads, target)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(\\\"%s is not a valid option\\\", script)\\n}\\n\\n/** @param {NS} ns */\\nasync function queue(ns, file, host, threads, target) {\\n\\tlet remaining = threads\\n\\twhile (remaining > 0) {\\n\\t\\tremaining -= runMax(ns, file, host, remaining, target)\\n\\t\\tif (remaining <= 0) {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t\\tawait ns.sleep(5000)\\n\\t}\\n\\tns.tprintf(\\\"finished running %s %s -> %s on %s\\\", threads, file, target, host)\\n}\\n\\n/** @param {NS} ns */\\nfunction runMax(ns, file, host, threads, target) {\\n\\tconst usedRam = ns.getServerUsedRam(host)\\n\\tconst maxRam = ns.getServerMaxRam(host)\\n\\tlet availableRam = maxRam - usedRam\\n\\tconst scriptRam = ns.getScriptRam(file)\\n\\n\\t// let times = 0\\n\\t// while (availableRam > scriptRam) {\\n\\t// \\ttimes += 1\\n\\t// \\tavailableRam -= scriptRam\\n\\t// }\\n\\tlet times = Math.floor(availableRam / scriptRam)\\n\\tif (times === 0) {\\n\\t\\treturn 0\\n\\t}\\n\\n\\tconst canDo = Math.min(times, threads)\\n\\n\\tns.exec(file, host, canDo, target)\\n\\tns.tprintf(\\\"succesfully started %s %s -> %s on %s\\\", canDo, file, target, host)\\n\\treturn canDo\\n}\",\"filename\":\"basic/queue.js\",\"server\":\"home\"}}],[\"a/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.grow(ns.args[0])\\n}\",\"filename\":\"a/grow.js\",\"server\":\"home\"}}],[\"a/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.weaken(ns.args[0])\\n}\",\"filename\":\"a/weaken.js\",\"server\":\"home\"}}],[\"a/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.hack(ns.args[0])\\n}\",\"filename\":\"a/hack.js\",\"server\":\"home\"}}],[\"a/auto.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length != 2) {\\n\\t\\tns.tprintf(\\\"Usage: run auto.js <host> <target>\\\")\\n\\t\\treturn\\n\\t}\\n\\tconst server = ns.getServer(ns.args[1])\\n\\tconst localhost = ns.args[0]\\n\\tprereq(ns, localhost, \\\"/a/hack.js\\\")\\n\\tprereq(ns, localhost, \\\"/a/grow.js\\\")\\n\\tprereq(ns, localhost, \\\"/a/weaken.js\\\")\\n\\twhile (true) {\\n\\t\\tawait process(ns, server, localhost)\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n *  @param {string} localhost\\n *  @param {string} file\\n*/\\nfunction prereq(ns, localhost, file) {\\n\\tif (!ns.fileExists(file, localhost)) {\\n\\t\\tns.scp(file, localhost)\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nasync function process(ns, server, localhost) {\\n\\tif (server.hackDifficulty > (server.minDifficulty + 5)) {\\n\\t\\tconst weakenThreads = Math.ceil((server.hackDifficulty - server.minDifficulty) / .05)\\n\\t\\tconst weakenPath = \\\"/a/weaken.js\\\" \\n\\t\\tns.exec(weakenPath,localhost,weakenThreads,server.hostname)\\n\\t\\tns.printf(\\\"running %s %s -> %s on %s\\\", weakenThreads, weakenPath, server.hostname, localhost)\\n\\t\\tawait ns.sleep(ns.getWeakenTime(server.hostname))\\n\\t\\tns.printf(\\\"finished waiting for %s %s and %s %s\\\", weakenThreads, weakenPath)\\n\\t\\treturn\\n\\t}\\n\\n\\tif (server.moneyAvailable < (server.moneyMax * .8)) {\\n\\t\\tconst multiplier = server.moneyMax / server.moneyAvailable\\n\\t\\tconst growThreads = ns.growthAnalyze(server.hostname, multiplier)\\n\\t\\tconst secIncrease = ns.growthAnalyzeSecurity(growThreads, server.hostname)\\n\\t\\tawait run(ns, localhost, \\\"/a/grow.js\\\", ns.getGrowTime(server.hostname), growThreads, secIncrease)\\n\\t\\treturn\\n\\t}\\n\\n\\t// hack until 80%\\n\\tconst cashPerThread = ns.hackAnalyze() * server.moneyAvailable\\n\\tconst cashToTake = server.moneyAvailable - (server.moneyMax * .8)\\n\\tconst hackThreads = Math.floor(cashToTake / cashPerThread)\\n\\tconst secIncrease = ns.hackAnalyzeSecurity(hackThreads)\\n\\tawait run(ns, localhost, \\\"/a/hack.js\\\", ns.getHackTime(server.hostname), hackThreads, secIncrease)\\n}\\n\\nasync function run(ns, localhost, path, runtime, threads, secIncrease) {\\n\\tconst weakenThreads = Math.ceil(secIncrease / .05)\\n\\tconst weakenPath = \\\"/a/weaken.js\\\" \\n\\tconst wait = Math.max(ns.getWeakenTime(server.hostname), runtime)\\n\\n\\tns.exec(path, localhost, threads, server.hostname)\\n\\tns.exec(weakenPath, localhost, weakenThreads, server.hostname)\\n\\tns.printf(\\\"running %s %s -> %s on %s\\\", threads, path, server.hostname, localhost)\\n\\tns.printf(\\\"running %s %s -> %s on %s\\\", weakenThreads, weakenPath, server.hostname, localhost)\\n\\tawait ns.sleep(wait)\\n\\tns.printf(\\\"finished waiting for %s %s and %s %s\\\", threads, path, weakenThreads, weakenPath)\\n}\",\"filename\":\"a/auto.js\",\"server\":\"home\"}}],[\"stats/minmax.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {assignScripts} from \\\"/basic/dist.js\\\"\\nimport {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst targetHost = ns.args[1]\\n\\tconst arg = ns.args[0]\\n\\tif (ns.args.length != 2) {\\n\\t\\tns.tprintf(\\\"Get Info to Prep Server\\\")\\n\\t\\tns.tprintf(\\\"Usage: run minmax.js -i <server>\\\\n\\\")\\n\\n\\t\\tns.tprintf(\\\"Get Cash Flow of Prepped Server\\\")\\n\\t\\tns.tprintf(\\\"Usage: run minmax.js -m <server>\\\\n\\\")\\n\\n\\t\\tns.tprintf(\\\"Prep Server\\\")\\n\\t\\tns.tprintf(\\\"Usage: run minmax.js -p <server>\\\\n\\\")\\n\\n\\t\\tns.tprintf(\\\"Run Cash Flow Cycle\\\")\\n\\t\\tns.tprintf(\\\"Usage: run minmax.js -r <server>\\\\n\\\")\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-i\\\") {\\n\\t\\tthreadsToButterUp(ns, ns.getServer(targetHost))\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-p\\\") {\\n\\t\\tconst hosts = ns.getPurchasedServers()\\n\\t\\tconst [growThreads, weakenThreads] = threadsToButterUp(ns, ns.getServer(targetHost))\\n\\t\\tbutterUp(ns, hosts, growThreads, weakenThreads, targetHost)\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-c\\\") {\\n\\t\\tlet stats = costBenefit(ns, ns.getServer(targetHost))\\n\\t\\tstats[\\\"cashPerGBSec\\\"] = cashPerThreadSec(ns, stats)\\n\\t\\tfor (const key in stats) {\\n\\t\\t\\tns.tprintf(\\\"%s: %s\\\", key, stats[key])\\n\\t\\t}\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-a\\\") {\\n\\t\\tlet serverStats = []\\n\\t\\tfor (const host of await getAllUniqueHosts(ns, ns.getHostname())) {\\n\\t\\t\\tlet stats = costBenefit(ns, ns.getServer(host))\\n\\t\\t\\tstats[\\\"cashPerGBSec\\\"] = cashPerThreadSec(ns, stats)\\n\\t\\t\\tstats[\\\"name\\\"] = host\\n\\t\\t\\tserverStats.push(stats)\\n\\t\\t}\\n\\n\\t\\tconst sortedData = serverStats.sort((a, b) => b.cashPerGBSec - a.cashPerGBSec);\\n\\t\\tfor (const stats of sortedData) {\\n\\t\\t\\tns.tprintf(\\\"%s:\\\\nCashPerGBSec: %s\\\", stats.name, stats.cashPerGBSec)\\n\\t\\t\\tdisplayRatio(ns, stats)\\n\\t\\t\\tns.tprintf(\\\"\\\\n\\\")\\n\\t\\t}\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-b\\\") {\\n\\t\\tfor (const host of await getAllUniqueHosts(ns, ns.getHostname())) {\\n\\t\\t\\tlet stats = costBenefit(ns, ns.getServer(host))\\n\\t\\t\\tns.tprintf(\\\"%s:\\\", host)\\n\\t\\t\\tdisplayRatio(ns, stats)\\n\\t\\t\\tns.tprintf(\\\"\\\\n\\\")\\n\\t\\t}\\n\\t\\treturn\\n\\t}\\n\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction costBenefit(ns, server) {\\n\\tconst hackChance = ns.hackAnalyzeChance(server.hostname)\\n\\tconst hackPercent = ns.hackAnalyze(server.hostname)\\n\\tconst hackRAM = 1.75\\n\\n\\tconst hacksPerCycle = 0.5 / hackPercent\\n\\tconst hackSecIncrease = ns.hackAnalyzeSecurity(hacksPerCycle, server.hostname)\\n\\tconst hackTime = Math.round(ns.getHackTime(server.hostname)/1000)\\n\\n\\tconst growsPerCycle = ns.growthAnalyze(server.hostname, 2)\\n\\tconst growSecIncrease = ns.growthAnalyzeSecurity(growsPerCycle, server.hostname)\\n\\tconst growTime = Math.round(ns.getGrowTime(server.hostname)/1000)\\n\\n\\tconst secIncrease = growSecIncrease + hackSecIncrease\\n\\tconst weakensPerCycle = secIncrease / .05\\n\\tconst weakenTime = Math.round(ns.getWeakenTime(server.hostname)/1000)\\n\\n\\n\\n\\n\\t// const cashPerGBSec = (hackPercent * server.moneyAvailable * hackChance) / (hackTime * hackRAM)\\n\\n\\treturn {\\n\\t\\t\\\"hackThreads\\\": hacksPerCycle,\\n\\t\\t\\\"hackTime\\\": hackTime,\\n\\t\\t\\\"growThreads\\\": growsPerCycle,\\n\\t\\t\\\"growTime\\\": growTime,\\n\\t\\t\\\"weakenThreads\\\": weakensPerCycle,\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\n\\n\\t\\t\\\"revenue\\\": server.moneyMax / 2,\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n*/\\nfunction cashPerThreadSec(ns, stats) {\\n\\t//const stats = costBenefit(ns, server)\\n\\n\\tconst hackThreadSecs = stats.hackThreads * stats.hackTime\\n\\tconst growThreadSecs = stats.growThreads * stats.growTime\\n\\tconst weakenThreadSecs = stats.weakenThreads * stats.weakenTime\\n\\n\\tconst totalThreadSecs = hackThreadSecs + growThreadSecs + weakenThreadSecs\\n\\n\\tconst cashPerThreadSec = stats.revenue / totalThreadSecs\\n\\tconst cashPerGBSec = cashPerThreadSec / 1.75\\n\\t// ns.tprintf(\\\"$/GB*Sec = %s\\\", cashPerGBSec)\\n\\treturn cashPerGBSec\\n}\\n\\n/** @param {NS} ns \\n*/\\nfunction displayRatio(ns, stats) {\\n\\t//const stats = costBenefit(ns, server)\\n\\n\\tconst hackThreadSecs = stats.hackThreads * stats.hackTime\\n\\tconst growThreadSecs = stats.growThreads * stats.growTime\\n\\tconst weakenThreadSecs = stats.weakenThreads * stats.weakenTime\\n\\n\\tconst totalThreadSecs = hackThreadSecs + growThreadSecs + weakenThreadSecs\\n\\n\\tconst percentHacks = hackThreadSecs / totalThreadSecs\\n\\tconst percentGrows = growThreadSecs / totalThreadSecs\\n\\tconst percentWeaken = weakenThreadSecs / totalThreadSecs\\n\\n\\tns.tprintf(\\\"Hack Percent: %s%s\\\", Math.round(percentHacks*100), \\\"%\\\")\\n\\tns.tprintf(\\\"Grow Percent: %s%s\\\", Math.round(percentGrows*100), \\\"%\\\")\\n\\tns.tprintf(\\\"Weaken Percent: %s%s\\\", Math.round(percentWeaken*100), \\\"%\\\")\\n\\n\\tconst cashPerThreadSec = stats.revenue / totalThreadSecs\\n\\tns.tprintf(\\\"cashPerThreadSec: %s\\\", cashPerThreadSec)\\n\\t// const cashPerGBSec = cashPerThreadSec / 1.75\\n\\t// ns.tprintf(\\\"$/GB*Sec = %s\\\", cashPerGBSec)\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction info(ns, server) {\\n\\n\\t// enough weakens for both growth and minSec\\n\\n\\t// next hacks\\n\\t// const chance = ns.hackAnalyzeChance(server.hostname)\\n\\n\\t// const cashPercentPerHack = ns.hackAnalyze(server.hostname)\\n\\t// const hackThreadsToHalve = .5/cashPercentPerHack\\n\\t// const hackSecIncrease = ns.hackAnalyzeSecurity(hackThreadsToHalve)\\n\\n\\n\\n\\t\\n\\n\\t// at buttered up time, what would be cost/benefit for a 50% cash hit\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction butterUp(ns, scriptHosts, growThreads, weakenThreads, targetHost) {\\n\\tassignScripts(ns, scriptHosts, \\\"/basic/weakenOnce.js\\\", weakenThreads, targetHost)\\n\\tassignScripts(ns, scriptHosts, \\\"/basic/growOnce.js\\\", growThreads, targetHost)\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction basicStats(ns, server) {\\n\\tns.tprintf(\\\"$%s/$%s\\\", server.moneyAvailable, server.moneyMax)\\n\\tns.tprintf(\\\"%s/%s\\\", server.minDifficulty, server.hackDifficulty)\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction threadsToButterUp(ns, server) {\\n\\n\\tconst weakTime = ns.getWeakenTime() // security\\n\\tconst growTime = ns.getGrowTime()\\n\\t\\n\\t// right now what does it take to butter up server\\n\\tconst weakenThread = 0.05\\n\\tconst multToFull = server.moneyMax / server.moneyAvailable\\n\\tconst growThreadsToDouble = ns.growthAnalyze(server.hostname, 2)\\n\\tconst growthSecIncrease = ns.growthAnalyzeSecurity(growThreadsToDouble)\\n\\n\\tlet lowerBy = server.hackDifficulty - server.minDifficulty\\n\\tlowerBy += growthSecIncrease\\n\\n\\tconst weakenThreads = lowerBy / weakenThread\\n\\tconst execGrowThreads = Math.round(growThreadsToDouble)\\n\\tconst execWeakenThreads = Math.round(weakenThreads)\\n\\n\\tbasicStats(ns, server)\\n\\tns.tprintf(\\\"Grow Threads: %s, Ram: %s GB, Time: %s\\\", execGrowThreads, Math.round(growThreadsToDouble*1.75), Math.round(growTime / 1000))\\n\\tns.tprintf(\\\"Weaken Threads: %s, Ram: %s GB, Time: %s\\\", execWeakenThreads, Math.round(weakenThreads*1.75), Math.round(weakTime / 1000))\\n\\treturn [execGrowThreads, execWeakenThreads]\\n}\",\"filename\":\"stats/minmax.js\",\"server\":\"home\"}}],[\"stats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst targetHost = ns.args[0]\\n\\tthreadsToButterUp(ns, ns.getServer(targetHost))\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction basicStats(ns, server) {\\n\\tns.tprintf(\\\"$%s/$%s\\\", server.moneyAvailable, server.moneyMax)\\n\\tns.tprintf(\\\"%s/%s\\\", server.minDifficulty, server.hackDifficulty)\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction threadsToButterUp(ns, server) {\\n\\n\\tconst weakTime = ns.getWeakenTime() // security\\n\\tconst growTime = ns.getGrowTime()\\n\\t\\n\\t// right now what does it take to butter up server\\n\\tconst weakenThread = 0.05\\n\\tconst multToFull = server.moneyMax / server.moneyAvailable\\n\\tconst growThreadsToDouble = ns.growthAnalyze(server.hostname, 2)\\n\\tconst growthSecIncrease = ns.growthAnalyzeSecurity(growThreadsToDouble)\\n\\n\\tlet lowerBy = server.hackDifficulty - server.minDifficulty\\n\\tlowerBy += growthSecIncrease\\n\\n\\tconst weakenThreads = lowerBy / weakenThread\\n\\tconst execGrowThreads = Math.round(growThreadsToDouble)\\n\\tconst execWeakenThreads = Math.round(weakenThreads)\\n\\n\\tbasicStats(ns, server)\\n\\tns.tprintf(\\\"Grow Threads: %s, Ram: %s GB, Time: %s\\\", execGrowThreads, Math.round(growThreadsToDouble*1.75), Math.round(growTime / 1000))\\n\\tns.tprintf(\\\"Weaken Threads: %s, Ram: %s GB, Time: %s\\\", execWeakenThreads, Math.round(weakenThreads*1.75), Math.round(weakTime / 1000))\\n\\treturn [execGrowThreads, execWeakenThreads]\\n}\",\"filename\":\"stats.js\",\"server\":\"home\"}}],[\"connect.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction find_node(ns, node, target, visited = {}, path = []) {\\n\\tvisited[node] = true;\\n\\tpath.push(node);\\n\\n\\tif (node === target) {\\n\\t\\t\\treturn path;\\n\\t}\\n\\n\\tlet neighbors = ns.scan(node);\\n\\tfor (let i = 0; i < neighbors.length; i++) {\\n\\t\\tlet neighbor = neighbors[i];\\n\\t\\tif (!visited[neighbor]) {\\n\\t\\t\\tlet result_path = find_node(ns, neighbor, target, Object.assign({}, visited), [...path]);\\n\\t\\t\\tif (result_path) {\\n\\t\\t\\t\\treturn result_path;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn null;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length !== 1) {\\n\\t\\tns.tprintf(\\\"Usage: connect.js <serverName>\\\")\\n\\t\\treturn\\n\\t}\\n\\tconst serverName = ns.args[0]\\n\\n\\tconst path = find_node(ns, ns.getHostname(), serverName)\\n\\tns.tprintf(\\\"%s\\\", path.join(\\\" --> \\\"))\\n}\",\"filename\":\"connect.js\",\"server\":\"home\"}}],[\"new/ns.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const SERVER_COST_MULT = 1.85;\\nconst SERVER_BASE_COST = 30000;\\nconst SERVER_MAX = 100;\\n\\nconst LEVEL_BASE_COST = 1000;\\nconst LEVEL_COST_MULT = 1.2;\\nconst LEVEL_MAX = 30;\\n\\nconst RAM_BASE_COST = 10000;\\nconst RAM_COST_MULT = 2.85;\\nconst RAM_MAX = 64;\\n\\nconst CORE_BASE_COST = 5000;\\nconst CORE_COST_MULT = 1.5;\\nconst CORE_MAX = 24;\\n\\nexport function serverCost(numServers) {\\n    if (numServers >= SERVER_MAX) {\\n        return Infinity;\\n    }\\n    return SERVER_BASE_COST * Math.pow(SERVER_COST_MULT, numServers);\\n}\\n\\nexport function upgradeLevel(numLevels) {\\n    if (numLevels >= LEVEL_MAX) {\\n        return Infinity;\\n    }\\n    return LEVEL_BASE_COST * Math.pow(LEVEL_COST_MULT, numLevels);\\n}\\n\\nexport function upgradeRam(numRam) {\\n    if (numRam >= RAM_MAX) {\\n        return Infinity;\\n    }\\n    return RAM_BASE_COST * Math.pow(RAM_COST_MULT, numRam);\\n}\\n\\nexport function upgradeCore(numCore) {\\n    if (numCore >= CORE_MAX) {\\n        return Infinity;\\n    }\\n    return CORE_BASE_COST * Math.pow(CORE_COST_MULT, numCore);\\n}\\n\\nexport function moneyGainRate(levels, ram, cores) {\\n    return (levels * 100 * ram * cores);\\n}\",\"filename\":\"new/ns.js\",\"server\":\"home\"}}],[\"new/bitnet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {moneyGainRate, serverCost, upgradeLevel, upgradeRam, upgradeCore} from \\\"new/ns3.js\\\"\\n\\nclass Server {\\n\\tconstructor(i, level, ram, core) {\\n\\t\\tthis.i = i\\n\\t\\tthis.level = level;\\n\\t\\tthis.ram = ram;\\n\\t\\tthis.core = core;\\n\\t}\\n\\n\\t/** @param {NS} ns */\\n\\tupgrade(ns, upgradeType) {\\n\\t\\tif (upgradeType === 'level') {\\n\\t\\t\\tthis.level += 1;\\n\\t\\t\\tns.hacknet.upgradeLevel(this.i)\\n\\t\\t} else if (upgradeType === 'ram') {\\n\\t\\t\\tthis.ram += 1;\\n\\t\\t\\tns.hacknet.upgradeRam(this.i)\\n\\t\\t} else if (upgradeType === 'core') {\\n\\t\\t\\tthis.core += 1;\\n\\t\\t\\tns.hacknet.upgradeCore(this.i)\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction calculateROI(cost, gain) {\\n\\treturn gain / cost;\\n}\\n\\n/** @param {NS} ns */\\nfunction chooseBestInvestment(ns, servers) {\\n\\tlet newServerCost = serverCost(ns, servers.length);\\n\\tlet newServerGain = moneyGainRate(ns, 1, 1, 1);\\n\\n\\tlet bestROI = calculateROI(newServerCost, newServerGain);\\n\\tlet bestAction = ['buy', newServerCost, null];\\n\\n\\tlet upgradeCost, newGain;\\n\\n\\tservers.forEach((server, index) => {\\n\\t\\t['level', 'ram', 'core'].forEach(upgradeType => {\\n\\t\\t\\tif (upgradeType === 'level') {\\n\\t\\t\\t\\tupgradeCost = upgradeLevel(ns, server.level);\\n\\t\\t\\t\\tnewGain = moneyGainRate(ns, server.level + 1, server.ram, server.core);\\n\\t\\t\\t} else if (upgradeType === 'ram') {\\n\\t\\t\\t\\tupgradeCost = upgradeRam(ns, server.ram);\\n\\t\\t\\t\\tnewGain = moneyGainRate(ns, server.level, server.ram + 1, server.core);\\n\\t\\t\\t} else { // upgradeType === 'core'\\n\\t\\t\\t\\tupgradeCost = upgradeCore(ns, server.core);\\n\\t\\t\\t\\tnewGain = moneyGainRate(ns, server.level, server.ram, server.core + 1);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tlet roi = calculateROI(upgradeCost, newGain - moneyGainRate(ns, server.level, server.ram, server.core));\\n\\n\\t\\t\\tif (roi > bestROI) {\\n\\t\\t\\t\\tbestROI = roi;\\n\\t\\t\\t\\tbestAction = [upgradeType, upgradeCost, index];\\n\\t\\t\\t}\\n\\t\\t});\\n\\t});\\n\\n\\tdisplay(ns, bestAction, newServerGain, newGain)\\n\\treturn bestAction;\\n}\\n\\n/** @param {NS} ns */\\nfunction display(ns, bestAction, newServerGain, newGain) {\\n\\tlet [action, cost, serverIndex] = bestAction;\\n\\n\\tif (action === \\\"buy\\\") {\\n\\t\\tns.tprint(`buying server for ${cost} with a gain of $${newServerGain}/sec with an ROI of ${(newServerGain/cost)*100}%`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.tprint(`upgrading ${action} for ${cost} with a gain of $${newGain}/sec with an ROI of ${(newGain/cost)*100}%`)\\n}\\n\\n/** @param {NS} ns */\\nasync function invest(ns, budget, servers) {\\n\\twhile (true) {\\n\\t\\tlet [action, cost, serverIndex] = chooseBestInvestment(ns, servers);\\n\\t\\tif (cost > budget) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tbudget -= cost;\\n\\t\\tif (action === 'buy') {\\n\\t\\t\\tservers.push(new Server(servers.length, 1, 1, 1));\\n\\t\\t\\tns.hacknet.purchaseNode();\\n\\t\\t} else { // upgrade\\n\\t\\t\\tservers[serverIndex].upgrade(ns, action);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1)\\n\\t}\\n\\n\\treturn {servers, budget};\\n}\\n\\nfunction getRamLevel(ramGB) {\\n\\treturn Math.log2(ramGB)+1\\n}\\n\\n/** @param {NS} ns */\\nfunction getServers(ns) {\\n\\tlet servers = []\\n\\tfor (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tlet nodeStats = ns.hacknet.getNodeStats(i)\\n\\t\\tlet server = new Server(servers.length, nodeStats.level, getRamLevel(nodeStats.ram), nodeStats.cores)\\n\\t\\tservers.push(server)\\n\\t}\\n\\t// servers.forEach(x => ns.tprint(x))\\n\\treturn servers\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length < 1) {\\n\\t\\tns.tprint(\\\"Usage: bitnet.js <budget>\\\")\\n\\t\\treturn;\\n\\t}\\n\\tlet servers = getServers(ns);\\n\\tlet budget = Number(ns.args[0]);\\n\\tlet result = await invest(ns, budget, servers);\\n\\tns.tprint(`Remaining budget: ${result.budget}`);\\n\\tresult.servers.forEach((server, i) => {\\n\\t\\tns.tprint(`Server ${i+1} stats: Level ${server.level}, RAM ${server.ram}, Core ${server.core}`);\\n\\t});\\t\\n}\",\"filename\":\"new/bitnet.js\",\"server\":\"home\"}}],[\"new/writeConst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tvar hnConst = ns.formulas.hacknetNodes.constants()\\n\\tvar hnMult = ns.getHacknetMultipliers()\\n\\t\\n\\tns.write(\\\"hnConst.js\\\", JSON.stringify(hnConst))\\n\\tns.write(\\\"hnMult.js\\\", JSON.stringify(hnMult))\\n}\",\"filename\":\"new/writeConst.js\",\"server\":\"home\"}}],[\"new/readConst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @param {NS} ns \\n * @param {string} filename\\n */\\nfunction readJson(ns, filename) {\\n\\tvar jsonStr = ns.read(filename)\\n\\treturn JSON.parse(jsonStr)\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.tprint(readJson(ns, \\\"hnConst.js\\\"))\\n\\tns.tprint(readJson(ns, \\\"hnMult.js\\\"))\\n}\",\"filename\":\"new/readConst.js\",\"server\":\"home\"}}],[\"new/old/cycle.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\t// simple program to get make some cash hacking a target\\n\\tns.hack(\\\"n00dles\\\")\\n}\",\"filename\":\"new/old/cycle.js\",\"server\":\"home\"}}],[\"new/old/hacknet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\t// list of upgrades?\\n\\t// check all options\\n\\t// put all options in a list?\\n\\t// get the result of that option?\\n\\tlet budget = ns.args[0]\\n\\tif (ns.args.length < 1) {\\n\\t\\tns.tprintf(\\\"Usage: hacknet.js <budget>\\\\nWill spend up to <budget> on upgrading hacknet\\\")\\n\\t\\treturn\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tlet fc = populateOptions(ns)\\n\\t\\tlet op = fc.findCheapest()\\n\\t\\n\\t\\t//ns.tprintf(\\\"cheapest is %s, %s, %s\\\", op.cost, op.func, op.args)\\n\\t\\tns.tprintf(\\\"cheapest is %s, %s, %s\\\", op.cost, op.desc, op.args)\\n\\t\\tif (op.cost > budget) {\\n\\t\\t\\tns.tprintf(\\\"budget expended, $%s needed and $%s remaining\\\", op.cost, budget)\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t\\top.execute()\\n\\t\\tbudget -= op.cost\\n\\t\\tawait ns.sleep(1)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction displayStats(ns) {\\n\\tlet nodes = ns.hacknet.numNodes()\\n\\tns.tprintf(\\\"you own %s nodes\\\", nodes)\\n\\n\\tfor (var i=0; i<nodes; i++) {\\n\\t\\tlet node = ns.hacknet.getNodeStats(i)\\n\\t\\tns.tprintf(\\\"node %s: %s cores, %s lvl, %s production, %s ram\\\", i, node.cores, node.level, node.production, node.ram)\\n\\t}\\n\\n\\tlet newNodeCost = ns.hacknet.getPurchaseNodeCost()\\n\\n\\tns.tprintf(\\\"new node cost $%s\\\", newNodeCost)\\n\\tns.tprintf(\\\"upgrade cost $%s\\\", newNodeCost)\\n}\\n\\n// find the cheapest option and do that option\\nclass Option {\\n    constructor(cost, func, args, desc) {\\n        this.cost = cost\\n        this.func = func\\n        this.args = args\\n\\t\\t\\t\\tthis.desc = desc\\n    }\\n\\n    execute() {\\n        this.func(...this.args)\\n    }\\n}\\n\\n// wraps a list of Option, finds the cheapest and executes it\\nclass FindCheapest {\\n    constructor() {\\n        this.options = []\\n    }\\n\\n    add(option) {\\n        this.options.push(option)\\n    }\\n\\n    findCheapest() {\\n        return this.options.reduce((prev, curr) => prev.cost < curr.cost? prev : curr)\\n    }\\n}\\n\\n/** @param {NS} ns */\\nfunction populateOptions(ns) {\\n\\tlet fc = new FindCheapest()\\n\\tlet newNodeCost = ns.hacknet.getPurchaseNodeCost()\\n\\t\\n\\tfc.add(new Option(newNodeCost, ns.hacknet.purchaseNode, [], \\\"purchaseNode\\\"))\\n\\n\\tlet nodes = ns.hacknet.numNodes()\\n\\tfor (var i=0; i<nodes; i++) {\\n\\t\\tfc.add(\\n\\t\\t\\tnew Option(\\n\\t\\t\\t\\tns.hacknet.getLevelUpgradeCost(i),\\n\\t\\t\\t\\tns.hacknet.upgradeLevel,\\n\\t\\t\\t\\t[i],\\n\\t\\t\\t\\t\\\"upgradeLevel\\\"\\n\\t\\t\\t)\\n\\t\\t)\\n\\n\\t\\tfc.add(\\n\\t\\t\\tnew Option(\\n\\t\\t\\t\\tns.hacknet.getRamUpgradeCost(i),\\n\\t\\t\\t\\tns.hacknet.upgradeRam,\\n\\t\\t\\t\\t[i],\\n\\t\\t\\t\\t\\\"upgradeRAM\\\"\\n\\t\\t\\t)\\n\\t\\t)\\n\\n\\t\\tfc.add(\\n\\t\\t\\tnew Option(\\n\\t\\t\\t\\tns.hacknet.getCoreUpgradeCost(i),\\n\\t\\t\\t\\tns.hacknet.upgradeCore,\\n\\t\\t\\t\\t[i],\\n\\t\\t\\t\\t\\\"upgradeCore\\\"\\n\\t\\t\\t)\\n\\t\\t)\\n\\t}\\n\\treturn fc\\n}\",\"filename\":\"new/old/hacknet.js\",\"server\":\"home\"}}],[\"new/old/hnform.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// formula-based budget allocation\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tawait auto(ns)\\n}\\n\\n/** @param {NS} ns */\\nasync function auto(ns) {\\n\\tfor (let i = 0; i < 100; i++) {\\n\\t\\tlet result = highLevel(ns)\\n\\t\\tlet itRan = result.execute()\\n\\t\\tns.tprint(result)\\n\\t\\t//if (itRan === -1 || itRan === false) {\\n\\t\\t\\t//break\\n\\t\\t//}\\n\\t\\tawait ns.sleep(10)\\n\\t}\\n}\\n\\nclass Option {\\n\\tconstructor(percReturn, func, args, desc) {\\n\\t\\tthis.percReturn = percReturn\\n\\t\\tthis.func = func\\n\\t\\tthis.args = args\\n\\t\\tthis.desc = desc\\n\\t}\\n\\n\\texecute() {\\n\\t\\treturn this.func(...this.args)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction highLevel(ns) {\\n\\tlet options = []\\n\\tlet hnMult = ns.getHacknetMultipliers()\\n\\n\\toptions.push(\\n\\t\\tnew Option(\\n\\t\\t\\tnewNodePercReturn(ns, hnMult),\\n\\t\\t\\tns.hacknet.purchaseNode,\\n\\t\\t\\t[],\\n\\t\\t\\t\\\"purchaseNode\\\"\\n\\t\\t)\\n\\t)\\n\\n\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tlet node = ns.hacknet.getNodeStats(i)\\n\\t\\tlet baseProd = getBaseProd(ns, node, hnMult)\\n\\t\\toptions.push(\\n\\t\\t\\tnew Option(\\n\\t\\t\\t\\tgetLevelUpgradeReturn(ns, node, hnMult, baseProd),\\n\\t\\t\\t\\tns.hacknet.upgradeLevel,\\n\\t\\t\\t\\t[i],\\n\\t\\t\\t\\t\\\"upgradeLevel\\\"\\n\\t\\t\\t)\\n\\t\\t)\\n\\t\\toptions.push(\\n\\t\\t\\tnew Option(\\n\\t\\t\\t\\tgetRamUpgradeReturn(ns, node, hnMult, baseProd),\\n\\t\\t\\t\\tns.hacknet.upgradeRam,\\n\\t\\t\\t\\t[i],\\n\\t\\t\\t\\t\\\"upgradeRam\\\"\\n\\t\\t\\t)\\n\\t\\t)\\n\\t\\toptions.push(\\n\\t\\t\\tnew Option(\\n\\t\\t\\t\\tgetCoreUpgradeReturn(ns, node, hnMult, baseProd),\\n\\t\\t\\t\\tns.hacknet.upgradeCore,\\n\\t\\t\\t\\t[i],\\n\\t\\t\\t\\t\\\"upgradeCore\\\"\\n\\t\\t\\t)\\n\\t\\t)\\n\\t}\\n\\n\\tlet result = options.reduce((prev, curr) => prev > curr ? prev : curr)\\n\\treturn result\\n}\\n\\n/** */\\n/**\\n * @param {NS} ns \\n * @param {HacknetMultipliers} hnMult \\n */\\nfunction newNodePercReturn(ns, hnMult) {\\n\\tlet cost = ns.hacknet.getPurchaseNodeCost()\\n\\tlet prod = ns.formulas.hacknetNodes.moneyGainRate(1, 1, 1, hnMult.production)\\n\\treturn prod / cost\\n}\\n\\n/**\\n *  @param {NS} ns \\n *  @param {NodeStats} node \\n *  @param {HacknetMultipliers} hnMult \\n */\\nfunction getBaseProd(ns, node, hnMult) {\\n\\tlet baseProd = ns.formulas.hacknetNodes.moneyGainRate(node.level, node.ram, node.cores, hnMult.production)\\n\\treturn baseProd\\n}\\n\\n/**\\n * @param {NS} ns \\n * @param {NodeStats} node\\n * @param {HacknetMultipliers} hnMult\\n **/\\nfunction getLevelUpgradeReturn(ns, node, hnMult, baseProd) {\\n\\tlet cost = ns.formulas.hacknetNodes.levelUpgradeCost(node.level, 1, hnMult.levelCost)\\n\\tlet prod = ns.formulas.hacknetNodes.moneyGainRate(node.level + 1, node.ram, node.cores, hnMult.production)\\n\\treturn (prod - baseProd) / cost\\n}\\n\\n/**\\n * @param {NS} ns \\n * @param {NodeStats} node\\n * @param {HacknetMultipliers} hnMult\\n **/\\nfunction getRamUpgradeReturn(ns, node, hnMult, baseProd) {\\n\\tlet cost = ns.formulas.hacknetNodes.ramUpgradeCost(node.ram, 1, hnMult.ramCost)\\n\\tlet prod = ns.formulas.hacknetNodes.moneyGainRate(node.level, node.ram * 2, node.cores, hnMult.production)\\n\\treturn (prod - baseProd) / cost\\n}\\n\\n/**\\n * @param {NS} ns \\n * @param {NodeStats} node\\n * @param {HacknetMultipliers} hnMult\\n **/\\nfunction getCoreUpgradeReturn(ns, node, hnMult, baseProd) {\\n\\tlet cost = ns.formulas.hacknetNodes.coreUpgradeCost(node.cores, 1, hnMult.coreCost)\\n\\tlet prod = ns.formulas.hacknetNodes.moneyGainRate(node.level, node.ram, node.cores + 1, hnMult.production)\\n\\treturn (prod - baseProd) / cost\\n}\",\"filename\":\"new/old/hnform.js\",\"server\":\"home\"}}],[\"new/old/hnmm.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n}\",\"filename\":\"new/old/hnmm.js\",\"server\":\"home\"}}],[\"new/ns3.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function serverCost(ns, numServers) {\\n\\tconst hnMult = ns.getHacknetMultipliers()\\n\\treturn ns.formulas.hacknetNodes.hacknetNodeCost(numServers + 1, hnMult.purchaseCost)\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeLevel(ns, numLevels) {\\n\\tconst hnMult = ns.getHacknetMultipliers()\\n\\treturn ns.formulas.hacknetNodes.levelUpgradeCost(numLevels, 1, hnMult.levelCost)\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeRam(ns, numRam) {\\n\\tconst ramGB = Math.pow(2, (numRam-1))\\n\\tconst hnMult = ns.getHacknetMultipliers()\\n\\treturn ns.formulas.hacknetNodes.ramUpgradeCost(ramGB, 1, hnMult.ramCost)\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeCore(ns, numCore) {\\n\\tconst hnMult = ns.getHacknetMultipliers()\\n\\treturn ns.formulas.hacknetNodes.coreUpgradeCost(numCore, 1, hnMult.coreCost)\\n}\\n\\n/** @param {NS} ns */\\nexport function moneyGainRate(ns, levels, ram, cores) {\\n\\tconst ramGB = Math.pow(2, (ram-1))\\n\\tconst hnMult = ns.getHacknetMultipliers()\\n\\treturn ns.formulas.hacknetNodes.moneyGainRate(levels, ramGB, cores, hnMult.production)\\n}\\n\\nfunction more(ns, servers) {\\n\\tns.tprintf(\\\"new server $%s\\\", serverCost(ns, servers))\\n}\\n\\nfunction stats(ns, levels, ram, cores) {\\n\\tns.tprintf(\\\"lvl up $%s\\\", upgradeLevel(ns, levels))\\n\\tns.tprintf(\\\"ram up $%s\\\", upgradeRam(ns, ram))\\n\\tns.tprintf(\\\"cores up $%s\\\", upgradeCore(ns, cores))\\n\\tns.tprintf(\\\"%s $/sec\\\", moneyGainRate(ns, levels, ram, cores))\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tmore(ns, 15)\\n\\tstats(ns, 3, 4, 3)\\n}\",\"filename\":\"new/ns3.js\",\"server\":\"home\"}}],[\"hnConst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"{\\\"MoneyGainPerLevel\\\":1.5,\\\"BaseCost\\\":1000,\\\"LevelBaseCost\\\":500,\\\"RamBaseCost\\\":30000,\\\"CoreBaseCost\\\":500000,\\\"PurchaseNextMult\\\":1.85,\\\"UpgradeLevelMult\\\":1.04,\\\"UpgradeRamMult\\\":1.28,\\\"UpgradeCoreMult\\\":1.48,\\\"MaxLevel\\\":200,\\\"MaxRam\\\":64,\\\"MaxCores\\\":16}\",\"filename\":\"hnConst.js\",\"server\":\"home\"}}],[\"hnMult.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"{\\\"production\\\":3.907658646878548,\\\"purchaseCost\\\":0.4937487874718051,\\\"ramCost\\\":0.6454232515971309,\\\"coreCost\\\":0.6454232515971309,\\\"levelCost\\\":0.5486097638575612}\",\"filename\":\"hnMult.js\",\"server\":\"home\"}}],[\"new/ns4.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const SERVER_COST_MULT = 1.85;\\nconst SERVER_BASE_COST = 30000;\\nconst SERVER_MAX = 100;\\n\\nconst LEVEL_BASE_COST = 1000;\\nconst LEVEL_COST_MULT = 1.2;\\nconst LEVEL_MAX = 30;\\n\\nconst RAM_BASE_COST = 10000;\\nconst RAM_COST_MULT = 2.85;\\nconst RAM_MAX = 64;\\n\\nconst CORE_BASE_COST = 5000;\\nconst CORE_COST_MULT = 1.5;\\nconst CORE_MAX = 24;\\n\\nclass HnConst {\\n\\t/** @param {NS} ns */\\n\\tconstructor(ns) {\\n\\t\\t// this.hnConst = JSON.parse(ns.read(\\\"hnConst.json\\\"))\\n\\t\\t// this.hnMult = JSON.parse(ns.read(\\\"hnMult.json\\\"))\\n\\t\\tthis.hnConst = ns.formulas.hacknetNodes.constants()\\n\\t\\tthis.hnMult = ns.getHacknetMultipliers()\\n\\t}\\n\\n\\tserverCost(numServers) {\\n\\t\\tlet cost = this.hnConst.BaseCost * Math.pow(this.hnConst.PurchaseNextMult, numServers);\\n\\t\\treturn cost * this.hnMult.purchaseCost;\\n\\t}\\n\\t\\n\\tupgradeLevel(numLevels) {\\n\\t\\tlet cost = this.hnConst.LevelBaseCost * Math.pow(this.hnConst.UpgradeLevelMult, numLevels);\\n\\t\\treturn cost * this.hnMult.levelCost;\\n\\t}\\n\\n\\tupgradeRam(numRam) {\\n\\t\\tlet cost = this.hnConst.RamBaseCost * Math.pow(this.hnConst.UpgradeRamMult, numRam);\\n\\t\\treturn cost * this.hnMult.ramCost;\\n\\t}\\n\\n\\tupgradeCore(numCore) {\\n\\t\\tlet cost = this.hnConst.CoreBaseCost * Math.pow(this.hnConst.UpgradeCoreMult, numCore);\\n\\t\\treturn cost * this.hnMult.coreCost;\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport function serverCost(numServers) {\\n    if (numServers >= SERVER_MAX) {\\n        return Infinity;\\n    }\\n    return SERVER_BASE_COST * Math.pow(SERVER_COST_MULT, numServers);\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeLevel(numLevels) {\\n    if (numLevels >= LEVEL_MAX) {\\n        return Infinity;\\n    }\\n    return LEVEL_BASE_COST * Math.pow(LEVEL_COST_MULT, numLevels);\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeRam(numRam) {\\n    if (numRam >= RAM_MAX) {\\n        return Infinity;\\n    }\\n    return RAM_BASE_COST * Math.pow(RAM_COST_MULT, numRam);\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeCore(numCore) {\\n    if (numCore >= CORE_MAX) {\\n        return Infinity;\\n    }\\n    return CORE_BASE_COST * Math.pow(CORE_COST_MULT, numCore);\\n}\\n\\n/** @param {NS} ns */\\nexport function moneyGainRate(levels, ram, cores) {\\n    return (levels * 100 * ram * cores);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"new/ns4.js\",\"server\":\"home\"}}],[\"new/ns2.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const SERVER_COST_MULT = 1.85;\\nconst SERVER_BASE_COST = 30000;\\nconst SERVER_MAX = 100;\\n\\nconst LEVEL_BASE_COST = 1000;\\nconst LEVEL_COST_MULT = 1.2;\\nconst LEVEL_MAX = 30;\\n\\nconst RAM_BASE_COST = 10000;\\nconst RAM_COST_MULT = 2.85;\\nconst RAM_MAX = 64;\\n\\nconst CORE_BASE_COST = 5000;\\nconst CORE_COST_MULT = 1.5;\\nconst CORE_MAX = 24;\\n\\n\\n\\nclass HnConst {\\n\\t/** @param {NS} ns */\\n\\tconstructor(ns) {\\n\\t\\tif (HnConst.instance) {\\n\\t\\t\\treturn HnConst.instance;\\n\\t\\t}\\n\\t\\tthis.hnConst = ns.formulas.hacknetNodes.constants();\\n\\t\\tthis.hnMult = ns.getHacknetMultipliers();\\n\\t\\tHnConst.instance = this;\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport function serverCost(ns, numServers) {\\n\\tlet hn = new HnConst(ns);\\n\\tlet cost = hn.hnConst.BaseCost * Math.pow(hn.hnConst.PurchaseNextMult, numServers);\\n\\treturn cost * hn.hnMult.purchaseCost;\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeLevel(ns, numLevels) {\\n\\tlet hn = new HnConst(ns);\\n\\tlet cost = hn.hnConst.LevelBaseCost * Math.pow(hn.hnConst.UpgradeLevelMult, numLevels);\\n\\treturn cost * hn.hnMult.levelCost;\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeRam(ns, numRam) {\\n\\tlet hn = new HnConst(ns);\\n\\tlet cost = hn.hnConst.RamBaseCost * Math.pow(hn.hnConst.UpgradeRamMult, numRam);\\n\\treturn cost * hn.hnMult.ramCost;\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeCore(ns, numCore) {\\n\\tlet hn = new HnConst(ns);\\n\\tlet cost = hn.hnConst.CoreBaseCost * Math.pow(hn.hnConst.UpgradeCoreMult, numCore);\\n\\treturn cost * hn.hnMult.coreCost;\\n}\\n\\n/** @param {NS} ns */\\nexport function moneyGainRate(ns, levels, ram, cores) {\\n    return (levels * 100 * ram * cores);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"new/ns2.js\",\"server\":\"home\"}}],[\"stats/hackStats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer(target);\\n\\tlet person = ns.getPlayer();\\n\\tlet obj = {}\\n\\n\\tns.tprint(server)\\n\\tobj.growPercent = ns.formulas.hacking.growPercent(server, 1, person, 1);\\n\\tobj.growTime = ns.formulas.hacking.growTime(server, person)\\n\\tobj.hackChance = ns.formulas.hacking.hackChance(server, person)\\n\\tobj.hackPercent = ns.formulas.hacking.hackPercent(server, person)\\n\\tobj.hackTime = ns.formulas.hacking.hackTime(server, person)\\n\\tobj.weakenTime = ns.formulas.hacking.weakenTime(server, person)\\n\\n\\n\\n\\tns.tprint('\\\\n')\\n\\tns.tprint(obj)\\n\\tadvanced(ns, obj)\\n}\\n\\n/** @param {NS} ns */\\nfunction advanced(ns, obj) {\\n\\tlet adv = {}\\n\\tadv.idealStartingPercent = 1 / obj.growPercent\\n\\tadv.hacksPerCycle = (1-adv.idealStartingPercent)/obj.hackPercent\\n\\tadv.growsPerCycle = 1\\n\\tadv.weakensPerCycle = (adv.hacksPerCycle*.002 + adv.growsPerCycle*.004) / .05\\n\\tadv.secondsPerCycle = obj.weakenTime\\n\\n\\tns.tprint('\\\\n')\\n\\tns.tprint(adv)\\n}\\n\\n\\n/** @param {NS} ns */\\nfunction cycle(ns) {\\n\\t// ns.tprintf(\\\"Initial\\\\t|\\\\t$%s (%s)\\\\t|\\\\t%s\\\\t|\\\\t%s|\\\\t%s\\\", 100)\\n\\n\\n\\n\\n}\\n\\n/** @param {NS} ns */\\nfunction calcGrow(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet server = ns.getServer(target)\\n\\tlet threads = Number(ns.args[1])\\n\\tlet cores = Number(ns.args[2])\\n\\tlet obj = {}\\n\\tobj.growPercent = ns.formulas.hacking.growPercent(server, threads, ns.getPlayer(), cores);\\n\\n\\tns.tprint(obj);\\n}\",\"filename\":\"stats/hackStats.js\",\"server\":\"home\"}}],[\"stats/noFormula.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet obj = basic(ns, target)\\n\\tlet rate = Number(ns.args[1])\\n\\tif (ns.args.length < 2) {\\n\\t\\trate = 1\\n\\t}\\n\\n\\tns.tprint(obj)\\n\\tsimple(ns, target)\\n\\tfor (let i = 1; i<100*rate; i+=rate){\\n\\t\\tlet adv = advanced(ns, obj, i, target)\\n\\t\\tif (adv.hacksPerCycle >= 1) {\\n\\t\\t\\t// ns.tprint(adv)\\n\\t\\t\\tns.tprintf(\\n\\t\\t\\t\\t\\\"t: %s, h|g|w: %s|%s|%s, $/t: %s, $/s: %s, $/ts: %s\\\",\\n\\t\\t\\t\\tns.formatNumber(adv.totalThreads),\\n\\t\\t\\t\\tns.formatNumber(adv.hacksPerCycle),\\n\\t\\t\\t\\tns.formatNumber(adv.growsPerCycle),\\n\\t\\t\\t\\tns.formatNumber(adv.weakensPerCycle),\\n\\t\\t\\t\\tns.formatNumber(adv.cashPerThread),\\n\\t\\t\\t\\tns.formatNumber(adv.totalCashPerSecond),\\n\\t\\t\\t\\tns.formatNumber(adv.cashPerThreadSec),\\n\\t\\t\\t)\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function basic(ns, target) {\\n\\n\\tlet obj = {}\\n\\tobj.hackPercent = ns.hackAnalyze(target)\\n\\tobj.hackChance = ns.hackAnalyzeChance(target)\\n\\tobj.hackTime = ns.getHackTime(target) / 1000\\n\\tobj.hackSecurity = ns.hackAnalyzeSecurity(1, target)\\n\\n\\tobj.weakenSecurity = ns.weakenAnalyze(1)\\n\\tobj.weakenTime = ns.getWeakenTime(target) / 1000\\n\\n\\tobj.growTime = ns.getGrowTime(target) / 1000\\n\\tobj.growSecurity = ns.growthAnalyzeSecurity(1, target)\\n\\tobj.growPercent = growFactor(ns, target)\\n\\n\\tobj.target = target\\n\\n\\treturn obj\\n}\\n\\n\\n\\n/** @param {NS} ns */\\nfunction growFactor(ns, target) {\\n\\tlet growsToDouble = ns.growthAnalyze(target, 2)\\n\\treturn Math.pow(2, 1/growsToDouble)\\n}\\n\\n/** @param {NS} ns */\\nfunction simple(ns, target) {\\n\\tlet cash  = ns.getServerMoneyAvailable(target)\\n\\tlet cashMax = ns.getServerMaxMoney(target)\\n\\tlet sec = ns.getServerSecurityLevel(target)\\n\\tlet minSec = ns.getServerMinSecurityLevel(target)\\n\\n\\tns.tprintf(\\\"$%s/%s (%s), min / current = %s / %s\\\", cash, cashMax, (cash/cashMax)*100, minSec, sec)\\n}\\n\\n/** @param {NS} ns */\\nexport function advanced(ns, obj, grows) {\\n\\tlet adv = {}\\n\\tadv.idealStartingPercent = 1 / (Math.pow(obj.growPercent,grows))\\n\\tadv.hacksPerCycle = (1-adv.idealStartingPercent)/obj.hackPercent\\n\\tadv.growsPerCycle = grows\\n\\tadv.weakensPerCycle = (adv.hacksPerCycle*.002 + adv.growsPerCycle*.004) / .05\\n\\tadv.secondsPerCycle = obj.weakenTime\\n\\tadv.totalThreads = grows+adv.weakensPerCycle+adv.hacksPerCycle\\n\\tadv.percentPerThread = (1-adv.idealStartingPercent) / (adv.totalThreads)\\n\\tadv.cashPerThread = adv.percentPerThread*ns.getServerMaxMoney(obj.target)\\n\\tadv.cashPerThreadSec = adv.cashPerThread / adv.secondsPerCycle\\n\\tadv.totalCashPerCycle = adv.cashPerThread * adv.totalThreads\\n\\tadv.totalCashPerSecond = adv.totalCashPerCycle / adv.secondsPerCycle\\n\\treturn adv\\n}\",\"filename\":\"stats/noFormula.js\",\"server\":\"home\"}}],[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"home\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"home\"}}],[\"cycle.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length === 0) {\\n\\t\\tns.tprintf(\\\"Usage: cycle.js <target> <hackThreads> <growThreads> <weakenThreads>\\\")\\n\\t\\treturn\\n\\t}\\n\\tlet target = ns.args[0]\\n\\tlet hackThreads = Number(ns.args[1])\\n\\tlet growThreads = Number(ns.args[2])\\n\\tlet weakenThreads = Number(ns.args[3])\\n\\n\\tlet hackScript = \\\"basic/hackOnce.js\\\"\\n\\tlet growScript = \\\"basic/growOnce.js\\\"\\n\\tlet weakenScript = \\\"basic/weakenOnce.js\\\"\\n\\n\\tlet files = [hackScript, growScript, weakenScript]\\n\\tdl(ns, files, target)\\n\\n\\trunScript(ns, hackScript, target, hackThreads)\\n\\trunScript(ns, growScript, target, growThreads)\\n\\trunScript(ns, weakenScript, target, weakenThreads)\\n}\\n\\n/** @param {NS} ns */\\nfunction runScript(ns, script, target, threads) {\\n\\tif (threads === null || threads === undefined) {\\n\\t\\tns.run(script, 1, target, 1)\\n\\t}\\n\\n\\tif (threads > 0) {\\n\\t\\tns.run(script, threads, target, threads)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction dl(ns, files, target) {\\n\\tfor (let file of files) {\\n\\t\\tif (!ns.fileExists(file, target)) {\\n\\t\\t\\tns.scp(file, target)\\n\\t\\t}\\n\\t}\\n}\\n\\n\",\"filename\":\"cycle.js\",\"server\":\"home\"}}],[\"cycleCont.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet time = ns.getWeakenTime(ns.args[0])\\n\\twhile (true) {\\n\\t\\tns.run(\\\"cycle.js\\\", 1, ...ns.args)\\n\\t\\tawait ns.sleep(time + 1000)\\n\\t}\\n}\",\"filename\":\"cycleCont.js\",\"server\":\"home\"}}],[\"stats/compare.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\t// let target = ns.args[0]\\n\\tlet cores = Number(ns.args[0])\\n\\n\\tlet targets = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tlet results = getSortedResults(ns, targets)\\n\\tns.tprint(results)\\n\\n\\tfor (let result in results) {\\n\\t\\tlet stats = results[result]\\n\\t\\tlet viewModel = ns.formatNumber(stats)\\n\\t\\tns.tprintf(\\\"%s $/sec: %s\\\", result, viewModel)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction getSortedResults(ns, targets) {\\n\\n\\tlet results = {}\\n\\tfor (let target of targets) {\\n\\t\\tlet stats = getStats(ns, target)\\n\\t\\tresults[target] = stats\\n\\t}\\n\\tlet sortedKeys = Object.keys(results).sort((a, b) => results[b] - results[a]);\\n\\n\\tlet sortedObj = {};\\n\\tfor (let key of sortedKeys) {\\n\\t\\t\\tsortedObj[key] = results[key];\\n\\t}\\n\\treturn sortedObj\\n}\\n\\n/** @param {NS} ns */\\nfunction getStats(ns, target, cores) {\\n\\tlet maxC = ns.getServerMaxMoney(target)\\n\\n\\tlet growthR = growthRate(ns, target, cores)\\n\\n\\tlet time = ns.getWeakenTime(target)\\n\\n\\treturn (maxC*growthR) / time\\n\\n}\\n\\n/** @param {NS} ns */\\nfunction growthRate(ns, target, cores) {\\n\\tlet growsToDouble = ns.growthAnalyze(target, 2, cores)\\n\\treturn Math.pow(2, 1/growsToDouble)\\n}\\n\",\"filename\":\"stats/compare.js\",\"server\":\"home\"}}],[\"stats/graph.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n *  @param {string} hostname\\n*/\\nexport async function getAllUniqueHosts(ns, hostname) {\\n  let queue = [hostname];\\n  let uniqueHosts = new Set();\\n\\n\\tlet hostGraph = {}\\n\\n  while (queue.length > 0) {\\n    const currentHost = queue.shift();\\n\\n    if (uniqueHosts.has(currentHost)) {\\n      continue;\\n    }\\n\\n    uniqueHosts.add(currentHost);\\n    const connectedHosts = ns.scan(currentHost);\\n\\t\\thostGraph[currentHost] = connectedHosts;\\n    queue = queue.concat(connectedHosts);\\n    await ns.sleep(5)\\n  }\\n\\n  return hostGraph\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet msg = \\\"graph TB\\\\n\\\"\\n\\tlet hostGraph = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tfor (let host in hostGraph) {\\n//\\t\\tfor (let connected of hostGraph[host]) {\\n//\\t\\t\\tmsg += `  ${host} --> ${connected}\\\\n`\\n//\\t\\t}\\n\\t\\tfor (let file of ns.ls(host)) {\\n\\t\\t\\tif (file.includes(\\\"/\\\")) {\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\t}\\n\\t\\t\\tmsg += `  ${host} --> ${file}\\\\n`\\n\\t\\t}\\n\\t}\\n\\tns.tprintf(\\\"%s\\\", msg)\\n}\",\"filename\":\"stats/graph.js\",\"server\":\"home\"}}],[\"stats/all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\nimport {advanced, basic} from \\\"/stats/noFormula.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\n\\tlet advList = []\\n\\tfor (let target of hosts) {\\n\\t\\tlet obj = basic(ns, target)\\n\\t\\tlet adv = advanced(ns, obj, 1)\\n\\t\\tadvList.push([adv, obj])\\n\\t}\\n\\tadvList.sort((a, b) => b[0].cashPerThreadSec - a[0].cashPerThreadSec)\\n\\n\\tfor (let adv of advList) {\\n\\t\\tlet a = adv[0]\\n\\t\\tlet b = adv[1]\\n\\t\\tns.tprintf(\\\"%s: $/t: %s, $/s: %s, $/ts: %s\\\", b.target, a.cashPerThread, a.cashPerSecond, a.cashPerThreadSec)\\n\\t}\\n}\",\"filename\":\"stats/all.js\",\"server\":\"home\"}}],[\"whileCycle.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet hackThreads = Number(ns.args[1])\\n\\tlet growThreads = Number(ns.args[2])\\n\\tlet weakenThreads = Number(ns.args[3])\\n\\tlet delay = Number(ns.args[4])\\n\\n\\tlet hackScript = \\\"basic/hackOnce.js\\\"\\n\\tlet growScript = \\\"basic/growOnce.js\\\"\\n\\tlet weakenScript = \\\"basic/weakenOnce.js\\\"\\n\\n\\twhile (true) {\\n\\t\\trunScript(ns, hackScript, hackThreads, target)\\n\\t\\trunScript(ns, growScript, growThreads, target)\\n\\t\\trunScript(ns, weakenScript, weakenThreads, target)\\n\\t\\tawait ns.sleep(delay)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction runScript(ns, script, threads, target) {\\n\\tif (threads <= 0) {\\n\\t\\treturn;\\n\\t}\\n\\tns.run(script, threads, target, threads)\\n}\",\"filename\":\"whileCycle.js\",\"server\":\"home\"}}],[\"assign.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"basic/backdoor.js\\\"\\n\\nconst hackScript = \\\"basic/hackOnce.js\\\"\\nconst growScript = \\\"basic/growOnce.js\\\"\\nconst weakenScript = \\\"basic/weakenOnce.js\\\"\\nconst cycleScript = \\\"whileCycle.js\\\"\\nconst scriptCost = 1.75\\nconst cycleScriptCost = 2.6\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tlet target = ns.args[0]\\n\\tlet growPercent = Number(ns.args[1])\\n\\tlet weakenPercent = Number(ns.args[2])\\n\\t// let hackPercent = 1-(growPercent+weakenPercent)\\n\\n\\tfor (let targetHost of hosts) {\\n\\t\\tif (!ns.hasRootAccess(targetHost)) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tns.tprint(targetHost)\\n\\t\\tns.killall(targetHost, true)\\n\\t\\tcheckFiles(ns, targetHost)\\n\\t\\tawait handleServer(ns, targetHost, target, growPercent, weakenPercent)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction checkFiles(ns, targetHost) {\\n\\tns.scp(cycleScript, targetHost)\\n\\t//if (!ns.fileExists(cycleScript, targetHost)) {\\n\\t\\t// ns.scp(cycleScript, targetHost)\\n\\t// }\\n\\tif (!ns.fileExists(hackScript, targetHost)) {\\n\\t\\tns.scp(hackScript, targetHost)\\n\\t}\\n\\tif (!ns.fileExists(growScript, targetHost)) {\\n\\t\\tns.scp(growScript, targetHost)\\n\\t}\\n\\tif (!ns.fileExists(weakenScript, targetHost)) {\\n\\t\\tns.scp(weakenScript, targetHost)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nasync function handleServer(ns, targetHost, target, growPercent, weakenPercent) {\\n\\tlet distr = await getThreadDistr(ns, targetHost, growPercent, weakenPercent)\\n\\tns.tprint(distr)\\n\\tfor (let key in distr) {\\n\\t\\tns.tprintf(\\\"%s: %s\\\", key, distr[key])\\n\\t}\\n\\n\\tlet delay = ns.getWeakenTime(target) + 500\\n\\tns.exec(cycleScript, targetHost, 1, target, distr[hackScript], distr[growScript], distr[weakenScript], delay)\\n\\tns.tprintf(\\\"%s %s [%s] %s %s %s %s %s\\\", cycleScript, targetHost, 1, target, distr[hackScript], distr[growScript], distr[weakenScript], delay)\\n}\\n\\nfunction chooseScript(growPercent, weakenPercent) {\\n  const randNum = Math.random();\\n\\n  if (randNum < growPercent) {\\n    return growScript;\\n  } else if (randNum < growPercent + weakenPercent) {\\n    return weakenScript;\\n  } else {\\n    return hackScript;\\n  }\\n}\\n\\n/** @param {NS} ns */\\nasync function getThreadDistr(ns, targetHost, growPercent, weakenPercent) {\\n\\tlet ramRemaining = getRamRemaining(ns, targetHost)\\n\\tlet distr = {\\n\\t\\t[hackScript]: 0,\\n\\t\\t[growScript]: 0,\\n\\t\\t[weakenScript]: 0,\\n\\t}\\n\\n\\tlet cost = scriptCost\\n\\twhile (true) {\\n\\t\\tlet script = chooseScript(growPercent, weakenPercent)\\n\\t\\tif (cost > ramRemaining) {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t\\tdistr[script] += 1\\n\\t\\tramRemaining -= cost\\n\\t\\tawait ns.sleep(1)\\n\\t}\\n\\n\\treturn distr\\n}\\n\\n\\n/** @param {NS} ns */\\nfunction getRamRemaining(ns, targetHost) {\\n\\tlet used = ns.getServerUsedRam(targetHost)\\n\\tlet max = ns.getServerMaxRam(targetHost)\\n\\treturn max - used - cycleScriptCost\\n}\",\"filename\":\"assign.js\",\"server\":\"home\"}}],[\"stats/threads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\n\\nconst cycleScriptCost = 2.6\\nconst scriptCost = 1.75\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tlet potentialTotal = 0\\n\\tlet realTotal = 0\\n\\tlet total = 0\\n\\n\\tfor (let host of hosts) {\\n\\t\\tif (!ns.hasRootAccess(host)) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tconst maxRam = ns.getServerMaxRam(host)\\n\\t\\tlet freeRam = maxRam - ns.getServerUsedRam(host)\\n\\t\\tpotentialTotal += maxRam\\n\\t\\trealTotal += freeRam\\n\\t\\ttotal += (freeRam - cycleScriptCost)\\n\\t}\\n\\n\\tns.tprintf(\\\"Potential RAM: %s\\\\nPotential Threads: %s\\\", ns.formatRam(potentialTotal), ns.formatNumber(potentialTotal/scriptCost))\\n\\tns.tprintf(\\\"Total RAM: %s\\\\nTotal Threads: %s\\\", ns.formatRam(realTotal), ns.formatNumber(realTotal/scriptCost))\\n\\tns.tprintf(\\\"Effective RAM: %s\\\\nEffective Threads: %s\\\", ns.formatRam(total), ns.formatNumber(total/scriptCost))\\n}\",\"filename\":\"stats/threads.js\",\"server\":\"home\"}}],[\"new/clearSec.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\n\\nconst weakenScript = \\\"/basic/weakenOnce.js\\\"\\nconst weakenScriptCost = 1.75\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tlet arg = ns.args[0]\\n\\tlet obj = getWeakens(ns, hosts)\\n\\tns.print(obj)\\n\\twhile (true) {\\n\\t\\tqueueWeakens(ns, hosts, obj)\\n\\t\\tif (arg !== \\\"repeat\\\") {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t\\tawait ns.sleep(10000)\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns */\\nfunction getWeakens(ns, hosts) {\\n\\tlet weakensToQueue = {}\\n\\n\\t// drop protection of each target as much as possible\\n\\t// only if it has prot\\n\\tfor (let host of hosts) {\\n\\t\\tlet server = ns.getServer(host)\\n\\t\\tif (!isTarget(server)) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\tconst difficultyDrop = server.hackDifficulty - server.minDifficulty\\n\\t\\tweakensToQueue[server.hostname] = Math.ceil( difficultyDrop / .05)\\n\\t}\\n\\treturn weakensToQueue\\n}\\n\\n/** @param {NS} ns */\\nfunction queueWeakens(ns, hosts, weakensToQueue) {\\n\\tfor (const target in weakensToQueue) {\\n\\t\\t// ns.printf(\\\"queueUp %s %s\\\", weakens, target)\\n\\t\\tqueueUp(ns, hosts, weakensToQueue, target)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction queueUp(ns, hosts, weakensToQueue, target) {\\n\\tfor (let host of hosts) {\\n\\t\\tlet server = ns.getServer(host)\\n\\n\\t\\tif (!server.hasAdminRights) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\tconst threadsAvailable = howManyThreads(server)\\n\\t\\tconst threads = Math.min(weakensToQueue[target], threadsAvailable)\\n\\t\\tif (threads <= 0) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\t// ns.printf(\\\"weakenOnce %s %s %s\\\", host, target, threads)\\n\\t\\tweakenOnce(ns, host, target, threads)\\n\\t\\tweakensToQueue[target] -= threads\\n\\t\\tif (weakensToQueue[target] <= 0) {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction install(ns, host) {\\n\\tif (!ns.fileExists(weakenScript, host)) {\\n\\t\\tns.scp(weakenScript, host)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction weakenOnce(ns, host, target, threads) {\\n\\tinstall(ns, host)\\n\\tns.exec(weakenScript, host, threads, target, threads)\\n}\\n\\n/** @param {Server} server */\\nfunction howManyThreads(server) {\\n\\tconst ramFree = server.maxRam - server.ramUsed\\n\\tconst runThisMany = Math.floor(ramFree / weakenScriptCost)\\n\\treturn runThisMany\\n}\\n\\n/** @param {Server} server */\\nfunction isTarget(server) {\\n\\treturn server.hasAdminRights && !server.purchasedByPlayer && server.hostname !== \\\"home\\\"\\n}\",\"filename\":\"new/clearSec.js\",\"server\":\"home\"}}],[\"oneCycle.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"basic/backdoor.js\\\"\\nconst hackScript = \\\"/basic/hackOnce.js\\\"\\nconst growScript = \\\"/basic/growOnce.js\\\"\\nconst weakenScript = \\\"/basic/weakenOnce.js\\\"\\n\\nconst hackScriptCost = 1.7\\nconst growScriptCost = 1.75\\nconst weakenScriptCost = 1.75\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length !== 4) {\\n\\t\\tns.tprintf(\\\"Usage: oneCycle.js <target> <hackThreads> <growThreads> <weakenThreads>\\\")\\n\\t\\treturn\\n\\t}\\n\\tconst target = ns.args[0]\\n\\tconst hackThreads = ns.args[1]\\n\\tconst growThreads = ns.args[2]\\n\\tconst weakenThreads = ns.args[3]\\n\\n\\tconst hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\t// assign the cycle to computers\\n\\twhile (true) {\\n\\t\\tconst queue = getQueue(hackThreads, growThreads, weakenThreads)\\n\\t\\tcycle(ns, target, hosts, queue)\\n\\t\\tconst delay = ns.getWeakenTime(target)\\n\\t\\tawait ns.sleep(delay + 500)\\n\\t}\\n}\\n\\n/** \\n * @param {NS} ns\\n * @param {string} host\\n * @param {string} script\\n */\\nfunction install(ns, host, script) {\\n\\tlet scriptExists = true\\n\\tscriptExists = ns.fileExists(script, host)\\n\\tif (!scriptExists) {\\n\\t\\tns.scp(script, host)\\n\\t}\\n}\\n\\n/** \\n * @param {number} hackThreads\\n * @param {number} growThreads\\n * @param {number} weakenThreads\\n */\\nfunction getQueue(hackThreads, growThreads, weakenThreads) {\\n\\treturn [\\n\\t\\t[hackScript, hackThreads, hackScriptCost],\\n\\t\\t[growScript, growThreads, growScriptCost],\\n\\t\\t[weakenScript, weakenThreads,\\tweakenScriptCost],\\n\\t]\\n}\\n\\n/** \\n * @param {NS} ns\\n * @param {string} target\\n * @param {string[]} hosts\\n * @param {number[][]} queue\\n */\\nfunction cycle(ns, target, hosts, queue) {\\n\\twhile (queue.length > 0) {\\n\\t\\tlet [script, threads, cost] = queue.pop()\\n\\t\\tassign(ns, hosts, target, script, threads, cost)\\n\\t}\\n}\\n\\n\\n\\n/** \\n * @param {NS} ns\\n * @param {string[]} hosts\\n * @param {string} script\\n * @param {number} threads\\n * @param {number} cost\\n */\\nfunction assign(ns, hosts, target, script, threads, cost) {\\n\\tlet remaining = threads\\n\\n\\tfor (let i = hosts.length - 1; i > -1; i--) {\\n\\t\\tconst host = hosts[i]\\n\\t\\tif (!ns.hasRootAccess(host)) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tconst freeRam = ns.getServerMaxRam(host) - ns.getServerUsedRam(host)\\n\\t\\tconst timesAble = Math.floor(freeRam / cost)\\n\\t\\tconst times = Math.min(timesAble, remaining)\\n\\t\\tif (times < 1) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tns.tprintf(\\\"runScript %s %s %s %s\\\", script, host, target, times)\\n\\t\\trunScript(ns, script, host, target, times)\\n\\t\\tremaining -= times\\n\\t\\tif (remaining < 1) {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t}\\n}\\n\\n\\n/** \\n * @param {NS} ns\\n * @param {string} host\\n * @param {string} script\\n * @param {number} threads\\n */\\nfunction runScript(ns, script, host, target, threads) {\\n\\tinstall(ns, host, script)\\n\\tns.exec(script, host, threads, target, threads)\\n}\",\"filename\":\"oneCycle.js\",\"server\":\"home\"}}],[\"install.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length === 0) {\\n\\t\\tns.tprintf(\\\"install a script onto all rooted computers\\\\nUsage: install.js <script>\\\")\\n\\t\\treturn\\n\\t}\\n\\tlet script = ns.args[0]\\n\\tlet hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tfor (let host of hosts) {\\n\\t\\tif (!ns.hasRootAccess(host)) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tinstall(ns, host, script)\\n\\t}\\n}\\n\\n/** \\n * @param {NS} ns\\n * @param {string} host\\n * @param {string} script\\n */\\nfunction install(ns, host, script) {\\n\\tif (!ns.fileExists(script, host)) {\\n\\t\\tns.scp(script, host)\\n\\t}\\n}\\n\",\"filename\":\"install.js\",\"server\":\"home\"}}],[\"stats/threadDistr.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length < 2) {\\n\\t\\tns.tprintf(\\\"Usage: threadDistr.js <target> <targetThreads> [growMultiplier] [weakenMultiplier]\\\")\\n\\t\\treturn\\n\\t}\\n\\tconst target = ns.args[0]\\n\\t// const startingCashDecimal = ns.args[1]\\n\\tconst targetThreads = Number(ns.args[1])\\n\\tlet growMultiplier = ns.args[2]\\n\\tlet weakenMultiplier = ns.args[3]\\n\\n\\tif (growMultiplier === undefined) {\\n\\t\\tgrowMultiplier = 1\\n\\t}\\n\\tif (weakenMultiplier === undefined) {\\n\\t\\tweakenMultiplier = 1\\n\\t}\\n\\n\\t// const grows = getGrowThreads(ns, target, startingCashDecimal, growMultiplier)\\n\\t// const [hacks, successHacks] = getHackThreads(ns, target, startingCashDecimal)\\n\\t// const weakens = getWeakenThreads(successHacks, grows, weakenMultiplier)\\n\\n\\tawait binSearch(ns, targetThreads, target, growMultiplier, weakenMultiplier)\\n\\t// const [threadsReq, hacks, grows, weakens] = getThreadsForStartingDecimal(ns, startingCashDecimal, target, growMultiplier, weakenMultiplier)\\n}\\n\\n/** \\n * @param {NS} ns \\n * @param {number} targetThreads \\n * @return {number} startingCashDecimal\\n */\\nasync function binSearch(ns, targetThreads, target, growMultiplier, weakenMultiplier) {\\n\\tconst accuracy = 100000\\n\\tlet l = 0\\n\\tlet r = accuracy\\n\\n\\n\\twhile (l <= r) {\\n\\t\\tconst m = (l + r) / 2;\\n\\t\\t// ns.tprintf(\\\"l: %s, r: %s, m: %s\\\", l, r, m)\\n\\t\\tconst startingCashDecimal = m/accuracy\\n\\t\\tconst [threadsReq, hacks, grows, weakens] = getThreadsForStartingDecimal(ns, startingCashDecimal, target, growMultiplier, weakenMultiplier)\\n\\t\\tns.tprintf(\\\"startingCashDecimal: %s => %s threads\\\", startingCashDecimal, threadsReq)\\n\\t\\tif (threadsReq === targetThreads) {\\n\\t\\t\\tprintStats(ns, target, startingCashDecimal, grows, hacks, weakens)\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (threadsReq > targetThreads) {\\n\\t\\t\\tl = m + 1\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tr = m - 1\\n\\t\\t}\\n\\t\\tawait ns.sleep(10)\\n\\t}\\n\\n\\t// too many threads required?\\n\\t// .95\\n\\t//\\n\\n\\t\\n}\\n\\n/** \\n * @param {NS} ns \\n * @param {number} startingCashDecimal \\n * @param {number} growMultiplier \\n * @param {number} weakenMultiplier \\n * @return {number[]} total, hacks, grows, weakens\\n */\\nfunction getThreadsForStartingDecimal(ns, startingCashDecimal, target, growMultiplier, weakenMultiplier) {\\n\\n\\tconst grows = getGrowThreads(ns, target, startingCashDecimal, growMultiplier)\\n\\tconst [hacks, successHacks] = getHackThreads(ns, target, startingCashDecimal)\\n\\tconst weakens = getWeakenThreads(successHacks, grows, weakenMultiplier)\\n\\n\\tconst total = grows + hacks + weakens\\n\\n\\treturn [total, hacks, grows, weakens]\\n}\\n\\n/** \\n * @param {NS} ns \\n * @param {string} target \\n * @param {number} startingCashDecimal \\n * @param {number} grows \\n * @param {number} hacks \\n * @param {number} weakens \\n */\\nfunction printStats(ns, target, startingCashDecimal, grows, hacks, weakens) {\\n\\n\\tconst total = grows + hacks + weakens\\n\\tconst cashPerCycle = ns.getServerMaxMoney(target) * (1-startingCashDecimal)\\n\\tconst cycleSecs = ns.getWeakenTime(target) / 1000\\n\\n\\tconst cashPerSec = cashPerCycle / cycleSecs\\n\\tconst cashPerThreadSec = cashPerSec / total\\n\\n\\n\\tns.tprintf(\\n\\t\\t\\\"t: %s, h|g|w: %s|%s|%s, $/s: $%s, $/ts: $%s\\\",\\n\\t\\tns.formatNumber(total),\\n\\t\\tns.formatNumber(hacks),\\n\\t\\tns.formatNumber(grows),\\n\\t\\tns.formatNumber(weakens),\\n\\t\\tns.formatNumber(cashPerSec),\\n\\t\\tns.formatNumber(cashPerThreadSec)\\n\\t)\\n}\\n\\n/** \\n * @param {number} successHacks \\n * @param {number} grows \\n * @param {number} weakenMultiplier \\n * @return {number}\\n */\\nfunction getWeakenThreads(successHacks, grows, weakenMultiplier) {\\n\\tlet baseWeakens = (successHacks * .002 + grows * .004) / .05\\n\\treturn Math.ceil(baseWeakens * weakenMultiplier)\\n}\\n\\n/** \\n * @param {NS} ns \\n * @param {string} target \\n * @param {number} startingCashDecimal \\n * @param {number} growMultiplier \\n * @return {number}\\n */\\nfunction getGrowThreads(ns, target, startingCashDecimal, growMultiplier) {\\n\\tlet baseGrows = ns.growthAnalyze(target, (1/startingCashDecimal))\\n\\treturn Math.ceil(baseGrows * growMultiplier)\\n}\\n\\n/** \\n * @param {NS} ns \\n * @param {string} target \\n * @param {number} startingCashDecimal \\n * @return {number[]}\\n */\\nfunction getHackThreads(ns, target, startingCashDecimal) {\\n\\tconst chance = ns.hackAnalyzeChance(target)\\n\\tconst percentPerHack = ns.hackAnalyze(target)\\n\\tconst percentToSteal = 1-startingCashDecimal\\n\\tconst hacks = percentToSteal/percentPerHack\\n\\tconst hackThreads = hacks/chance\\n\\treturn [Math.floor(hackThreads), Math.floor(hacks)]\\n}\\n\",\"filename\":\"stats/threadDistr.js\",\"server\":\"home\"}}],[\"killall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tfor (let host of hosts) {\\n\\t\\tns.killall(host, true)\\n\\t}\\n}\",\"filename\":\"killall.js\",\"server\":\"home\"}}],[\"stats/ng.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst baseCost = Number(ns.args[0])\\n\\tconst mult = Number(ns.args[1])\\n\\tconst times = Number(ns.args[2])\\n\\tconst inc = Number(ns.args[3])\\n\\t// inc is how much price goes up regardless of mult\\n\\t// ex: 1.2 is 20% increase in price before mult\\n\\n\\tif (ns.args.length !== 4) {\\n\\t\\tns.tprintf(\\\"Usage: ng.js <baseCost> <mult> <times> <inc>\\\")\\n\\t\\treturn\\n\\t}\\n\\n\\tlet sum = 0\\n\\tfor (let i = 0; i < times; i++) {\\n\\t\\tsum += (baseCost*Math.pow(inc, i))*Math.pow(mult, i)\\n\\t}\\n\\tns.tprintf(\\\"$%s\\\", ns.formatNumber(sum))\\n}\",\"filename\":\"stats/ng.js\",\"server\":\"home\"}}],[\"stats/growThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length !== 1) {\\n\\t\\tns.tprintf(\\\"Usage: growThreads.js <threadsAvailable>\\\")\\n\\t\\treturn\\n\\t}\\n\\tconst total = Number(ns.args[0])\\n\\n\\t// y = (x*.004)/.05\\n\\t// x + y = total\\n\\n\\t// x = total - y\\n\\n\\t// y = (total-y)*(.004 / .05)\\n\\n\\t// growThreads = y+(.004/.05)*y = (.004/.05)*total\\n\\n\\t// y(1 + (.004/.05)) = (.004/.05) * total\\n\\n\\tlet weakenThreads = ((.004/.05) * total) / (1 + (.004/.05))\\n\\tlet growThreads = total - weakenThreads\\n\\n\\tweakenThreads = Math.ceil(weakenThreads)\\n\\tgrowThreads = Math.floor(growThreads)\\n\\n\\tns.tprintf(\\\"T: %s, G|W: %s|%s\\\", total, growThreads, weakenThreads)\\n}\",\"filename\":\"stats/growThreads.js\",\"server\":\"home\"}}],[\"oneCycleAuto.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllUniqueHosts } from \\\"basic/backdoor.js\\\"\\nconst hackScript = \\\"/basic/hackOnce.js\\\"\\nconst growScript = \\\"/basic/growOnce.js\\\"\\nconst weakenScript = \\\"/basic/weakenOnce.js\\\"\\n\\nconst hackScriptCost = 1.7\\nconst growScriptCost = 1.75\\nconst weakenScriptCost = 1.75\\n\\nconst hackSuccessEffect = 0.002\\nconst growEffect = 0.004\\nconst weakenEffect = 0.05\\n\\nconst addedDelay = 500\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length !== 4) {\\n\\t\\tns.tprintf(\\\"Usage: oneCycleAuto.js <target> <hackThreads> <growThreads> <weakenThreads>\\\")\\n\\t\\treturn\\n\\t}\\n\\tconst target = ns.args[0]\\n\\tconst hackThreads = ns.args[1]\\n\\tconst growThreads = ns.args[2]\\n\\tconst weakenThreads = ns.args[3]\\n\\tconst totalThreads = hackThreads + growThreads + weakenThreads\\n\\n\\tconst hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\t// assign the cycle to computers\\n\\tawait weakenHost(ns, hosts, target, totalThreads)\\n\\tawait growHost(ns, hosts, target, totalThreads)\\n\\n\\twhile (true) {\\n\\t\\tconst queue = getQueue(hackThreads, growThreads, weakenThreads)\\n\\t\\tcycle(ns, target, hosts, queue)\\n\\t\\tconst delay = ns.getWeakenTime(target)\\n\\t\\tawait ns.sleep(delay + addedDelay)\\n\\t}\\n}\\n\\n/** \\n * @param {NS} ns\\n * @param {string} host\\n * @param {string} script\\n * @param {number} maxThreads\\n */\\nasync function weakenHost(ns, hosts, target, maxThreads) {\\n\\tconst secDiff = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)\\n\\tif (secDiff <= 0) {\\n\\t\\treturn\\n\\t}\\n\\tlet remaining = Math.ceil(secDiff / weakenEffect)\\n\\n\\twhile (remaining > 0) {\\n\\t\\tconst threads = Math.min(remaining, maxThreads)\\n\\t\\tassign(ns, hosts, target, weakenScript, threads, weakenScriptCost)\\n\\t\\tconst delay = ns.getWeakenTime(target) + addedDelay\\n\\t\\tawait ns.sleep(delay)\\n\\t\\tremaining -= threads\\n\\t}\\n}\\n\\n/** \\n * @param {NS} ns\\n * @param {string} target\\n */\\nfunction getGrowsRemaining(ns, target) {\\n\\tconst growFactor = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target)\\n\\tconst growThreads = ns.growthAnalyze(target, growFactor)\\n\\n\\tconst growsRemaining = Math.ceil(growThreads)\\n\\n\\treturn growsRemaining\\n}\\n\\n/** \\n * @param {NS} ns\\n * @param {string} host\\n * @param {string} target\\n * @param {number} maxThreads\\n */\\nasync function growHost(ns, hosts, target, maxThreads) {\\n\\n\\tlet growsRemaining = getGrowsRemaining(ns, target)\\n\\n\\tconst weakenThreads = Math.ceil(((growEffect / weakenEffect) * maxThreads) / (1 + (growEffect / weakenEffect)))\\n\\tconst growThreads = maxThreads - weakenThreads\\n\\n\\twhile (growsRemaining > 0) {\\n\\n\\t\\tassign(ns, hosts, target, weakenScript, weakenThreads, weakenScriptCost)\\n\\t\\tassign(ns, hosts, target, growScript, growThreads, growScriptCost)\\n\\t\\tconst delay = ns.getWeakenTime(target) + addedDelay\\n\\t\\tawait ns.sleep(delay)\\n\\t\\tgrowsRemaining -= growThreads\\n\\t}\\n}\\n\\n/** \\n * @param {NS} ns\\n * @param {string} host\\n * @param {string} script\\n */\\nfunction install(ns, host, script) {\\n\\tlet scriptExists = true\\n\\tscriptExists = ns.fileExists(script, host)\\n\\tif (!scriptExists) {\\n\\t\\tns.scp(script, host)\\n\\t}\\n}\\n\\n/** \\n * @param {number} hackThreads\\n * @param {number} growThreads\\n * @param {number} weakenThreads\\n */\\nfunction getQueue(hackThreads, growThreads, weakenThreads) {\\n\\treturn [\\n\\t\\t[hackScript, hackThreads, hackScriptCost],\\n\\t\\t[growScript, growThreads, growScriptCost],\\n\\t\\t[weakenScript, weakenThreads, weakenScriptCost],\\n\\t]\\n}\\n\\n/** \\n * @param {NS} ns\\n * @param {string} target\\n * @param {string[]} hosts\\n * @param {number[][]} queue\\n */\\nfunction cycle(ns, target, hosts, queue) {\\n\\twhile (queue.length > 0) {\\n\\t\\tlet [script, threads, cost] = queue.pop()\\n\\t\\tassign(ns, hosts, target, script, threads, cost)\\n\\t}\\n}\\n\\n\\n\\n/** \\n * @param {NS} ns\\n * @param {string[]} hosts\\n * @param {string} script\\n * @param {number} threads\\n * @param {number} cost\\n */\\nfunction assign(ns, hosts, target, script, threads, cost) {\\n\\tlet remaining = threads\\n\\n\\tfor (let i = hosts.length - 1; i > -1; i--) {\\n\\t\\tconst host = hosts[i]\\n\\t\\tif (!ns.hasRootAccess(host)) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tconst freeRam = ns.getServerMaxRam(host) - ns.getServerUsedRam(host)\\n\\t\\tconst timesAble = Math.floor(freeRam / cost)\\n\\t\\tconst times = Math.min(timesAble, remaining)\\n\\t\\tif (times < 1) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tns.tprintf(\\\"runScript %s %s %s %s\\\", script, host, target, times)\\n\\t\\trunScript(ns, script, host, target, times)\\n\\t\\tremaining -= times\\n\\t\\tif (remaining < 1) {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t}\\n}\\n\\n\\n/** \\n * @param {NS} ns\\n * @param {string} host\\n * @param {string} script\\n * @param {number} threads\\n */\\nfunction runScript(ns, script, host, target, threads) {\\n\\tinstall(ns, host, script)\\n\\tns.exec(script, host, threads, target, threads)\\n}\",\"filename\":\"oneCycleAuto.js\",\"server\":\"home\"}}],[\"stats/info.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tconst servers = []\\n\\tfor (const host of hosts) {\\n\\t\\tconst server = ns.getServer(host)\\n\\t\\tif (!server.hasAdminRights) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tserver.percentPerGrow = growStats(ns, server)\\n\\t\\tserver.cashPerGrow = (server.percentPerGrow * server.moneyMax) - server.moneyMax\\n\\t\\tserver.potentialCashPerGrow = server.moneyMax*(server.serverGrowth/100000)\\n\\t\\tserver.cashPerGrowPerSecond = server.cashPerGrow / ns.getGrowTime(host)\\n\\t\\tserver.potentialCashPerGrowPerSecond = server.potentialCashPerGrow / ns.getGrowTime(host)\\n\\t\\tservers.push(server)\\n\\t}\\n\\n\\tservers.sort((a, b) => a.potentialCashPerGrowPerSecond - b.potentialCashPerGrowPerSecond)\\n\\n\\tfor (const server of servers) {\\n\\t\\tprintMoney(ns, server)\\n\\t}\\n}\\n\\n/** \\n * @param {NS} ns \\n * @param {Server} server \\n */\\nfunction growStats(ns, server) {\\n\\tconst grows = ns.growthAnalyze(server.hostname, 2)\\n\\tconst percentPerGrow = Math.pow(2, 1/grows)\\n\\treturn percentPerGrow\\n}\\n\\n/** \\n * @param {NS} ns \\n * @param {Server} server \\n */\\nfunction printMoney(ns, server) {\\n\\tns.tprintf(\\\"%s\\\", server.hostname)\\n\\tns.tprintf(\\\"  maxMoney: $%s\\\", ns.formatNumber(server.moneyMax))\\n\\tns.tprintf(\\\"  serverGrowth: %s\\\", server.serverGrowth)\\n\\tns.tprintf(\\\"  percentPerGrow: %s\\\", ns.formatPercent((server.percentPerGrow-1)*100))\\n\\tns.tprintf(\\\"  cashPerGrow: $%s\\\", ns.formatNumber(server.cashPerGrow))\\n\\tns.tprintf(\\\"  potentialCashPerGrow: $%s\\\", ns.formatNumber(server.potentialCashPerGrow))\\n\\tns.tprintf(\\\"  cashPerGrowPerSecond: $%s\\\", ns.formatNumber(server.cashPerGrowPerSecond))\\n\\tns.tprintf(\\\"  potentialCashPerGrowPerSecond: $%s\\\", ns.formatNumber(server.potentialCashPerGrowPerSecond))\\n\\n}\\n\\n/** \\n * @param {NS} ns \\n * @param {Server} server \\n */\\nfunction printServer(ns, server) {\\n\\tns.tprintf(\\\"%s\\\", host)\\n\\tfor (let key in server) {\\n\\t\\tns.tprintf(\\\"  %s: %s\\\", key, server[key])\\n\\t}\\n\\tns.tprintf(\\\"\\\\n\\\")\\n}\",\"filename\":\"stats/info.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"bitNodeUpgradeOrder.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"bitNodeUpgradeOrder.txt\",\"text\":\"**upgrade order\\n\\n- level to 85 (buy new one when cheaper +$/sec)\\n- upgrade ram twice (to 8 GB)\\n- level up to 91\\n- upgrade ram again (16 GB)\\n- level up to 93\\n- upgrade ram twice (to 64 GB)\\n- level up to 105\\n- upgrade cores\\n- level up to 118\\n\\n\"}}],[\"augmentUpgradeMultiplier.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"augmentUpgradeMultiplier.txt\",\"text\":\"augments | multiplier\\n0 | 1\\n1 | 1.9\\n2 | 3.6\"}}],[\"successfulAssign.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"successfulAssign.txt\",\"text\":\"how many of hack grow weaken threads?\\n\\nbump up weaken threads by 20%\\n\\nsteal threads equally from hack and grow\\n\\nthen calc growThreads/total and weakenThreads/total\"}}],[\"netburnersInvite.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"netburnersInvite.txt\",\"text\":\"invite at 425 $/s total for bitnodes\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",649,141,25],\"dataMap\":{},\"filename\":\"oneCycleAuto.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1641790.8368056365,\"onlineMoneyMade\":270529800.4592838,\"onlineRunningTime\":26316.410000060656,\"ramUsage\":5.45,\"server\":\"home\",\"scriptKey\":\"oneCycleAuto.js*[\\\"the-hub\\\",649,141,25]\",\"title\":\"oneCycleAuto.js the-hub 649 141 25\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",345],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",345]\",\"title\":\"basic/hackOnce.js the-hub 345\",\"threads\":345,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"58.1.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":9525266562.4,\"moneyMax\":47626332812,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1386,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"38.7.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":10588680352.400002,\"moneyMax\":52943401762,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1162,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"69.9.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":5757179384.200001,\"moneyMax\":28785896921,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":990,\"serverGrowth\":63,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"18.3.9.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":4714653821.6,\"moneyMax\":23573269108,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":961,\"serverGrowth\":57,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"77.3.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":6333005525.8,\"moneyMax\":31665027629,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1142,\"serverGrowth\":92,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"85.2.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":4746549491.6,\"moneyMax\":23732747458,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1001,\"serverGrowth\":60,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-407871-NiteSec.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"3pdl4K4K4K4K4KAFVwfqwfqKKKKKKKKKKp7niiKKpp7niijmF3FatF3FatFta5za5zFza5zF55555xI55xI\",\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"11.8.5.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":3776141445.8,\"moneyMax\":18880707229,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":983,\"serverGrowth\":98,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"0.3.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":3596450821.6000004,\"moneyMax\":17982254108,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1005,\"serverGrowth\":80,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"91.8.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":5246663365,\"moneyMax\":26233316825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1149,\"serverGrowth\":97,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"77.3.8.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":343305222.40000004,\"moneyMax\":1716526112,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1031,\"serverGrowth\":92,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"66.8.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1543,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"6.8.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":203229309.4,\"moneyMax\":1016146547,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1015,\"serverGrowth\":68,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"61.6.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":169374038.8,\"moneyMax\":846870194,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1002,\"serverGrowth\":62,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"98.9.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":138147804.8,\"moneyMax\":690739024,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":936,\"serverGrowth\":50,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"34.4.3.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":116741728,\"moneyMax\":583708640,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":819,\"serverGrowth\":71,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"11.2.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":153437772.8,\"moneyMax\":767188864,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":791,\"serverGrowth\":69,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-969503.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"259127469999\",47],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"77.9.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":180503329.20000002,\"moneyMax\":902516646,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":897,\"serverGrowth\":92,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"52.7.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":232967527,\"moneyMax\":1164837635,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":800,\"serverGrowth\":80,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-481447.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[17,40,43,35,1,38,14,34]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"27.8.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":158645947.20000002,\"moneyMax\":793229736,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":823,\"serverGrowth\":62,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"44.8.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":106807878.2,\"moneyMax\":534039391,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":840,\"serverGrowth\":86,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"7.4.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":168554112,\"moneyMax\":842770560,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":950,\"serverGrowth\":71,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"43.8.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":162426587.8,\"moneyMax\":812132939,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":848,\"serverGrowth\":74,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"46.7.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":237633603.8,\"moneyMax\":1188168019,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":903,\"serverGrowth\":62,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"49.9.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":193202541,\"moneyMax\":966012705,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":906,\"serverGrowth\":67,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"7.3.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":211814936.60000002,\"moneyMax\":1059074683,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":65,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"25.9.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":186790577.8,\"moneyMax\":933952889,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":802,\"serverGrowth\":74,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"38.0.7.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":155961759.8,\"moneyMax\":779808799,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":770,\"serverGrowth\":76,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"7.5.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":272549319.2,\"moneyMax\":1362746596,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":55,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"73.9.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":340422231,\"moneyMax\":1702111155,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":88,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-822212.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[36,36,64,16,9,87,3,129,135,58,25,117,32,62,188,200,140,135,105],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"75.5.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":231907353.4,\"moneyMax\":1159536767,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":830,\"serverGrowth\":83,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"33.2.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":278009092,\"moneyMax\":1390045460,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":838,\"serverGrowth\":70,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-737341.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[115,14,150,86,157,159,200,64,157,163,194,99,119,48,189,196,119,170,31,95,118,158,121,33,168,171,23,121,77,59,193,2,151,92,150,157,48,10,162,77,135,9,16,192,18,18,127,195,114],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"18.2.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":218379295,\"moneyMax\":1091896475,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":74,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"90.2.4.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":154339541.4,\"moneyMax\":771697707,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":725,\"serverGrowth\":58,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"78.5.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":120430833.60000001,\"moneyMax\":602154168,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":499,\"serverGrowth\":54,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"83.9.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":141206209.20000002,\"moneyMax\":706031046,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":565,\"serverGrowth\":51,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"92.3.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":79583794.4,\"moneyMax\":397918972,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":428,\"serverGrowth\":38,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"37.3.1.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"rothman-uni\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"computek\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":39980438.4,\"moneyMax\":199902192,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":383,\"serverGrowth\":36,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",2],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"scriptKey\":\"basic/growOnce.js*[\\\"the-hub\\\",2]\",\"title\":\"basic/growOnce.js the-hub 2\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",35],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",35]\",\"title\":\"basic/hackOnce.js the-hub 35\",\"threads\":35,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"46.1.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":178706338,\"moneyMax\":893531690,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":738,\"serverGrowth\":81,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"95.5.6.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":42920537,\"moneyMax\":214602685,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":459,\"serverGrowth\":44,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"13.6.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":99203969.60000001,\"moneyMax\":496019848,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":607,\"serverGrowth\":67,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"36.6.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":92927058.2,\"moneyMax\":464635291,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":408,\"serverGrowth\":37,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.75,\"server\":\"catalyst\",\"scriptKey\":\"basic/growOnce.js*[\\\"the-hub\\\",18]\",\"title\":\"basic/growOnce.js the-hub 18\",\"threads\":18,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"99.1.8.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"the-hub\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"the-hub\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":23.809999999999903,\"minDifficulty\":14,\"moneyAvailable\":9898822.604955096,\"moneyMax\":176115712,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":313,\"serverGrowth\":47,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"the-hub\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",9]\",\"title\":\"basic/hackOnce.js the-hub 9\",\"threads\":9,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"28.9.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":47533731.6,\"moneyMax\":237668658,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":399,\"serverGrowth\":58,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"51.4.6.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":408,\"serverGrowth\":59,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",37],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"netlink\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",37]\",\"title\":\"basic/hackOnce.js the-hub 37\",\"threads\":37,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"2.7.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"johnson-ortho\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"johnson-ortho\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"johnson-ortho\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":15702474.600000001,\"moneyMax\":78512373,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":258,\"serverGrowth\":58,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"47.2.3.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"n00dles\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"n00dles\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"n00dles\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"n00dles\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"n00dles\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":2.026,\"minDifficulty\":1,\"moneyAvailable\":41008.04039161837,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",2],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"n00dles\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",2]\",\"title\":\"basic/hackOnce.js the-hub 2\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"38.4.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"foodnstuff\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"foodnstuff\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"foodnstuff\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"foodnstuff\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"foodnstuff\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":400000,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",9]\",\"title\":\"basic/hackOnce.js the-hub 9\",\"threads\":9,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"5.0.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"sigma-cosmetics\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"sigma-cosmetics\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"sigma-cosmetics\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":460000,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",9]\",\"title\":\"basic/hackOnce.js the-hub 9\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"21.7.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"joesguns\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"joesguns\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"joesguns\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"joesguns\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"joesguns\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":500000,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"joesguns\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",9]\",\"title\":\"basic/hackOnce.js the-hub 9\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"28.1.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"zer0\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"zer0\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"zer0\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"zer0\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"zer0\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1500000,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"zer0\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",18]\",\"title\":\"basic/hackOnce.js the-hub 18\",\"threads\":18,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"0.8.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"nectar-net\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"nectar-net\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"nectar-net\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"nectar-net\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"nectar-net\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":550000,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"nectar-net\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",9]\",\"title\":\"basic/hackOnce.js the-hub 9\",\"threads\":9,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"90.7.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"neo-net\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"neo-net\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"neo-net\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"neo-net\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"neo-net\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":1000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"neo-net\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",18]\",\"title\":\"basic/hackOnce.js the-hub 18\",\"threads\":18,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"91.3.4.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"silver-helix\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"silver-helix\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"silver-helix\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"silver-helix\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"silver-helix\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"computek\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":9000000,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",37],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",37]\",\"title\":\"basic/hackOnce.js the-hub 37\",\"threads\":37,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"44.3.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"hong-fang-tea\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"hong-fang-tea\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"hong-fang-tea\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"hong-fang-tea\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"hong-fang-tea\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":600000,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",9]\",\"title\":\"basic/hackOnce.js the-hub 9\",\"threads\":9,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-166836.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[195,104,190,61,59,27,56],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"6.3.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"harakiri-sushi\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"harakiri-sushi\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"harakiri-sushi\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"harakiri-sushi\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"harakiri-sushi\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":800000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",9],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",9]\",\"title\":\"basic/hackOnce.js the-hub 9\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"49.4.8.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"phantasy\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"phantasy\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"phantasy\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"phantasy\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"phantasy\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":8001096.965119867,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"phantasy\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",18]\",\"title\":\"basic/hackOnce.js the-hub 18\",\"threads\":18,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"82.3.5.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"max-hardware\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"max-hardware\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"max-hardware\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"max-hardware\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"max-hardware\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2000000,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"max-hardware\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",18]\",\"title\":\"basic/hackOnce.js the-hub 18\",\"threads\":18,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"82.7.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"omega-net\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"omega-net\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"omega-net\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"omega-net\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"omega-net\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":34,\"hackDifficulty\":34,\"minDifficulty\":11,\"moneyAvailable\":13766047.4,\"moneyMax\":68830237,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":219,\"serverGrowth\":36,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"omega-net\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",18]\",\"title\":\"basic/hackOnce.js the-hub 18\",\"threads\":18,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"55.6.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"crush-fitness\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"crush-fitness\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"crush-fitness\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":9739237.4,\"moneyMax\":48696187,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":244,\"serverGrowth\":31,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"48.7.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"iron-gym\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"iron-gym\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"iron-gym\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"iron-gym\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"iron-gym\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":4000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"iron-gym\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",18]\",\"title\":\"basic/hackOnce.js the-hub 18\",\"threads\":18,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"23.9.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":520,\"serverGrowth\":41,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"25.1.2.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1023,\"serverGrowth\":51,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"96.6.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":788,\"serverGrowth\":57,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"68.1.4.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":527,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"63.7.7.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"I.I.I.I\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":340,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",25],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"the-hub\\\",25]\",\"title\":\"basic/weakenOnce.js the-hub 25\",\"threads\":25,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",121],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"basic/growOnce.js*[\\\"the-hub\\\",121]\",\"title\":\"basic/growOnce.js the-hub 121\",\"threads\":121,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"3.4.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"avmnite-02h\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"avmnite-02h\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"avmnite-02h\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"avmnite-02h\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":220,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",18],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",18]\",\"title\":\"basic/hackOnce.js the-hub 18\",\"threads\":18,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-49174.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"72960\",-38],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"62.9.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"blade\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":506,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"36.1.1.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"CSEC\"}}],[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"CSEC\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"CSEC\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"CSEC\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"CSEC\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":60,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\",4],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.80999999999996,\"ramUsage\":1.7,\"server\":\"CSEC\",\"scriptKey\":\"basic/hackOnce.js*[\\\"the-hub\\\",4]\",\"title\":\"basic/hackOnce.js the-hub 4\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"63.4.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"48.4.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"24.3.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":14.6132,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0624,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":39.0341,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.069,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.1187,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.1389,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0497,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":3.0122,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":3.9839,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":1.0655,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":231.6752,\"isBanned\":false,\"isMember\":true,\"playerReputation\":239299.18540251462}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0.9776,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":107.7291,\"isBanned\":false,\"isMember\":true,\"playerReputation\":1800.3995247238151}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":145.4897,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0.9035,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":134.6539,\"isBanned\":false,\"isMember\":true,\"playerReputation\":25963.91535506853}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{\"dir\":\"ls\",\"nvim\":\"vim\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":450,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"33","AllGangsSave":"","LastExportBonus":"1691073772625","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}