{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":1385,\"strength\":1,\"defense\":1,\"dexterity\":2,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":16567203408.854528,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":2.0527288488830697,\"hacking_speed\":2.0424769137038554,\"hacking_money\":3.430027070651982,\"hacking_grow\":2.054154432058918,\"hacking\":3.132994849801175,\"strength\":1.8898220774942043,\"defense\":1.6433235456471345,\"dexterity\":1.9843131813689148,\"agility\":1.7254897229294914,\"charisma\":1.807655900211848,\"hacking_exp\":4.136235344228518,\"strength_exp\":2.0788042852436246,\"defense_exp\":2.0788042852436246,\"dexterity_exp\":2.0788042852436246,\"agility_exp\":2.0788042852436246,\"charisma_exp\":2.0788042852436246,\"company_rep\":2.744021656521585,\"faction_rep\":2.078804285243625,\"crime_money\":1.6433235456471345,\"crime_success\":1.6433235456471345,\"hacknet_node_money\":4.144616043704478,\"hacknet_node_purchase_cost\":0.4655200140144923,\"hacknet_node_ram_cost\":0.6085228941365913,\"hacknet_node_core_cost\":0.6085228941365913,\"hacknet_node_level_cost\":0.5172444600161026,\"work_money\":1.807655900211848,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":35,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":3,\"corporation\":{\"ctor\":\"Corporation\",\"data\":{\"name\":\"LifeSpawn\",\"divisions\":{\"ctor\":\"JSONMap\",\"data\":[[\"VapeCentral\",{\"ctor\":\"Division\",\"data\":{\"name\":\"VapeCentral\",\"type\":\"Tobacco\",\"researchPoints\":1170.5926036537496,\"researched\":{\"ctor\":\"JSONSet\",\"data\":[]},\"requiredMaterials\":{\"Plants\":1},\"producedMaterials\":[],\"products\":{\"ctor\":\"JSONMap\",\"data\":[[\"CloudLazer99\",{\"ctor\":\"Product\",\"data\":{\"name\":\"CloudLazer99\",\"demand\":6.955199999992575,\"competition\":38.04479999999037,\"markup\":12.723287802872013,\"productionCost\":16351.633466583198,\"finished\":true,\"developmentProgress\":100,\"creationCity\":\"Sector-12\",\"designInvestment\":10000,\"advertisingInvestment\":10000,\"creationJobFactors\":{\"Operations\":1359.597990615808,\"Engineer\":1525.858225673471,\"Business\":4.542949208412826,\"Management\":708.9849931318116,\"Research & Development\":0,\"total\":3598.9841586295024,\"Intern\":null,\"Unassigned\":null},\"rating\":235.83850713026268,\"stats\":{\"quality\":276.78666260986233,\"performance\":347.51804735517794,\"durability\":203.9793943355714,\"reliability\":199.99394781706687,\"aesthetics\":108.44951934900949,\"features\":290.1647261337628},\"cityData\":{\"Aevum\":{\"stored\":0,\"productionAmount\":0,\"actualSellAmount\":0,\"effectiveRating\":0,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0},\"Chongqing\":{\"stored\":0,\"productionAmount\":0,\"actualSellAmount\":0,\"effectiveRating\":0,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0},\"Sector-12\":{\"stored\":0,\"productionAmount\":0.18711070274475353,\"actualSellAmount\":0.18711070274475353,\"effectiveRating\":161.38921880782695,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\"},\"New Tokyo\":{\"stored\":0,\"productionAmount\":0,\"actualSellAmount\":0,\"effectiveRating\":0,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0},\"Ishima\":{\"stored\":0,\"productionAmount\":0,\"actualSellAmount\":0,\"effectiveRating\":0,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0},\"Volhaven\":{\"stored\":0,\"productionAmount\":0,\"actualSellAmount\":0,\"effectiveRating\":0,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":0}},\"size\":0.05,\"requiredMaterials\":{\"Plants\":1},\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":{\"Aevum\":0,\"Chongqing\":0,\"Sector-12\":16351.633466583198,\"New Tokyo\":0,\"Ishima\":0,\"Volhaven\":0},\"maxSellAmount\":2.1264476802236705}}]]},\"makesProducts\":true,\"awareness\":6.045074999999999,\"popularity\":0,\"startingCost\":20000000000,\"realEstateFactor\":0.15,\"researchFactor\":0.75,\"hardwareFactor\":0.15,\"robotFactor\":0.2,\"aiCoreFactor\":0.15,\"advertisingFactor\":0.2,\"productionMult\":1.0739809337401114,\"lastCycleRevenue\":3059.5656289570124,\"lastCycleExpenses\":13776.635863639476,\"thisCycleRevenue\":0,\"thisCycleExpenses\":27553.447227278946,\"state\":\"START\",\"newInd\":false,\"warehouses\":{\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":2,\"city\":\"Sector-12\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[65,85],\"competition\":50,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[70,90],\"competition\":60,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":975.0927699165151,\"quality\":9.509256534412183,\"demand\":74.24316427175081,\"demandRange\":[20,90],\"competition\":67.98845883548,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":-0.18711070274475353,\"importAmount\":0.2,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3274.7520659870897,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":1,\"quality\":1,\"demand\":89.63752877496496,\"demandRange\":[80,90],\"competition\":77.33067955985392,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":8047.149608449911,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":55,\"demandRange\":[40,70],\"competition\":60,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":302,\"quality\":1,\"demand\":89.44734010591267,\"demandRange\":[80,99],\"competition\":85.04769135603617,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":98305.39694067015,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":82.40122565782055,\"demandRange\":[80,99],\"competition\":93.62981054685423,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":14397.011650995191,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":10,\"quality\":1,\"demand\":21.68939328982379,\"demandRange\":[5,99],\"competition\":48.19508881796812,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":51673.01396982117,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":200,\"sizeUsed\":199.95819384719815,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":0.18711070274475353}}},\"offices\":{\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Sector-12\",\"size\":21,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":10,\"avgMorale\":10,\"avgIntelligence\":69.86363636363636,\"avgCharisma\":79.13636363636363,\"avgCreativity\":75.5909090909091,\"avgEfficiency\":73.81818181818183,\"totalExperience\":2917.8915000020725,\"numEmployees\":21,\"totalSalary\":27553.447227278946,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":60.37038420781274,\"Operations\":30.039266883126757,\"Engineer\":18.000813798708702,\"Business\":1.7655542532472464,\"Management\":7.280217012988986,\"Research & Development\":3.2845322597410496,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":10,\"Engineer\":5,\"Business\":1,\"Management\":2,\"Research & Development\":1,\"Intern\":2,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":10,\"Engineer\":5,\"Business\":1,\"Management\":2,\"Research & Development\":1,\"Intern\":2,\"Unassigned\":0}}}},\"numAdVerts\":2}}],[\"TumultuousGrowth\",{\"ctor\":\"Division\",\"data\":{\"name\":\"TumultuousGrowth\",\"type\":\"Agriculture\",\"researchPoints\":6198.9744471938875,\"researched\":{\"ctor\":\"JSONSet\",\"data\":[]},\"requiredMaterials\":{\"Water\":0.5,\"Chemicals\":0.2},\"producedMaterials\":[\"Plants\",\"Food\"],\"products\":{\"ctor\":\"JSONMap\",\"data\":[]},\"makesProducts\":false,\"awareness\":0,\"popularity\":0,\"startingCost\":40000000000,\"realEstateFactor\":0.72,\"researchFactor\":0.5,\"hardwareFactor\":0.2,\"robotFactor\":0.3,\"aiCoreFactor\":0.3,\"advertisingFactor\":0.04,\"productionMult\":5.151007955932195,\"lastCycleRevenue\":51585.17667935717,\"lastCycleExpenses\":26803.962228419638,\"thisCycleRevenue\":0,\"thisCycleExpenses\":28686.3394285785,\"state\":\"START\",\"newInd\":false,\"warehouses\":{\"Sector-12\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"city\":\"Sector-12\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":72.71082294602898,\"demandRange\":[65,85],\"competition\":54.987647256277796,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":2.4,\"actualSellAmount\":0,\"productionAmount\":-2.4,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1439.06714227288,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":9.566153087839314,\"demand\":78.21195853191267,\"demandRange\":[70,90],\"competition\":73.77890362832657,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":4.8,\"productionAmount\":4.8,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":4754.2032431717,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":4754.2032431717,\"maxSellPerCycle\":15.089487783023145,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":9.566153087839314,\"demand\":60.63916039289979,\"demandRange\":[20,90],\"competition\":54.42197513381935,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":4.6,\"productionAmount\":4.8,\"importAmount\":0,\"exports\":[{\"division\":\"VapeCentral\",\"city\":\"Sector-12\",\"amount\":\"1\"}],\"exportedLastCycle\":0.2,\"marketPrice\":3428.9778378322844,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":3432.775340846119,\"maxSellPerCycle\":20.608145425764295,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":86.99297995489233,\"demandRange\":[80,90],\"competition\":85.01672237969441,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":10889.705611469035,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":1425.2000000000533,\"quality\":1,\"demand\":51.82751269392277,\"demandRange\":[40,70],\"competition\":46.505438667827114,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0.96,\"actualSellAmount\":0,\"productionAmount\":-0.9600000000000002,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":5353.431636160427,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":89.55969667291745,\"demandRange\":[80,99],\"competition\":80.4608664752594,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":83278.08123392865,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":82.90532603552178,\"demandRange\":[80,99],\"competition\":98.83207190255897,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":13805.879135202309,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":51.68775709300114,\"demandRange\":[5,99],\"competition\":39.37025344837052,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":93103.59369180306,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":100,\"sizeUsed\":71.26000000000266,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":8.643107356652234}},\"Aevum\":{\"ctor\":\"Warehouse\",\"data\":{\"level\":1,\"city\":\"Aevum\",\"materials\":{\"Water\":{\"ctor\":\"Material\",\"data\":{\"stored\":20,\"quality\":1,\"demand\":78.10714851522715,\"demandRange\":[65,85],\"competition\":55.38647837007149,\"competitionRange\":[40,60],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":1,\"actualSellAmount\":0,\"productionAmount\":-0.9999999999999998,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":1440.8747842166597,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Water\"}},\"Ore\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":50,\"demandRange\":[40,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Ore\"}},\"Minerals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":75,\"demandRange\":[90,60],\"competition\":80,\"competitionRange\":[65,95],\"maxVolatility\":0.2,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":500,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Minerals\"}},\"Food\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":8.873140456830294,\"demand\":73.98728151742738,\"demandRange\":[70,90],\"competition\":66.07975091677389,\"competitionRange\":[35,85],\"maxVolatility\":1,\"markup\":3,\"buyAmount\":0,\"actualSellAmount\":1.9999999999999996,\"productionAmount\":1.9999999999999996,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":3674.7933400360976,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":3683.2274073344533,\"maxSellPerCycle\":17.66823752391902,\"name\":\"Food\"}},\"Plants\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":8.873140456830294,\"demand\":36.806358022441344,\"demandRange\":[20,90],\"competition\":62.92890488673893,\"competitionRange\":[30,70],\"maxVolatility\":0.6,\"markup\":3.75,\"buyAmount\":0,\"actualSellAmount\":1.9999999999999996,\"productionAmount\":1.9999999999999996,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2803.889864785981,\"productionLimit\":null,\"desiredSellAmount\":\"MAX\",\"desiredSellPrice\":\"MP\",\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":2803.889864785981,\"maxSellPerCycle\":9.447291879024325,\"name\":\"Plants\"}},\"Metal\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":80,\"demandRange\":[75,85],\"competition\":70,\"competitionRange\":[60,80],\"maxVolatility\":1,\"markup\":6,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":2650,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Metal\"}},\"Hardware\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":81.1989203041507,\"demandRange\":[80,90],\"competition\":75.79312030112858,\"competitionRange\":[65,95],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":9455.861219326669,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Hardware\"}},\"Chemicals\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":47.70383562051393,\"demandRange\":[40,70],\"competition\":60.14206169354709,\"competitionRange\":[40,80],\"maxVolatility\":1.2,\"markup\":2,\"buyAmount\":0.4,\"actualSellAmount\":0,\"productionAmount\":-0.4,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":6145.93205232776,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Chemicals\"}},\"Drugs\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":60,\"demandRange\":[45,75],\"competition\":70,\"competitionRange\":[40,99],\"maxVolatility\":1.6,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":40000,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Drugs\"}},\"Robots\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":92.04040053532324,\"demandRange\":[80,99],\"competition\":80.77947021824811,\"competitionRange\":[80,99],\"maxVolatility\":0.5,\"markup\":1,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":89677.22422726487,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Robots\"}},\"AI Cores\":{\"ctor\":\"Material\",\"data\":{\"stored\":0,\"quality\":1,\"demand\":96.07737596097806,\"demandRange\":[80,99],\"competition\":94.3189921909245,\"competitionRange\":[80,99],\"maxVolatility\":0.8,\"markup\":0.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":13412.03095824892,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"AI Cores\"}},\"Real Estate\":{\"ctor\":\"Material\",\"data\":{\"stored\":7000,\"quality\":1,\"demand\":34.61385892845615,\"demandRange\":[5,99],\"competition\":58.64534499243968,\"competitionRange\":[25,75],\"maxVolatility\":1.5,\"markup\":1.5,\"buyAmount\":0,\"actualSellAmount\":0,\"productionAmount\":0,\"importAmount\":0,\"exports\":[],\"exportedLastCycle\":0,\"marketPrice\":41608.07934537365,\"productionLimit\":null,\"desiredSellAmount\":0,\"desiredSellPrice\":0,\"marketTa1\":false,\"marketTa2\":false,\"uiMarketPrice\":0,\"maxSellPerCycle\":0,\"name\":\"Real Estate\"}}},\"size\":100,\"sizeUsed\":36,\"smartSupplyEnabled\":false,\"smartSupplyOptions\":{\"Water\":\"leftovers\",\"Ore\":\"leftovers\",\"Minerals\":\"leftovers\",\"Food\":\"leftovers\",\"Plants\":\"leftovers\",\"Metal\":\"leftovers\",\"Hardware\":\"leftovers\",\"Chemicals\":\"leftovers\",\"Drugs\":\"leftovers\",\"Robots\":\"leftovers\",\"AI Cores\":\"leftovers\",\"Real Estate\":\"leftovers\"},\"smartSupplyStore\":4.95322519091238}}},\"offices\":{\"Sector-12\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Sector-12\",\"size\":15,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":74.4375,\"avgCharisma\":78.0625,\"avgCreativity\":76.25,\"avgEfficiency\":83.4375,\"totalExperience\":2176.836000001744,\"numEmployees\":15,\"totalSalary\":20578.945500005233,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":4340.945370001604,\"Operations\":1914.9219000006976,\"Engineer\":1150.0945500005232,\"Business\":180.39870000005814,\"Management\":749.8073000002325,\"Research & Development\":345.72292000009304,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":6,\"Engineer\":3,\"Business\":1,\"Management\":2,\"Research & Development\":1,\"Intern\":2,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":6,\"Engineer\":3,\"Business\":1,\"Management\":2,\"Research & Development\":1,\"Intern\":2,\"Unassigned\":0}}},\"Aevum\":{\"ctor\":\"OfficeSpace\",\"data\":{\"city\":\"Aevum\",\"size\":6,\"maxEnergy\":100,\"maxMorale\":100,\"avgEnergy\":100,\"avgMorale\":100,\"avgIntelligence\":74.28571428571429,\"avgCharisma\":80.57142857142857,\"avgCreativity\":63.285714285714285,\"avgEfficiency\":82,\"totalExperience\":901.6075000006125,\"numEmployees\":6,\"totalSalary\":8107.393928573266,\"autoTea\":false,\"autoParty\":false,\"teaPending\":false,\"partyMult\":1,\"employeeProductionByJob\":{\"total\":1516.5056250004595,\"Operations\":949.618035714592,\"Engineer\":0,\"Business\":185.41967261909866,\"Management\":381.4679166667687,\"Research & Development\":0,\"Intern\":0,\"Unassigned\":0},\"employeeJobs\":{\"Operations\":3,\"Engineer\":0,\"Business\":1,\"Management\":1,\"Research & Development\":0,\"Intern\":1,\"Unassigned\":0},\"employeeNextJobs\":{\"Operations\":3,\"Engineer\":0,\"Business\":1,\"Management\":1,\"Research & Development\":0,\"Intern\":1,\"Unassigned\":0}}}},\"numAdVerts\":0}}]]},\"maxDivisions\":20,\"funds\":4709136257.107365,\"revenue\":54644.742308314184,\"expenses\":40580.59809205911,\"fundingRound\":0,\"public\":true,\"totalShares\":1500000000,\"numShares\":999999,\"shareSalesUntilPriceUpdate\":1000000,\"shareSaleCooldown\":0,\"issueNewSharesCooldown\":0,\"dividendRate\":0,\"dividendTax\":0.15,\"issuedShares\":999000001,\"sharePrice\":2.3964836729156493,\"storedCycles\":170953,\"unlocks\":{\"ctor\":\"JSONSet\",\"data\":[\"Warehouse API\",\"Office API\",\"Export\"]},\"upgrades\":{\"Smart Factories\":{\"level\":0,\"value\":1},\"Smart Storage\":{\"level\":0,\"value\":1},\"DreamSense\":{\"level\":0,\"value\":0},\"Wilson Analytics\":{\"level\":0,\"value\":1},\"Nuoptimal Nootropic Injector Implants\":{\"level\":0,\"value\":1},\"Speech Processor Implants\":{\"level\":0,\"value\":1},\"Neural Accelerators\":{\"level\":0,\"value\":1},\"FocusWires\":{\"level\":0,\"value\":1},\"ABC SalesBots\":{\"level\":0,\"value\":1},\"Project Insight\":{\"level\":0,\"value\":1}},\"cycleValuation\":7144381927.59673,\"valuationsList\":[7180032301.538305,7144700924.044662,7148823573.423764,7149772947.4168,7146099168.957802,7142875524.012018,7144750339.167826,7137004461.538574,7172608132.049465,7144381927.59673],\"valuation\":7151104929.974594,\"state\":{\"ctor\":\"CorporationState\",\"data\":{\"state\":1}},\"seedFunded\":true}},\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"BitRunners\",\"The Black Hand\",\"Sector-12\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":30,\"moneyGainRatePerSecond\":46.62693049167538,\"onlineTimeSeconds\":166221.19999934445,\"ram\":1,\"totalMoneyGenerated\":7749973.710856646,\"name\":\"hacknet-node-0\"}}],\"has4SData\":true,\"has4SDataTixApi\":true,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{},\"karma\":-2.7,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":8894631391272.09,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":2741989256.2037544,\"crime\":0,\"gang\":0,\"hacking\":5445813242814.305,\"hacknet\":7749973.710856646,\"hacknet_expenses\":-14711.709454952237,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":3451381123966.789,\"total\":8894630391272.09,\"work\":0,\"servers\":0,\"other\":-5313700000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-2604,\"class\":-867216,\"codingcontract\":1650000000,\"corporation\":2741989256.2037544,\"crime\":560574.4692426312,\"gang\":0,\"hacking\":5477334471239.374,\"hacknet\":1031481464.5464281,\"hacknet_expenses\":-115919113.10135959,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":144602345942660.75,\"total\":10593315412461.744,\"work\":4165214.5825787606,\"servers\":-96699202392603.25,\"other\":-5383300000,\"augmentations\":-42787090716446.47}},\"playtimeSinceLastAug\":166507800,\"playtimeSinceLastBitnode\":1211547800,\"lastAugReset\":1691346231698,\"lastNodeReset\":1690301187014,\"purchasedServers\":[],\"scriptProdSinceLastAug\":6788302121208.659,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,1]]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1681451860356},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1681451920340},{\"ID\":\"WORKOUT\",\"unlockedOn\":1681452640373},{\"ID\":\"FROZE\",\"unlockedOn\":1681459065921},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1681542866422},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1681544306371},{\"ID\":\"TRAVEL\",\"unlockedOn\":1681544366374},{\"ID\":\"TOR\",\"unlockedOn\":1681544846455},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1681544906371},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1681545386372},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1681548386394},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1681549526416},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1681569628237},{\"ID\":\"NITESEC\",\"unlockedOn\":1681570048239},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1681589549067},{\"ID\":\"4S\",\"unlockedOn\":1681671096571},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1681711707590},{\"ID\":\"DONATION\",\"unlockedOn\":1681885002287},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1681885662277},{\"ID\":\"REPUTATION_10M\",\"unlockedOn\":1688512451544},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1688513051582},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1688516171776},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1688520671740},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1688521091770},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1688713565480},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1690230547945},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1690230727894},{\"ID\":\"SF1.1\",\"unlockedOn\":1690301244050},{\"ID\":\"CORPORATION\",\"unlockedOn\":1691254190286}],\"terminalCommandHistory\":[\"vim autoSniper.js\",\"ls\",\"vim auctionSniper.js \",\"auctionSniper.js\",\"auctionSniper.js UNV 6000000000000\",\"ps\",\"top\",\"scan\",\"analyze\",\"ls\",\"scan\",\"connect foodnstuff \",\"scan\",\"connect max-hardware \",\"scan\",\"home\",\"scan\",\"ls\",\"connect foodnstuff \",\"ls\",\"cat sector-12-crime.lit \",\"run NUKE\",\"run NUKE.exe\",\"analyze\",\"home\",\"can\",\"scan\",\"wget amazon.com\",\"wget amazon.com file\",\"wget amazon.com file.txt\",\"cat file.txt\",\"wget https://www.amazon.com files.txt\",\"cat files.txt\",\"vim files.txt\",\"stats/graph.js\",\"ls\",\"rm file.txt\",\"rm files.txt\",\"ls\",\"clr\",\"cs=ls\",\"cls\",\"buy Formulas.exe \",\"ls\",\"auctionSniper.js FSIG 7900000000000\",\"auctionSniper.js SYSC 7900000000000\",\"auctionSniper.js SYSC 7700000000000\",\"ps\",\"cat stockLog.txt \",\"vim stockLog.txt \"],\"lastUpdate\":1691512739532,\"lastSave\":1691512714133,\"totalPlaytime\":10061065000,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":784203,\"factionWorkType\":\"hacking\",\"factionName\":\"BitRunners\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"119d43b975cbba\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":6,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"51.0.7.5\",\"isConnectedTo\":true,\"maxRam\":524288,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\",\"Formulas.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/weaken.js\",\"server\":\"home\"}}],[\"basic/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0]);\\n\\t}\\n}\",\"filename\":\"basic/grow.js\",\"server\":\"home\"}}],[\"basic/lib/server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Represents a Server with hacking capabilities.\\n * @class\\n */\\nclass Server {\\n  static hack_script = \\\"/basic/hack.js\\\"\\n  static grow_script = \\\"/basic/grow.js\\\"\\n  static weaken_script = \\\"/basic/weaken.js\\\"\\n  /**\\n   * @param {NS} ns - netscape instance\\n   * @param {string} hostname - The server's hostname.\\n   */\\n  constructor(ns, hostname, hack_script=Server.hack_script, grow_script=Server.grow_script, weaken_script=Server.weaken_script) {\\n    this.ns = ns\\n    this.hostname = hostname\\n    this.hack_script = hack_script\\n    this.grow_script = grow_script\\n    this.weaken_script = weaken_script\\n  }\\n\\n  /**\\n   * Fills a server with things to do\\n   * @param {string} targetHostname - The target server's hostname.\\n   */\\n  async get_busy(targetHostname, growPercent=0.25, weakenPercent=0.25) {\\n    const maxRam = this.ns.getServerMaxRam(this.hostname);\\n    let usedRam = this.ns.getServerUsedRam(this.hostname);\\n    const scriptsToRun = {};\\n    this.ns.tprintf(\\\"%s\\\", this.hostname)\\n\\n    while (true) {\\n      const script = this.pick_random(growPercent, weakenPercent);\\n      // const scriptRam = this.ns.getScriptRam(script);\\n      const scriptRam = 1.75\\n\\n      if (usedRam + scriptRam <= maxRam) {\\n        scriptsToRun[script] = (scriptsToRun[script] || 0) + 1;\\n        usedRam += scriptRam;\\n        // this.ns.tprintf(\\\"now using %s/%s\\\", usedRam, maxRam)\\n      } else {\\n        break;\\n      }\\n      await this.ns.sleep(1)\\n    }\\n\\n    for (const [script, count] of Object.entries(scriptsToRun)) {\\n      this.ns.tprintf(\\\"Running script: %s %s times\\\", script, count);\\n      this.ns.exec(script, this.hostname, count, targetHostname)\\n    }\\n    this.ns.tprintf(\\\"\\\")\\n  }\\n\\n  /**\\n   * Installs hack, weaken, and grow if it doesn't already exist\\n   */\\n  install_scripts() {\\n    if (!this.ns.fileExists(this.hack_script, this.hostname)) {\\n      this.ns.scp(this.hack_script, this.hostname)\\n    }\\n    if (!this.ns.fileExists(this.weaken_script, this.hostname)) {\\n      this.ns.scp(this.weaken_script, this.hostname)\\n    }\\n    if (!this.ns.fileExists(this.grow_script, this.hostname)) {\\n      this.ns.scp(this.grow_script, this.hostname)\\n    }\\n  }\\n\\n  /**\\n   * Kills all running programs on this server\\n   */\\n  kill_all() {\\n    this.ns.killall(this.hostname)\\n  }\\n\\n  /**\\n   * Randomly hacks, grows, or weakens target server\\n   */\\n  pick_random(growPercent=.25, weakenPercent=.25) {\\n    const rand = Math.random()\\n\\n    if (rand <= growPercent) {\\n      return this.grow_script\\n    }\\n\\n    if (rand <= growPercent + weakenPercent) {\\n      return this.weaken_script\\n    }\\n    \\n    return this.hack_script\\n  }\\n}\\n\\nexport {Server}\",\"filename\":\"basic/lib/server.js\",\"server\":\"home\"}}],[\"basic/lib/server_collection.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * Represents a collection of Server objects.\\n * @class\\n */\\nclass ServerCollection {\\n  constructor() {\\n    this.servers = [];\\n  }\\n\\n  /**\\n   * Adds a server to the collection.\\n   * @param {Server} server - The server to add.\\n   */\\n  add(server) {\\n    this.servers.push(server);\\n  }\\n\\n  /**\\n   * Returns an iterator that yields Server objects.\\n   * @returns {IterableIterator<Server>}\\n   */\\n  [Symbol.iterator]() {\\n    return this.servers.values();\\n  }\\n}\\n\\nexport {ServerCollection}\",\"filename\":\"basic/lib/server_collection.js\",\"server\":\"home\"}}],[\"basic/test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {Server} from \\\"basic/lib/server.js\\\"\\nimport {ServerCollection} from \\\"basic/lib/server_collection.js\\\"\\nimport {getAllUniqueHosts} from \\\"basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst stock_option = ns.args[0]\\n\\tconst target = ns.args[1] == null ? \\\"n00dles\\\" : ns.args[1]\\n\\tconst growPercent = ns.args[2] == null ? 0.25 : Number(ns.args[2])\\n\\tconst weakenPercent = ns.args[3] == null ? 0.25 : Number(ns.args[3])\\n\\n\\n\\tconst sc = new ServerCollection()\\n//\\tsc.add(new Server(ns, \\\"n00dles\\\"))\\n//\\tsc.add(new Server(ns, \\\"foodnstuff\\\"))\\n//\\tsc.add(new Server(ns, \\\"sigma-cosmetics\\\"))\\n//\\tsc.add(new Server(ns, \\\"joesguns\\\"))\\n//\\tsc.add(new Server(ns, \\\"hong-fang-tea\\\"))\\n//\\tsc.add(new Server(ns, \\\"harakiri-sushi\\\"))\\n\\n\\tfor (const server of await getAllUniqueHosts(ns, ns.getHostname())) {\\n\\t\\tif (!ns.hasRootAccess(server)) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tif (stock_option === \\\"up\\\") {\\n\\t\\t\\tsc.add(new Server(ns, server, \\\"/basic/hack.js\\\", \\\"/basic/growStock.js\\\", \\\"/basic/weaken.js\\\"))\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tif (stock_option === \\\"down\\\") {\\n\\t\\t\\tsc.add(new Server(ns, server, \\\"/basic/hackStock.js\\\", \\\"/basic/grow.js\\\", \\\"/basic/weaken.js\\\"))\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tsc.add(new Server(ns, server))\\n\\t}\\n\\n\\tfor (const server of sc) {\\n\\t\\tserver.kill_all()\\n\\t\\tserver.install_scripts()\\n\\t\\t// server.pick_random(\\\"n00dles\\\")\\n\\t\\tawait server.get_busy(\\n\\t\\t\\ttarget,\\n\\t\\t\\tgrowPercent,\\n\\t\\t\\tweakenPercent\\n\\t\\t)\\n\\t}\\n}\",\"filename\":\"basic/test.js\",\"server\":\"home\"}}],[\"basic/check.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst target = ns.args[0]\\n\\tif (target == null) {\\n\\t\\tns.tprint(\\\"Expected Usage: check.js <target>\\\")\\n\\t\\treturn\\n\\t}\\n\\tconst server = ns.getServer(target)\\n\\tserver_print(ns, server)\\n}\\n\\n/** @param {NS} ns */\\n/** @param {Server} server */\\nfunction server_print(ns, server) {\\n\\tns.tprintf(\\\"%s/%s\\\", server.minDifficulty, server.hackDifficulty)\\n\\tns.tprintf(\\\"$%s/$%s\\\", server.moneyAvailable, server.moneyMax)\\n\\tns.tprintf(\\\"%s\\\", ns.hackAnalyzeThreads(server.hostname, server.moneyAvailable))\\n}\",\"filename\":\"basic/check.js\",\"server\":\"home\"}}],[\"basic/backdoor.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  const servers = await getAllUniqueHosts(ns, ns.getHostname())\\n  for (const server of servers) {\\n    ns.tprintf(\\\"%s\\\", server)\\n    const hacked = attemptHack(ns, server)\\n    if (hacked) {\\n      ns.tprintf(\\\"HACKED %s\\\\n\\\", server)\\n    }\\n  }\\n}\\n\\n/** @param {NS} ns \\n *  @param {string} hostname\\n*/\\nexport async function getAllUniqueHosts(ns, hostname) {\\n  let queue = [hostname];\\n  let uniqueHosts = new Set();\\n\\n  while (queue.length > 0) {\\n    const currentHost = queue.shift();\\n\\n    if (uniqueHosts.has(currentHost)) {\\n      continue;\\n    }\\n\\n    uniqueHosts.add(currentHost);\\n    const connectedHosts = ns.scan(currentHost);\\n    queue = queue.concat(connectedHosts);\\n    await ns.sleep(5)\\n  }\\n\\n  return Array.from(uniqueHosts);\\n}\\n\\n/** @param {NS} ns \\n *  @param {string} hostname\\n*/\\nfunction attemptHack(ns, hostname) {\\n  if (ns.hasRootAccess(hostname)) {\\n    ns.tprintf(\\\"Already Root\\\\n\\\")\\n    return false\\n  }\\n  const level = ns.getServerRequiredHackingLevel(hostname)\\n  if (level > ns.getHackingLevel()) {\\n    ns.tprintf(\\\"%s level required\\\\n\\\", level)\\n    return false\\n  }\\n\\n  return crack(ns, hostname)\\n}\\n\\n/** @param {NS} ns \\n *  @param {string} hostname\\n*/\\nfunction crack(ns, hostname) {\\n  \\n\\n  if (ns.fileExists('BruteSSH.exe')) {\\n    ns.brutessh(hostname)\\n  }\\n  if (ns.fileExists('FTPCrack.exe')) {\\n    ns.ftpcrack(hostname)\\n  }\\n  if (ns.fileExists('RelaySMTP.exe')) {\\n    ns.relaysmtp(hostname)\\n  }\\n  if (ns.fileExists('HTTPWorm.exe')) {\\n    ns.httpworm(hostname)\\n  }\\n  if (ns.fileExists('SQLInject.exe')) {\\n    ns.sqlinject(hostname)\\n  }\\n\\n\\n  try {\\n    ns.nuke(hostname)\\n  }\\n  catch (error) {\\n    const ports = ns.getServerNumPortsRequired(hostname)\\n    ns.tprintf(\\\"%s ports required\\\\n\\\", ports)\\n    return false\\n  }\\n  \\n  return true\\n}\",\"filename\":\"basic/backdoor.js\",\"server\":\"home\"}}],[\"basic/server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst name = ns.args[0]\\n\\tconst ramInt = Number(ns.args[1])\\n\\tconst ram = Math.pow(2, 10 + ramInt) \\n\\tconst servers = new Set(ns.getPurchasedServers())\\n\\n\\tif (name == \\\"-l\\\") {\\n\\t\\tfor (const server of servers) {\\n\\t\\t\\tns.tprintf(\\\"%s: %s GB\\\", server, ns.getServerMaxRam(server))\\n\\t\\t}\\n\\t\\treturn\\n\\t}\\n\\n\\tif (ns.args.length != 2) {\\n\\t\\tns.tprintf(\\\"Enter a new server or existing server and ram to buy / upgrade to\\\")\\n\\t\\tns.tprintf(\\\"Usage: run server.js <name> <ram>\\\")\\n\\t\\treturn\\n\\t}\\n\\n\\n\\tif (servers.has(name)) {\\n\\t\\tconst cost = ns.getPurchasedServerUpgradeCost(name, ram)\\n\\t\\tns.tprintf(\\\"Upgrading %s to %s GB will cost $%s\\\", name, ram, ns.formatNumber(cost))\\n\\t\\tif (cost == -1) {\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t\\tconst buy = await ns.prompt(\\\"Buy Upgrade y/n?\\\", {type: \\\"boolean\\\"})\\n\\t\\tif (buy) {\\n\\t\\t\\tns.upgradePurchasedServer(name, ram)\\n\\t\\t}\\n\\t\\treturn\\n\\t}\\n\\n\\tconst cost = ns.getPurchasedServerCost(ram)\\n\\tns.tprintf(\\\"Buying %s with %s GB will cost $%s\\\", name, ram, ns.formatNumber(cost))\\n\\tconst buy = await ns.prompt(\\\"Buy Server? y/n\\\", {type: \\\"boolean\\\"})\\n\\tif (buy) {\\n\\t\\tns.purchaseServer(name, ram)\\n\\t}\\n}\",\"filename\":\"basic/server.js\",\"server\":\"home\"}}],[\"basic/rename.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst name = ns.args[0]\\n\\tconst rename = ns.args[1]\\n\\n\\tif (ns.args.length != 2) {\\n\\t\\tns.tprintf(\\\"Rename an existing server\\\")\\n\\t\\tns.tprintf(\\\"Usage: run rename.js <name> <new name>\\\")\\n\\t\\treturn\\n\\t}\\n\\n\\tconst servers = new Set(ns.getPurchasedServers())\\n\\tif (!servers.has(name)) {\\n\\t\\tns.tprintf(\\\"%s is not an existing server\\\", name)\\n\\t\\treturn\\n\\t}\\n\\n\\tns.renamePurchasedServer(name, rename)\\n\\tns.tprintf(\\\"Operation Successful\\\", name)\\n}\",\"filename\":\"basic/rename.js\",\"server\":\"home\"}}],[\"basic/scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst servers = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tns.tprint(servers)\\n\\tns.tprint(ns.getMoneySources())\\n\\tns.tprint(ns.getScriptIncome())\\n\\tns.tprint(ns.getScriptExpGain())\\n}\\n\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction info(ns, server) {\\n\\t// show best case hack return\\n\\t// show average case hack return\\n\\n\\t// show ideal ratio of grows, weakens, and hacks\\n\\t// show experience gain?\\n\\n\\t// must weaken until low sec\\n\\t// then grow until high cash\\n\\t// while weakening to keep sec low\\n\\t// then hack while cash high\\n\\t// oo based\\n\\n\\t// simultaneous grows and weakens to butter up server\\n\\t// simultaneous hacks before completion of above (timed to hit right after)\\n\\n\\t// cost / time / thread calculation first time and reoccuring\\n\\n\\t// simultaneous grows and weakens to compensate for hacks (timed to hit right after)\\n\\t// simultaneous hacks before completion of above (timed to hit right after)\\n\\n\\t\\n\\t// cluster = ICluster()\\n\\t// success = cluster.exec(\\\"script\\\", \\\"threads\\\")\\n\\t// false if not enough memory\\n\\t// throw error if script not found\\n\\n\\n\\t// servers = ServerCollection.GetUniqueHosts()\\n\\t// servers = IServerCollection\\n\\t// cluster = ICluster(servers)  // of the servers filter just rooted ones\\n\\n\\t// mm = MinMax(servers)\\n\\t// potential = drop to 50% hacks + weakens and grows to get back to 100%\\n\\t// initial = hacks and weakens to get to 100% then hacks to drop to 50%\\n\\n\\n\\t\\n\\n}\",\"filename\":\"basic/scan.js\",\"server\":\"home\"}}],[\"basic/minmax.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {assignScripts} from \\\"/basic/dist.js\\\"\\nimport {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst targetHost = ns.args[1]\\n\\tconst arg = ns.args[0]\\n\\tif (ns.args.length != 2) {\\n\\t\\tns.tprintf(\\\"Get Info to Prep Server\\\")\\n\\t\\tns.tprintf(\\\"Usage: run minmax.js -i <server>\\\\n\\\")\\n\\n\\t\\tns.tprintf(\\\"Get Cash Flow of Prepped Server\\\")\\n\\t\\tns.tprintf(\\\"Usage: run minmax.js -m <server>\\\\n\\\")\\n\\n\\t\\tns.tprintf(\\\"Prep Server\\\")\\n\\t\\tns.tprintf(\\\"Usage: run minmax.js -p <server>\\\\n\\\")\\n\\n\\t\\tns.tprintf(\\\"Run Cash Flow Cycle\\\")\\n\\t\\tns.tprintf(\\\"Usage: run minmax.js -r <server>\\\\n\\\")\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-i\\\") {\\n\\t\\tthreadsToButterUp(ns, ns.getServer(targetHost))\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-p\\\") {\\n\\t\\tconst hosts = ns.getPurchasedServers()\\n\\t\\tconst [growThreads, weakenThreads] = threadsToButterUp(ns, ns.getServer(targetHost))\\n\\t\\tbutterUp(ns, hosts, growThreads, weakenThreads, targetHost)\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-c\\\") {\\n\\t\\tlet stats = costBenefit(ns, ns.getServer(targetHost))\\n\\t\\tstats[\\\"cashPerGBSec\\\"] = cashPerThreadSec(ns, stats)\\n\\t\\tfor (const key in stats) {\\n\\t\\t\\tns.tprintf(\\\"%s: %s\\\", key, stats[key])\\n\\t\\t}\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-a\\\") {\\n\\t\\tlet serverStats = []\\n\\t\\tfor (const host of await getAllUniqueHosts(ns, ns.getHostname())) {\\n\\t\\t\\tlet stats = costBenefit(ns, ns.getServer(host))\\n\\t\\t\\tstats[\\\"cashPerGBSec\\\"] = cashPerThreadSec(ns, stats)\\n\\t\\t\\tstats[\\\"name\\\"] = host\\n\\t\\t\\tserverStats.push(stats)\\n\\t\\t}\\n\\n\\t\\tconst sortedData = serverStats.sort((a, b) => b.cashPerGBSec - a.cashPerGBSec);\\n\\t\\tfor (const stats of sortedData) {\\n\\t\\t\\tns.tprintf(\\\"%s:\\\\nCashPerGBSec: %s\\\", stats.name, stats.cashPerGBSec)\\n\\t\\t\\tdisplayRatio(ns, stats)\\n\\t\\t\\tns.tprintf(\\\"\\\\n\\\")\\n\\t\\t}\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-b\\\") {\\n\\t\\tfor (const host of await getAllUniqueHosts(ns, ns.getHostname())) {\\n\\t\\t\\tlet stats = costBenefit(ns, ns.getServer(host))\\n\\t\\t\\tns.tprintf(\\\"%s:\\\", host)\\n\\t\\t\\tdisplayRatio(ns, stats)\\n\\t\\t\\tns.tprintf(\\\"\\\\n\\\")\\n\\t\\t}\\n\\t\\treturn\\n\\t}\\n\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction costBenefit(ns, server) {\\n\\tconst hackChance = ns.hackAnalyzeChance(server.hostname)\\n\\tconst hackPercent = ns.hackAnalyze(server.hostname)\\n\\tconst hackRAM = 1.75\\n\\n\\tconst hacksPerCycle = 0.5 / hackPercent\\n\\tconst hackSecIncrease = ns.hackAnalyzeSecurity(hacksPerCycle, server.hostname)\\n\\tconst hackTime = Math.round(ns.getHackTime(server.hostname)/1000)\\n\\n\\tconst growsPerCycle = ns.growthAnalyze(server.hostname, 2)\\n\\tconst growSecIncrease = ns.growthAnalyzeSecurity(growsPerCycle, server.hostname)\\n\\tconst growTime = Math.round(ns.getGrowTime(server.hostname)/1000)\\n\\n\\tconst secIncrease = growSecIncrease + hackSecIncrease\\n\\tconst weakensPerCycle = secIncrease / .05\\n\\tconst weakenTime = Math.round(ns.getWeakenTime(server.hostname)/1000)\\n\\n\\n\\n\\n\\t// const cashPerGBSec = (hackPercent * server.moneyAvailable * hackChance) / (hackTime * hackRAM)\\n\\n\\treturn {\\n\\t\\t\\\"hackThreads\\\": hacksPerCycle,\\n\\t\\t\\\"hackTime\\\": hackTime,\\n\\t\\t\\\"growThreads\\\": growsPerCycle,\\n\\t\\t\\\"growTime\\\": growTime,\\n\\t\\t\\\"weakenThreads\\\": weakensPerCycle,\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\n\\n\\t\\t\\\"revenue\\\": server.moneyMax / 2,\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n*/\\nfunction cashPerThreadSec(ns, stats) {\\n\\t//const stats = costBenefit(ns, server)\\n\\n\\tconst hackThreadSecs = stats.hackThreads * stats.hackTime\\n\\tconst growThreadSecs = stats.growThreads * stats.growTime\\n\\tconst weakenThreadSecs = stats.weakenThreads * stats.weakenTime\\n\\n\\tconst totalThreadSecs = hackThreadSecs + growThreadSecs + weakenThreadSecs\\n\\n\\tconst cashPerThreadSec = stats.revenue / totalThreadSecs\\n\\tconst cashPerGBSec = cashPerThreadSec / 1.75\\n\\t// ns.tprintf(\\\"$/GB*Sec = %s\\\", cashPerGBSec)\\n\\treturn cashPerGBSec\\n}\\n\\n/** @param {NS} ns \\n*/\\nfunction displayRatio(ns, stats) {\\n\\t//const stats = costBenefit(ns, server)\\n\\n\\tconst hackThreadSecs = stats.hackThreads * stats.hackTime\\n\\tconst growThreadSecs = stats.growThreads * stats.growTime\\n\\tconst weakenThreadSecs = stats.weakenThreads * stats.weakenTime\\n\\n\\tconst totalThreadSecs = hackThreadSecs + growThreadSecs + weakenThreadSecs\\n\\n\\tconst percentHacks = hackThreadSecs / totalThreadSecs\\n\\tconst percentGrows = growThreadSecs / totalThreadSecs\\n\\tconst percentWeaken = weakenThreadSecs / totalThreadSecs\\n\\n\\tns.tprintf(\\\"Hack Percent: %s%s\\\", Math.round(percentHacks*100), \\\"%\\\")\\n\\tns.tprintf(\\\"Grow Percent: %s%s\\\", Math.round(percentGrows*100), \\\"%\\\")\\n\\tns.tprintf(\\\"Weaken Percent: %s%s\\\", Math.round(percentWeaken*100), \\\"%\\\")\\n\\n\\tconst cashPerThreadSec = stats.revenue / totalThreadSecs\\n\\tns.tprintf(\\\"cashPerThreadSec: %s\\\", cashPerThreadSec)\\n\\t// const cashPerGBSec = cashPerThreadSec / 1.75\\n\\t// ns.tprintf(\\\"$/GB*Sec = %s\\\", cashPerGBSec)\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction info(ns, server) {\\n\\n\\t// enough weakens for both growth and minSec\\n\\n\\t// next hacks\\n\\t// const chance = ns.hackAnalyzeChance(server.hostname)\\n\\n\\t// const cashPercentPerHack = ns.hackAnalyze(server.hostname)\\n\\t// const hackThreadsToHalve = .5/cashPercentPerHack\\n\\t// const hackSecIncrease = ns.hackAnalyzeSecurity(hackThreadsToHalve)\\n\\n\\n\\n\\t\\n\\n\\t// at buttered up time, what would be cost/benefit for a 50% cash hit\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction butterUp(ns, scriptHosts, growThreads, weakenThreads, targetHost) {\\n\\tassignScripts(ns, scriptHosts, \\\"/basic/weakenOnce.js\\\", weakenThreads, targetHost)\\n\\tassignScripts(ns, scriptHosts, \\\"/basic/growOnce.js\\\", growThreads, targetHost)\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction basicStats(ns, server) {\\n\\tns.tprintf(\\\"$%s/$%s\\\", server.moneyAvailable, server.moneyMax)\\n\\tns.tprintf(\\\"%s/%s\\\", server.minDifficulty, server.hackDifficulty)\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction threadsToButterUp(ns, server) {\\n\\n\\tconst weakTime = ns.getWeakenTime() // security\\n\\tconst growTime = ns.getGrowTime()\\n\\t\\n\\t// right now what does it take to butter up server\\n\\tconst weakenThread = 0.05\\n\\tconst multToFull = server.moneyMax / server.moneyAvailable\\n\\tconst growThreadsToDouble = ns.growthAnalyze(server.hostname, 2)\\n\\tconst growthSecIncrease = ns.growthAnalyzeSecurity(growThreadsToDouble)\\n\\n\\tlet lowerBy = server.hackDifficulty - server.minDifficulty\\n\\tlowerBy += growthSecIncrease\\n\\n\\tconst weakenThreads = lowerBy / weakenThread\\n\\tconst execGrowThreads = Math.round(growThreadsToDouble)\\n\\tconst execWeakenThreads = Math.round(weakenThreads)\\n\\n\\tbasicStats(ns, server)\\n\\tns.tprintf(\\\"Grow Threads: %s, Ram: %s GB, Time: %s\\\", execGrowThreads, Math.round(growThreadsToDouble*1.75), Math.round(growTime / 1000))\\n\\tns.tprintf(\\\"Weaken Threads: %s, Ram: %s GB, Time: %s\\\", execWeakenThreads, Math.round(weakenThreads*1.75), Math.round(weakTime / 1000))\\n\\treturn [execGrowThreads, execWeakenThreads]\\n}\",\"filename\":\"basic/minmax.js\",\"server\":\"home\"}}],[\"basic/remote.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length < 2) {\\n\\t\\tns.tprintf(\\\"Usage: run remote.js <script> <scriptHost> [threads] [..args]\\\")\\n\\t\\treturn\\n\\t}\\n\\n\\tconst script = ns.args[0]\\n\\tconst scriptHost = ns.args[1]\\n\\tconst threads = ns.args[2] == null ? 1 : Number(ns.args[2])\\n\\tconst args = ns.args.slice(3)\\n\\n\\tif (script === \\\"killall\\\") {\\n\\t\\tns.killall(scriptHost)\\n\\t\\treturn\\n\\t}\\n\\n\\tif (!ns.fileExists(script, scriptHost)) {\\n\\t\\tns.scp(script, scriptHost)\\n\\t}\\n\\n\\n\\tns.exec(script, scriptHost, threads, ...args)\\n}\",\"filename\":\"basic/remote.js\",\"server\":\"home\"}}],[\"basic/hackOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.hack(target, {threads: numThreads})\\n}\",\"filename\":\"basic/hackOnce.js\",\"server\":\"home\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"home\"}}],[\"basic/hackStock.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.hack(ns.args[0], {stock: true});\\n\\t}\\n}\",\"filename\":\"basic/hackStock.js\",\"server\":\"home\"}}],[\"basic/growStock.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.grow(ns.args[0], {stock: true});\\n\\t}\\n}\",\"filename\":\"basic/growStock.js\",\"server\":\"home\"}}],[\"basic/stockServers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\n\\tfor (const host of hosts) {\\n\\t\\tconst server = ns.getServer(host)\\n\\t\\tns.tprintf(\\\"%s:\\\\t%s\\\", server.organizationName, server.hostname)\\n\\t}\\n}\",\"filename\":\"basic/stockServers.js\",\"server\":\"home\"}}],[\"basic/dist.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** Assigns the script to run on the servers such that all scripts are run a total of times times. \\n *  @param {NS} ns \\n *  @param {string[]} servers\\n *  @param {string} script\\n *  @param {number} times\\n *  @returns {Object.<string, number>} A dictionary specifying how many times the script should be run on which servers.\\n*/\\nexport function distributeScripts(ns, servers, script, times) {\\n  const distribution = {};\\n\\n  const scriptRamCost = ns.getScriptRam(script);\\n\\n  let remainingTimes = times;\\n  while (remainingTimes > 0) {\\n    for (const server of servers) {\\n      const maxRam = ns.getServerMaxRam(server);\\n      const usedRam = ns.getServerUsedRam(server);\\n      const availableRam = maxRam - usedRam;\\n\\n      if (availableRam >= scriptRamCost) {\\n        const maxRuns = Math.floor(availableRam / scriptRamCost);\\n        const runs = Math.min(remainingTimes, maxRuns);\\n\\n        if (runs > 0) {\\n          distribution[server] = runs;\\n          remainingTimes -= runs;\\n        }\\n      }\\n\\n      if (remainingTimes <= 0) {\\n        break;\\n      }\\n    }\\n\\n    if (remainingTimes > 0) {\\n      throw new Error(\\\"Not enough resources to run the script the specified number of times.\\\");\\n    }\\n  }\\n\\n  return distribution;\\n}\\n\\n/** @param {NS} ns  \\n *  @param {string[]} servers\\n *  @param {string} script\\n *  @param {number} times\\n *  @returns {Object.<string, number>} A dictionary specifying how many times the script should be run on which servers.\\n*/\\nexport function assignScripts(ns, servers, script, times, ...args) {\\n  const distr = distributeScripts(ns, servers, script, times)\\n  ns.tprint(distr)\\n  for (const server in distr) {\\n    if (!ns.fileExists(script, server)) {\\n      ns.scp(script, server)\\n    }\\n    const threads = distr[server]\\n    ns.exec(script, server, threads, ...args)\\n  }\\n}\\n\\n/** @param {NS} ns  */\\nexport async function main(ns) {\\n}\",\"filename\":\"basic/dist.js\",\"server\":\"home\"}}],[\"basic/queue.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n *  @param {string} host\\n*/\\nfunction prereq(ns, host, weak, grow, hack) {\\n\\tconst files = [weak, grow, hack]\\n\\tfor (const file of files) {\\n\\t\\tif (!ns.fileExists(file, host)) {\\n\\t\\t\\tns.scp(file, host)\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length != 4) {\\n\\t\\tns.tprintf(\\\"Usage: run queue.js <host> <threads> <grow/hack/weaken> <target>\\\")\\n\\t\\treturn\\n\\t}\\n\\n\\tconst host = ns.args[0]\\n\\tconst threads = Number(ns.args[1])\\n\\tconst script = ns.args[2]\\n\\tconst target = ns.args[3]\\n\\n\\tconst weak=\\\"/basic/weakenOnce.js\\\"\\n\\tconst grow=\\\"/basic/growOnce.js\\\"\\n\\tconst hack=\\\"/basic/hackOnce.js\\\"\\n\\n\\tprereq(ns, host, weak, grow, hack)\\n\\n\\tns.tprintf(\\\"Queued %s %s %s %s\\\", host, threads, script, target)\\n\\tif (script === \\\"grow\\\") {\\n\\t\\tawait queue(ns, grow, host, threads, target)\\n\\t\\treturn\\n\\t}\\n\\tif (script === \\\"weaken\\\") {\\n\\t\\tawait queue(ns, weak, host, threads, target)\\n\\t\\treturn\\n\\t}\\n\\tif (script === \\\"hack\\\") {\\n\\t\\tawait queue(ns, hack, host, threads, target)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(\\\"%s is not a valid option\\\", script)\\n}\\n\\n/** @param {NS} ns */\\nasync function queue(ns, file, host, threads, target) {\\n\\tlet remaining = threads\\n\\twhile (remaining > 0) {\\n\\t\\tremaining -= runMax(ns, file, host, remaining, target)\\n\\t\\tif (remaining <= 0) {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t\\tawait ns.sleep(5000)\\n\\t}\\n\\tns.tprintf(\\\"finished running %s %s -> %s on %s\\\", threads, file, target, host)\\n}\\n\\n/** @param {NS} ns */\\nfunction runMax(ns, file, host, threads, target) {\\n\\tconst usedRam = ns.getServerUsedRam(host)\\n\\tconst maxRam = ns.getServerMaxRam(host)\\n\\tlet availableRam = maxRam - usedRam\\n\\tconst scriptRam = ns.getScriptRam(file)\\n\\n\\t// let times = 0\\n\\t// while (availableRam > scriptRam) {\\n\\t// \\ttimes += 1\\n\\t// \\tavailableRam -= scriptRam\\n\\t// }\\n\\tlet times = Math.floor(availableRam / scriptRam)\\n\\tif (times === 0) {\\n\\t\\treturn 0\\n\\t}\\n\\n\\tconst canDo = Math.min(times, threads)\\n\\n\\tns.exec(file, host, canDo, target)\\n\\tns.tprintf(\\\"succesfully started %s %s -> %s on %s\\\", canDo, file, target, host)\\n\\treturn canDo\\n}\",\"filename\":\"basic/queue.js\",\"server\":\"home\"}}],[\"a/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.grow(ns.args[0])\\n}\",\"filename\":\"a/grow.js\",\"server\":\"home\"}}],[\"a/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.weaken(ns.args[0])\\n}\",\"filename\":\"a/weaken.js\",\"server\":\"home\"}}],[\"a/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.hack(ns.args[0])\\n}\",\"filename\":\"a/hack.js\",\"server\":\"home\"}}],[\"a/auto.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length != 2) {\\n\\t\\tns.tprintf(\\\"Usage: run auto.js <host> <target>\\\")\\n\\t\\treturn\\n\\t}\\n\\tconst server = ns.getServer(ns.args[1])\\n\\tconst localhost = ns.args[0]\\n\\tprereq(ns, localhost, \\\"/a/hack.js\\\")\\n\\tprereq(ns, localhost, \\\"/a/grow.js\\\")\\n\\tprereq(ns, localhost, \\\"/a/weaken.js\\\")\\n\\twhile (true) {\\n\\t\\tawait process(ns, server, localhost)\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n *  @param {string} localhost\\n *  @param {string} file\\n*/\\nfunction prereq(ns, localhost, file) {\\n\\tif (!ns.fileExists(file, localhost)) {\\n\\t\\tns.scp(file, localhost)\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nasync function process(ns, server, localhost) {\\n\\tif (server.hackDifficulty > (server.minDifficulty + 5)) {\\n\\t\\tconst weakenThreads = Math.ceil((server.hackDifficulty - server.minDifficulty) / .05)\\n\\t\\tconst weakenPath = \\\"/a/weaken.js\\\" \\n\\t\\tns.exec(weakenPath,localhost,weakenThreads,server.hostname)\\n\\t\\tns.printf(\\\"running %s %s -> %s on %s\\\", weakenThreads, weakenPath, server.hostname, localhost)\\n\\t\\tawait ns.sleep(ns.getWeakenTime(server.hostname))\\n\\t\\tns.printf(\\\"finished waiting for %s %s and %s %s\\\", weakenThreads, weakenPath)\\n\\t\\treturn\\n\\t}\\n\\n\\tif (server.moneyAvailable < (server.moneyMax * .8)) {\\n\\t\\tconst multiplier = server.moneyMax / server.moneyAvailable\\n\\t\\tconst growThreads = ns.growthAnalyze(server.hostname, multiplier)\\n\\t\\tconst secIncrease = ns.growthAnalyzeSecurity(growThreads, server.hostname)\\n\\t\\tawait run(ns, localhost, \\\"/a/grow.js\\\", ns.getGrowTime(server.hostname), growThreads, secIncrease)\\n\\t\\treturn\\n\\t}\\n\\n\\t// hack until 80%\\n\\tconst cashPerThread = ns.hackAnalyze() * server.moneyAvailable\\n\\tconst cashToTake = server.moneyAvailable - (server.moneyMax * .8)\\n\\tconst hackThreads = Math.floor(cashToTake / cashPerThread)\\n\\tconst secIncrease = ns.hackAnalyzeSecurity(hackThreads)\\n\\tawait run(ns, localhost, \\\"/a/hack.js\\\", ns.getHackTime(server.hostname), hackThreads, secIncrease)\\n}\\n\\nasync function run(ns, localhost, path, runtime, threads, secIncrease) {\\n\\tconst weakenThreads = Math.ceil(secIncrease / .05)\\n\\tconst weakenPath = \\\"/a/weaken.js\\\" \\n\\tconst wait = Math.max(ns.getWeakenTime(server.hostname), runtime)\\n\\n\\tns.exec(path, localhost, threads, server.hostname)\\n\\tns.exec(weakenPath, localhost, weakenThreads, server.hostname)\\n\\tns.printf(\\\"running %s %s -> %s on %s\\\", threads, path, server.hostname, localhost)\\n\\tns.printf(\\\"running %s %s -> %s on %s\\\", weakenThreads, weakenPath, server.hostname, localhost)\\n\\tawait ns.sleep(wait)\\n\\tns.printf(\\\"finished waiting for %s %s and %s %s\\\", threads, path, weakenThreads, weakenPath)\\n}\",\"filename\":\"a/auto.js\",\"server\":\"home\"}}],[\"stats/minmax.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {assignScripts} from \\\"/basic/dist.js\\\"\\nimport {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst targetHost = ns.args[1]\\n\\tconst arg = ns.args[0]\\n\\tif (ns.args.length != 2) {\\n\\t\\tns.tprintf(\\\"Get Info to Prep Server\\\")\\n\\t\\tns.tprintf(\\\"Usage: run minmax.js -i <server>\\\\n\\\")\\n\\n\\t\\tns.tprintf(\\\"Get Cash Flow of Prepped Server\\\")\\n\\t\\tns.tprintf(\\\"Usage: run minmax.js -m <server>\\\\n\\\")\\n\\n\\t\\tns.tprintf(\\\"Prep Server\\\")\\n\\t\\tns.tprintf(\\\"Usage: run minmax.js -p <server>\\\\n\\\")\\n\\n\\t\\tns.tprintf(\\\"Run Cash Flow Cycle\\\")\\n\\t\\tns.tprintf(\\\"Usage: run minmax.js -r <server>\\\\n\\\")\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-i\\\") {\\n\\t\\tthreadsToButterUp(ns, ns.getServer(targetHost))\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-p\\\") {\\n\\t\\tconst hosts = ns.getPurchasedServers()\\n\\t\\tconst [growThreads, weakenThreads] = threadsToButterUp(ns, ns.getServer(targetHost))\\n\\t\\tbutterUp(ns, hosts, growThreads, weakenThreads, targetHost)\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-c\\\") {\\n\\t\\tlet stats = costBenefit(ns, ns.getServer(targetHost))\\n\\t\\tstats[\\\"cashPerGBSec\\\"] = cashPerThreadSec(ns, stats)\\n\\t\\tfor (const key in stats) {\\n\\t\\t\\tns.tprintf(\\\"%s: %s\\\", key, stats[key])\\n\\t\\t}\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-a\\\") {\\n\\t\\tlet serverStats = []\\n\\t\\tfor (const host of await getAllUniqueHosts(ns, ns.getHostname())) {\\n\\t\\t\\tlet stats = costBenefit(ns, ns.getServer(host))\\n\\t\\t\\tstats[\\\"cashPerGBSec\\\"] = cashPerThreadSec(ns, stats)\\n\\t\\t\\tstats[\\\"name\\\"] = host\\n\\t\\t\\tserverStats.push(stats)\\n\\t\\t}\\n\\n\\t\\tconst sortedData = serverStats.sort((a, b) => b.cashPerGBSec - a.cashPerGBSec);\\n\\t\\tfor (const stats of sortedData) {\\n\\t\\t\\tns.tprintf(\\\"%s:\\\\nCashPerGBSec: %s\\\", stats.name, stats.cashPerGBSec)\\n\\t\\t\\tdisplayRatio(ns, stats)\\n\\t\\t\\tns.tprintf(\\\"\\\\n\\\")\\n\\t\\t}\\n\\t\\treturn\\n\\t}\\n\\tif (arg === \\\"-b\\\") {\\n\\t\\tfor (const host of await getAllUniqueHosts(ns, ns.getHostname())) {\\n\\t\\t\\tlet stats = costBenefit(ns, ns.getServer(host))\\n\\t\\t\\tns.tprintf(\\\"%s:\\\", host)\\n\\t\\t\\tdisplayRatio(ns, stats)\\n\\t\\t\\tns.tprintf(\\\"\\\\n\\\")\\n\\t\\t}\\n\\t\\treturn\\n\\t}\\n\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction costBenefit(ns, server) {\\n\\tconst hackChance = ns.hackAnalyzeChance(server.hostname)\\n\\tconst hackPercent = ns.hackAnalyze(server.hostname)\\n\\tconst hackRAM = 1.75\\n\\n\\tconst hacksPerCycle = 0.5 / hackPercent\\n\\tconst hackSecIncrease = ns.hackAnalyzeSecurity(hacksPerCycle, server.hostname)\\n\\tconst hackTime = Math.round(ns.getHackTime(server.hostname)/1000)\\n\\n\\tconst growsPerCycle = ns.growthAnalyze(server.hostname, 2)\\n\\tconst growSecIncrease = ns.growthAnalyzeSecurity(growsPerCycle, server.hostname)\\n\\tconst growTime = Math.round(ns.getGrowTime(server.hostname)/1000)\\n\\n\\tconst secIncrease = growSecIncrease + hackSecIncrease\\n\\tconst weakensPerCycle = secIncrease / .05\\n\\tconst weakenTime = Math.round(ns.getWeakenTime(server.hostname)/1000)\\n\\n\\n\\n\\n\\t// const cashPerGBSec = (hackPercent * server.moneyAvailable * hackChance) / (hackTime * hackRAM)\\n\\n\\treturn {\\n\\t\\t\\\"hackThreads\\\": hacksPerCycle,\\n\\t\\t\\\"hackTime\\\": hackTime,\\n\\t\\t\\\"growThreads\\\": growsPerCycle,\\n\\t\\t\\\"growTime\\\": growTime,\\n\\t\\t\\\"weakenThreads\\\": weakensPerCycle,\\n\\t\\t\\\"weakenTime\\\": weakenTime,\\n\\n\\t\\t\\\"revenue\\\": server.moneyMax / 2,\\n\\t}\\n}\\n\\n/** @param {NS} ns \\n*/\\nfunction cashPerThreadSec(ns, stats) {\\n\\t//const stats = costBenefit(ns, server)\\n\\n\\tconst hackThreadSecs = stats.hackThreads * stats.hackTime\\n\\tconst growThreadSecs = stats.growThreads * stats.growTime\\n\\tconst weakenThreadSecs = stats.weakenThreads * stats.weakenTime\\n\\n\\tconst totalThreadSecs = hackThreadSecs + growThreadSecs + weakenThreadSecs\\n\\n\\tconst cashPerThreadSec = stats.revenue / totalThreadSecs\\n\\tconst cashPerGBSec = cashPerThreadSec / 1.75\\n\\t// ns.tprintf(\\\"$/GB*Sec = %s\\\", cashPerGBSec)\\n\\treturn cashPerGBSec\\n}\\n\\n/** @param {NS} ns \\n*/\\nfunction displayRatio(ns, stats) {\\n\\t//const stats = costBenefit(ns, server)\\n\\n\\tconst hackThreadSecs = stats.hackThreads * stats.hackTime\\n\\tconst growThreadSecs = stats.growThreads * stats.growTime\\n\\tconst weakenThreadSecs = stats.weakenThreads * stats.weakenTime\\n\\n\\tconst totalThreadSecs = hackThreadSecs + growThreadSecs + weakenThreadSecs\\n\\n\\tconst percentHacks = hackThreadSecs / totalThreadSecs\\n\\tconst percentGrows = growThreadSecs / totalThreadSecs\\n\\tconst percentWeaken = weakenThreadSecs / totalThreadSecs\\n\\n\\tns.tprintf(\\\"Hack Percent: %s%s\\\", Math.round(percentHacks*100), \\\"%\\\")\\n\\tns.tprintf(\\\"Grow Percent: %s%s\\\", Math.round(percentGrows*100), \\\"%\\\")\\n\\tns.tprintf(\\\"Weaken Percent: %s%s\\\", Math.round(percentWeaken*100), \\\"%\\\")\\n\\n\\tconst cashPerThreadSec = stats.revenue / totalThreadSecs\\n\\tns.tprintf(\\\"cashPerThreadSec: %s\\\", cashPerThreadSec)\\n\\t// const cashPerGBSec = cashPerThreadSec / 1.75\\n\\t// ns.tprintf(\\\"$/GB*Sec = %s\\\", cashPerGBSec)\\n}\\n\\n\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction info(ns, server) {\\n\\n\\t// enough weakens for both growth and minSec\\n\\n\\t// next hacks\\n\\t// const chance = ns.hackAnalyzeChance(server.hostname)\\n\\n\\t// const cashPercentPerHack = ns.hackAnalyze(server.hostname)\\n\\t// const hackThreadsToHalve = .5/cashPercentPerHack\\n\\t// const hackSecIncrease = ns.hackAnalyzeSecurity(hackThreadsToHalve)\\n\\n\\n\\n\\t\\n\\n\\t// at buttered up time, what would be cost/benefit for a 50% cash hit\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction butterUp(ns, scriptHosts, growThreads, weakenThreads, targetHost) {\\n\\tassignScripts(ns, scriptHosts, \\\"/basic/weakenOnce.js\\\", weakenThreads, targetHost)\\n\\tassignScripts(ns, scriptHosts, \\\"/basic/growOnce.js\\\", growThreads, targetHost)\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction basicStats(ns, server) {\\n\\tns.tprintf(\\\"$%s/$%s\\\", server.moneyAvailable, server.moneyMax)\\n\\tns.tprintf(\\\"%s/%s\\\", server.minDifficulty, server.hackDifficulty)\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction threadsToButterUp(ns, server) {\\n\\n\\tconst weakTime = ns.getWeakenTime() // security\\n\\tconst growTime = ns.getGrowTime()\\n\\t\\n\\t// right now what does it take to butter up server\\n\\tconst weakenThread = 0.05\\n\\tconst multToFull = server.moneyMax / server.moneyAvailable\\n\\tconst growThreadsToDouble = ns.growthAnalyze(server.hostname, 2)\\n\\tconst growthSecIncrease = ns.growthAnalyzeSecurity(growThreadsToDouble)\\n\\n\\tlet lowerBy = server.hackDifficulty - server.minDifficulty\\n\\tlowerBy += growthSecIncrease\\n\\n\\tconst weakenThreads = lowerBy / weakenThread\\n\\tconst execGrowThreads = Math.round(growThreadsToDouble)\\n\\tconst execWeakenThreads = Math.round(weakenThreads)\\n\\n\\tbasicStats(ns, server)\\n\\tns.tprintf(\\\"Grow Threads: %s, Ram: %s GB, Time: %s\\\", execGrowThreads, Math.round(growThreadsToDouble*1.75), Math.round(growTime / 1000))\\n\\tns.tprintf(\\\"Weaken Threads: %s, Ram: %s GB, Time: %s\\\", execWeakenThreads, Math.round(weakenThreads*1.75), Math.round(weakTime / 1000))\\n\\treturn [execGrowThreads, execWeakenThreads]\\n}\",\"filename\":\"stats/minmax.js\",\"server\":\"home\"}}],[\"stats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst targetHost = ns.args[0]\\n\\tthreadsToButterUp(ns, ns.getServer(targetHost))\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction basicStats(ns, server) {\\n\\tns.tprintf(\\\"$%s/$%s\\\", server.moneyAvailable, server.moneyMax)\\n\\tns.tprintf(\\\"%s/%s\\\", server.minDifficulty, server.hackDifficulty)\\n}\\n\\n/** @param {NS} ns \\n *  @param {Server} server\\n*/\\nfunction threadsToButterUp(ns, server) {\\n\\n\\tconst weakTime = ns.getWeakenTime() // security\\n\\tconst growTime = ns.getGrowTime()\\n\\t\\n\\t// right now what does it take to butter up server\\n\\tconst weakenThread = 0.05\\n\\tconst multToFull = server.moneyMax / server.moneyAvailable\\n\\tconst growThreadsToDouble = ns.growthAnalyze(server.hostname, 2)\\n\\tconst growthSecIncrease = ns.growthAnalyzeSecurity(growThreadsToDouble)\\n\\n\\tlet lowerBy = server.hackDifficulty - server.minDifficulty\\n\\tlowerBy += growthSecIncrease\\n\\n\\tconst weakenThreads = lowerBy / weakenThread\\n\\tconst execGrowThreads = Math.round(growThreadsToDouble)\\n\\tconst execWeakenThreads = Math.round(weakenThreads)\\n\\n\\tbasicStats(ns, server)\\n\\tns.tprintf(\\\"Grow Threads: %s, Ram: %s GB, Time: %s\\\", execGrowThreads, Math.round(growThreadsToDouble*1.75), Math.round(growTime / 1000))\\n\\tns.tprintf(\\\"Weaken Threads: %s, Ram: %s GB, Time: %s\\\", execWeakenThreads, Math.round(weakenThreads*1.75), Math.round(weakTime / 1000))\\n\\treturn [execGrowThreads, execWeakenThreads]\\n}\",\"filename\":\"stats.js\",\"server\":\"home\"}}],[\"connect.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nfunction find_node(ns, node, target, visited = {}, path = []) {\\n\\tvisited[node] = true;\\n\\tpath.push(node);\\n\\n\\tif (node === target) {\\n\\t\\t\\treturn path;\\n\\t}\\n\\n\\tlet neighbors = ns.scan(node);\\n\\tfor (let i = 0; i < neighbors.length; i++) {\\n\\t\\tlet neighbor = neighbors[i];\\n\\t\\tif (!visited[neighbor]) {\\n\\t\\t\\tlet result_path = find_node(ns, neighbor, target, Object.assign({}, visited), [...path]);\\n\\t\\t\\tif (result_path) {\\n\\t\\t\\t\\treturn result_path;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn null;\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length !== 1) {\\n\\t\\tns.tprintf(\\\"Usage: connect.js <serverName>\\\")\\n\\t\\treturn\\n\\t}\\n\\tconst serverName = ns.args[0]\\n\\n\\tconst path = find_node(ns, ns.getHostname(), serverName)\\n\\tns.tprintf(\\\"%s\\\", path.join(\\\" --> \\\"))\\n}\",\"filename\":\"connect.js\",\"server\":\"home\"}}],[\"new/ns.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const SERVER_COST_MULT = 1.85;\\nconst SERVER_BASE_COST = 30000;\\nconst SERVER_MAX = 100;\\n\\nconst LEVEL_BASE_COST = 1000;\\nconst LEVEL_COST_MULT = 1.2;\\nconst LEVEL_MAX = 30;\\n\\nconst RAM_BASE_COST = 10000;\\nconst RAM_COST_MULT = 2.85;\\nconst RAM_MAX = 64;\\n\\nconst CORE_BASE_COST = 5000;\\nconst CORE_COST_MULT = 1.5;\\nconst CORE_MAX = 24;\\n\\nexport function serverCost(numServers) {\\n    if (numServers >= SERVER_MAX) {\\n        return Infinity;\\n    }\\n    return SERVER_BASE_COST * Math.pow(SERVER_COST_MULT, numServers);\\n}\\n\\nexport function upgradeLevel(numLevels) {\\n    if (numLevels >= LEVEL_MAX) {\\n        return Infinity;\\n    }\\n    return LEVEL_BASE_COST * Math.pow(LEVEL_COST_MULT, numLevels);\\n}\\n\\nexport function upgradeRam(numRam) {\\n    if (numRam >= RAM_MAX) {\\n        return Infinity;\\n    }\\n    return RAM_BASE_COST * Math.pow(RAM_COST_MULT, numRam);\\n}\\n\\nexport function upgradeCore(numCore) {\\n    if (numCore >= CORE_MAX) {\\n        return Infinity;\\n    }\\n    return CORE_BASE_COST * Math.pow(CORE_COST_MULT, numCore);\\n}\\n\\nexport function moneyGainRate(levels, ram, cores) {\\n    return (levels * 100 * ram * cores);\\n}\",\"filename\":\"new/ns.js\",\"server\":\"home\"}}],[\"new/bitnet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {moneyGainRate, serverCost, upgradeLevel, upgradeRam, upgradeCore} from \\\"new/ns3.js\\\"\\n\\nclass Server {\\n\\tconstructor(i, level, ram, core) {\\n\\t\\tthis.i = i\\n\\t\\tthis.level = level;\\n\\t\\tthis.ram = ram;\\n\\t\\tthis.core = core;\\n\\t}\\n\\n\\t/** @param {NS} ns */\\n\\tupgrade(ns, upgradeType) {\\n\\t\\tif (upgradeType === 'level') {\\n\\t\\t\\tthis.level += 1;\\n\\t\\t\\tns.hacknet.upgradeLevel(this.i)\\n\\t\\t} else if (upgradeType === 'ram') {\\n\\t\\t\\tthis.ram += 1;\\n\\t\\t\\tns.hacknet.upgradeRam(this.i)\\n\\t\\t} else if (upgradeType === 'core') {\\n\\t\\t\\tthis.core += 1;\\n\\t\\t\\tns.hacknet.upgradeCore(this.i)\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction calculateROI(cost, gain) {\\n\\treturn gain / cost;\\n}\\n\\n/** @param {NS} ns */\\nfunction chooseBestInvestment(ns, servers) {\\n\\tlet newServerCost = serverCost(ns, servers.length);\\n\\tlet newServerGain = moneyGainRate(ns, 1, 1, 1);\\n\\n\\tlet bestROI = calculateROI(newServerCost, newServerGain);\\n\\tlet bestAction = ['buy', newServerCost, null];\\n\\n\\tlet upgradeCost, newGain;\\n\\n\\tservers.forEach((server, index) => {\\n\\t\\t['level', 'ram', 'core'].forEach(upgradeType => {\\n\\t\\t\\tif (upgradeType === 'level') {\\n\\t\\t\\t\\tupgradeCost = upgradeLevel(ns, server.level);\\n\\t\\t\\t\\tnewGain = moneyGainRate(ns, server.level + 1, server.ram, server.core);\\n\\t\\t\\t} else if (upgradeType === 'ram') {\\n\\t\\t\\t\\tupgradeCost = upgradeRam(ns, server.ram);\\n\\t\\t\\t\\tnewGain = moneyGainRate(ns, server.level, server.ram + 1, server.core);\\n\\t\\t\\t} else { // upgradeType === 'core'\\n\\t\\t\\t\\tupgradeCost = upgradeCore(ns, server.core);\\n\\t\\t\\t\\tnewGain = moneyGainRate(ns, server.level, server.ram, server.core + 1);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tlet roi = calculateROI(upgradeCost, newGain - moneyGainRate(ns, server.level, server.ram, server.core));\\n\\n\\t\\t\\tif (roi > bestROI) {\\n\\t\\t\\t\\tbestROI = roi;\\n\\t\\t\\t\\tbestAction = [upgradeType, upgradeCost, index];\\n\\t\\t\\t}\\n\\t\\t});\\n\\t});\\n\\n\\tdisplay(ns, bestAction, newServerGain, newGain)\\n\\treturn bestAction;\\n}\\n\\n/** @param {NS} ns */\\nfunction display(ns, bestAction, newServerGain, newGain) {\\n\\tlet [action, cost, serverIndex] = bestAction;\\n\\n\\tif (action === \\\"buy\\\") {\\n\\t\\tns.tprint(`buying server for ${cost} with a gain of $${newServerGain}/sec with an ROI of ${(newServerGain/cost)*100}%`);\\n\\t\\treturn;\\n\\t}\\n\\n\\tns.tprint(`upgrading ${action} for ${cost} with a gain of $${newGain}/sec with an ROI of ${(newGain/cost)*100}%`)\\n}\\n\\n/** @param {NS} ns */\\nasync function invest(ns, budget, servers) {\\n\\twhile (true) {\\n\\t\\tlet [action, cost, serverIndex] = chooseBestInvestment(ns, servers);\\n\\t\\tif (cost > budget) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tbudget -= cost;\\n\\t\\tif (action === 'buy') {\\n\\t\\t\\tservers.push(new Server(servers.length, 1, 1, 1));\\n\\t\\t\\tns.hacknet.purchaseNode();\\n\\t\\t} else { // upgrade\\n\\t\\t\\tservers[serverIndex].upgrade(ns, action);\\n\\t\\t}\\n\\t\\tawait ns.sleep(1)\\n\\t}\\n\\n\\treturn {servers, budget};\\n}\\n\\nfunction getRamLevel(ramGB) {\\n\\treturn Math.log2(ramGB)+1\\n}\\n\\n/** @param {NS} ns */\\nfunction getServers(ns) {\\n\\tlet servers = []\\n\\tfor (var i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tlet nodeStats = ns.hacknet.getNodeStats(i)\\n\\t\\tlet server = new Server(servers.length, nodeStats.level, getRamLevel(nodeStats.ram), nodeStats.cores)\\n\\t\\tservers.push(server)\\n\\t}\\n\\t// servers.forEach(x => ns.tprint(x))\\n\\treturn servers\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length < 1) {\\n\\t\\tns.tprint(\\\"Usage: bitnet.js <budget>\\\")\\n\\t\\treturn;\\n\\t}\\n\\tlet servers = getServers(ns);\\n\\tlet budget = Number(ns.args[0]);\\n\\tlet result = await invest(ns, budget, servers);\\n\\tns.tprint(`Remaining budget: ${result.budget}`);\\n\\tresult.servers.forEach((server, i) => {\\n\\t\\tns.tprint(`Server ${i+1} stats: Level ${server.level}, RAM ${server.ram}, Core ${server.core}`);\\n\\t});\\t\\n}\",\"filename\":\"new/bitnet.js\",\"server\":\"home\"}}],[\"new/writeConst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tvar hnConst = ns.formulas.hacknetNodes.constants()\\n\\tvar hnMult = ns.getHacknetMultipliers()\\n\\t\\n\\tns.write(\\\"hnConst.js\\\", JSON.stringify(hnConst))\\n\\tns.write(\\\"hnMult.js\\\", JSON.stringify(hnMult))\\n}\",\"filename\":\"new/writeConst.js\",\"server\":\"home\"}}],[\"new/readConst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @param {NS} ns \\n * @param {string} filename\\n */\\nfunction readJson(ns, filename) {\\n\\tvar jsonStr = ns.read(filename)\\n\\treturn JSON.parse(jsonStr)\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tns.tprint(readJson(ns, \\\"hnConst.js\\\"))\\n\\tns.tprint(readJson(ns, \\\"hnMult.js\\\"))\\n}\",\"filename\":\"new/readConst.js\",\"server\":\"home\"}}],[\"new/old/cycle.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\t// simple program to get make some cash hacking a target\\n\\tns.hack(\\\"n00dles\\\")\\n}\",\"filename\":\"new/old/cycle.js\",\"server\":\"home\"}}],[\"new/old/hacknet.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n\\t// list of upgrades?\\n\\t// check all options\\n\\t// put all options in a list?\\n\\t// get the result of that option?\\n\\tlet budget = ns.args[0]\\n\\tif (ns.args.length < 1) {\\n\\t\\tns.tprintf(\\\"Usage: hacknet.js <budget>\\\\nWill spend up to <budget> on upgrading hacknet\\\")\\n\\t\\treturn\\n\\t}\\n\\n\\twhile (true) {\\n\\t\\tlet fc = populateOptions(ns)\\n\\t\\tlet op = fc.findCheapest()\\n\\t\\n\\t\\t//ns.tprintf(\\\"cheapest is %s, %s, %s\\\", op.cost, op.func, op.args)\\n\\t\\tns.tprintf(\\\"cheapest is %s, %s, %s\\\", op.cost, op.desc, op.args)\\n\\t\\tif (op.cost > budget) {\\n\\t\\t\\tns.tprintf(\\\"budget expended, $%s needed and $%s remaining\\\", op.cost, budget)\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t\\top.execute()\\n\\t\\tbudget -= op.cost\\n\\t\\tawait ns.sleep(1)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction displayStats(ns) {\\n\\tlet nodes = ns.hacknet.numNodes()\\n\\tns.tprintf(\\\"you own %s nodes\\\", nodes)\\n\\n\\tfor (var i=0; i<nodes; i++) {\\n\\t\\tlet node = ns.hacknet.getNodeStats(i)\\n\\t\\tns.tprintf(\\\"node %s: %s cores, %s lvl, %s production, %s ram\\\", i, node.cores, node.level, node.production, node.ram)\\n\\t}\\n\\n\\tlet newNodeCost = ns.hacknet.getPurchaseNodeCost()\\n\\n\\tns.tprintf(\\\"new node cost $%s\\\", newNodeCost)\\n\\tns.tprintf(\\\"upgrade cost $%s\\\", newNodeCost)\\n}\\n\\n// find the cheapest option and do that option\\nclass Option {\\n    constructor(cost, func, args, desc) {\\n        this.cost = cost\\n        this.func = func\\n        this.args = args\\n\\t\\t\\t\\tthis.desc = desc\\n    }\\n\\n    execute() {\\n        this.func(...this.args)\\n    }\\n}\\n\\n// wraps a list of Option, finds the cheapest and executes it\\nclass FindCheapest {\\n    constructor() {\\n        this.options = []\\n    }\\n\\n    add(option) {\\n        this.options.push(option)\\n    }\\n\\n    findCheapest() {\\n        return this.options.reduce((prev, curr) => prev.cost < curr.cost? prev : curr)\\n    }\\n}\\n\\n/** @param {NS} ns */\\nfunction populateOptions(ns) {\\n\\tlet fc = new FindCheapest()\\n\\tlet newNodeCost = ns.hacknet.getPurchaseNodeCost()\\n\\t\\n\\tfc.add(new Option(newNodeCost, ns.hacknet.purchaseNode, [], \\\"purchaseNode\\\"))\\n\\n\\tlet nodes = ns.hacknet.numNodes()\\n\\tfor (var i=0; i<nodes; i++) {\\n\\t\\tfc.add(\\n\\t\\t\\tnew Option(\\n\\t\\t\\t\\tns.hacknet.getLevelUpgradeCost(i),\\n\\t\\t\\t\\tns.hacknet.upgradeLevel,\\n\\t\\t\\t\\t[i],\\n\\t\\t\\t\\t\\\"upgradeLevel\\\"\\n\\t\\t\\t)\\n\\t\\t)\\n\\n\\t\\tfc.add(\\n\\t\\t\\tnew Option(\\n\\t\\t\\t\\tns.hacknet.getRamUpgradeCost(i),\\n\\t\\t\\t\\tns.hacknet.upgradeRam,\\n\\t\\t\\t\\t[i],\\n\\t\\t\\t\\t\\\"upgradeRAM\\\"\\n\\t\\t\\t)\\n\\t\\t)\\n\\n\\t\\tfc.add(\\n\\t\\t\\tnew Option(\\n\\t\\t\\t\\tns.hacknet.getCoreUpgradeCost(i),\\n\\t\\t\\t\\tns.hacknet.upgradeCore,\\n\\t\\t\\t\\t[i],\\n\\t\\t\\t\\t\\\"upgradeCore\\\"\\n\\t\\t\\t)\\n\\t\\t)\\n\\t}\\n\\treturn fc\\n}\",\"filename\":\"new/old/hacknet.js\",\"server\":\"home\"}}],[\"new/old/hnform.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// formula-based budget allocation\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tawait auto(ns)\\n}\\n\\n/** @param {NS} ns */\\nasync function auto(ns) {\\n\\tfor (let i = 0; i < 100; i++) {\\n\\t\\tlet result = highLevel(ns)\\n\\t\\tlet itRan = result.execute()\\n\\t\\tns.tprint(result)\\n\\t\\t//if (itRan === -1 || itRan === false) {\\n\\t\\t\\t//break\\n\\t\\t//}\\n\\t\\tawait ns.sleep(10)\\n\\t}\\n}\\n\\nclass Option {\\n\\tconstructor(percReturn, func, args, desc) {\\n\\t\\tthis.percReturn = percReturn\\n\\t\\tthis.func = func\\n\\t\\tthis.args = args\\n\\t\\tthis.desc = desc\\n\\t}\\n\\n\\texecute() {\\n\\t\\treturn this.func(...this.args)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction highLevel(ns) {\\n\\tlet options = []\\n\\tlet hnMult = ns.getHacknetMultipliers()\\n\\n\\toptions.push(\\n\\t\\tnew Option(\\n\\t\\t\\tnewNodePercReturn(ns, hnMult),\\n\\t\\t\\tns.hacknet.purchaseNode,\\n\\t\\t\\t[],\\n\\t\\t\\t\\\"purchaseNode\\\"\\n\\t\\t)\\n\\t)\\n\\n\\tfor (let i = 0; i < ns.hacknet.numNodes(); i++) {\\n\\t\\tlet node = ns.hacknet.getNodeStats(i)\\n\\t\\tlet baseProd = getBaseProd(ns, node, hnMult)\\n\\t\\toptions.push(\\n\\t\\t\\tnew Option(\\n\\t\\t\\t\\tgetLevelUpgradeReturn(ns, node, hnMult, baseProd),\\n\\t\\t\\t\\tns.hacknet.upgradeLevel,\\n\\t\\t\\t\\t[i],\\n\\t\\t\\t\\t\\\"upgradeLevel\\\"\\n\\t\\t\\t)\\n\\t\\t)\\n\\t\\toptions.push(\\n\\t\\t\\tnew Option(\\n\\t\\t\\t\\tgetRamUpgradeReturn(ns, node, hnMult, baseProd),\\n\\t\\t\\t\\tns.hacknet.upgradeRam,\\n\\t\\t\\t\\t[i],\\n\\t\\t\\t\\t\\\"upgradeRam\\\"\\n\\t\\t\\t)\\n\\t\\t)\\n\\t\\toptions.push(\\n\\t\\t\\tnew Option(\\n\\t\\t\\t\\tgetCoreUpgradeReturn(ns, node, hnMult, baseProd),\\n\\t\\t\\t\\tns.hacknet.upgradeCore,\\n\\t\\t\\t\\t[i],\\n\\t\\t\\t\\t\\\"upgradeCore\\\"\\n\\t\\t\\t)\\n\\t\\t)\\n\\t}\\n\\n\\tlet result = options.reduce((prev, curr) => prev > curr ? prev : curr)\\n\\treturn result\\n}\\n\\n/** */\\n/**\\n * @param {NS} ns \\n * @param {HacknetMultipliers} hnMult \\n */\\nfunction newNodePercReturn(ns, hnMult) {\\n\\tlet cost = ns.hacknet.getPurchaseNodeCost()\\n\\tlet prod = ns.formulas.hacknetNodes.moneyGainRate(1, 1, 1, hnMult.production)\\n\\treturn prod / cost\\n}\\n\\n/**\\n *  @param {NS} ns \\n *  @param {NodeStats} node \\n *  @param {HacknetMultipliers} hnMult \\n */\\nfunction getBaseProd(ns, node, hnMult) {\\n\\tlet baseProd = ns.formulas.hacknetNodes.moneyGainRate(node.level, node.ram, node.cores, hnMult.production)\\n\\treturn baseProd\\n}\\n\\n/**\\n * @param {NS} ns \\n * @param {NodeStats} node\\n * @param {HacknetMultipliers} hnMult\\n **/\\nfunction getLevelUpgradeReturn(ns, node, hnMult, baseProd) {\\n\\tlet cost = ns.formulas.hacknetNodes.levelUpgradeCost(node.level, 1, hnMult.levelCost)\\n\\tlet prod = ns.formulas.hacknetNodes.moneyGainRate(node.level + 1, node.ram, node.cores, hnMult.production)\\n\\treturn (prod - baseProd) / cost\\n}\\n\\n/**\\n * @param {NS} ns \\n * @param {NodeStats} node\\n * @param {HacknetMultipliers} hnMult\\n **/\\nfunction getRamUpgradeReturn(ns, node, hnMult, baseProd) {\\n\\tlet cost = ns.formulas.hacknetNodes.ramUpgradeCost(node.ram, 1, hnMult.ramCost)\\n\\tlet prod = ns.formulas.hacknetNodes.moneyGainRate(node.level, node.ram * 2, node.cores, hnMult.production)\\n\\treturn (prod - baseProd) / cost\\n}\\n\\n/**\\n * @param {NS} ns \\n * @param {NodeStats} node\\n * @param {HacknetMultipliers} hnMult\\n **/\\nfunction getCoreUpgradeReturn(ns, node, hnMult, baseProd) {\\n\\tlet cost = ns.formulas.hacknetNodes.coreUpgradeCost(node.cores, 1, hnMult.coreCost)\\n\\tlet prod = ns.formulas.hacknetNodes.moneyGainRate(node.level, node.ram, node.cores + 1, hnMult.production)\\n\\treturn (prod - baseProd) / cost\\n}\",\"filename\":\"new/old/hnform.js\",\"server\":\"home\"}}],[\"new/old/hnmm.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n}\",\"filename\":\"new/old/hnmm.js\",\"server\":\"home\"}}],[\"new/ns3.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport function serverCost(ns, numServers) {\\n\\tconst hnMult = ns.getHacknetMultipliers()\\n\\treturn ns.formulas.hacknetNodes.hacknetNodeCost(numServers + 1, hnMult.purchaseCost)\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeLevel(ns, numLevels) {\\n\\tconst hnMult = ns.getHacknetMultipliers()\\n\\treturn ns.formulas.hacknetNodes.levelUpgradeCost(numLevels, 1, hnMult.levelCost)\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeRam(ns, numRam) {\\n\\tconst ramGB = Math.pow(2, (numRam-1))\\n\\tconst hnMult = ns.getHacknetMultipliers()\\n\\treturn ns.formulas.hacknetNodes.ramUpgradeCost(ramGB, 1, hnMult.ramCost)\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeCore(ns, numCore) {\\n\\tconst hnMult = ns.getHacknetMultipliers()\\n\\treturn ns.formulas.hacknetNodes.coreUpgradeCost(numCore, 1, hnMult.coreCost)\\n}\\n\\n/** @param {NS} ns */\\nexport function moneyGainRate(ns, levels, ram, cores) {\\n\\tconst ramGB = Math.pow(2, (ram-1))\\n\\tconst hnMult = ns.getHacknetMultipliers()\\n\\treturn ns.formulas.hacknetNodes.moneyGainRate(levels, ramGB, cores, hnMult.production)\\n}\\n\\nfunction more(ns, servers) {\\n\\tns.tprintf(\\\"new server $%s\\\", serverCost(ns, servers))\\n}\\n\\nfunction stats(ns, levels, ram, cores) {\\n\\tns.tprintf(\\\"lvl up $%s\\\", upgradeLevel(ns, levels))\\n\\tns.tprintf(\\\"ram up $%s\\\", upgradeRam(ns, ram))\\n\\tns.tprintf(\\\"cores up $%s\\\", upgradeCore(ns, cores))\\n\\tns.tprintf(\\\"%s $/sec\\\", moneyGainRate(ns, levels, ram, cores))\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tmore(ns, 15)\\n\\tstats(ns, 3, 4, 3)\\n}\",\"filename\":\"new/ns3.js\",\"server\":\"home\"}}],[\"hnConst.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"{\\\"MoneyGainPerLevel\\\":1.5,\\\"BaseCost\\\":1000,\\\"LevelBaseCost\\\":500,\\\"RamBaseCost\\\":30000,\\\"CoreBaseCost\\\":500000,\\\"PurchaseNextMult\\\":1.85,\\\"UpgradeLevelMult\\\":1.04,\\\"UpgradeRamMult\\\":1.28,\\\"UpgradeCoreMult\\\":1.48,\\\"MaxLevel\\\":200,\\\"MaxRam\\\":64,\\\"MaxCores\\\":16}\",\"filename\":\"hnConst.js\",\"server\":\"home\"}}],[\"hnMult.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"{\\\"production\\\":3.907658646878548,\\\"purchaseCost\\\":0.4937487874718051,\\\"ramCost\\\":0.6454232515971309,\\\"coreCost\\\":0.6454232515971309,\\\"levelCost\\\":0.5486097638575612}\",\"filename\":\"hnMult.js\",\"server\":\"home\"}}],[\"new/ns4.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const SERVER_COST_MULT = 1.85;\\nconst SERVER_BASE_COST = 30000;\\nconst SERVER_MAX = 100;\\n\\nconst LEVEL_BASE_COST = 1000;\\nconst LEVEL_COST_MULT = 1.2;\\nconst LEVEL_MAX = 30;\\n\\nconst RAM_BASE_COST = 10000;\\nconst RAM_COST_MULT = 2.85;\\nconst RAM_MAX = 64;\\n\\nconst CORE_BASE_COST = 5000;\\nconst CORE_COST_MULT = 1.5;\\nconst CORE_MAX = 24;\\n\\nclass HnConst {\\n\\t/** @param {NS} ns */\\n\\tconstructor(ns) {\\n\\t\\t// this.hnConst = JSON.parse(ns.read(\\\"hnConst.json\\\"))\\n\\t\\t// this.hnMult = JSON.parse(ns.read(\\\"hnMult.json\\\"))\\n\\t\\tthis.hnConst = ns.formulas.hacknetNodes.constants()\\n\\t\\tthis.hnMult = ns.getHacknetMultipliers()\\n\\t}\\n\\n\\tserverCost(numServers) {\\n\\t\\tlet cost = this.hnConst.BaseCost * Math.pow(this.hnConst.PurchaseNextMult, numServers);\\n\\t\\treturn cost * this.hnMult.purchaseCost;\\n\\t}\\n\\t\\n\\tupgradeLevel(numLevels) {\\n\\t\\tlet cost = this.hnConst.LevelBaseCost * Math.pow(this.hnConst.UpgradeLevelMult, numLevels);\\n\\t\\treturn cost * this.hnMult.levelCost;\\n\\t}\\n\\n\\tupgradeRam(numRam) {\\n\\t\\tlet cost = this.hnConst.RamBaseCost * Math.pow(this.hnConst.UpgradeRamMult, numRam);\\n\\t\\treturn cost * this.hnMult.ramCost;\\n\\t}\\n\\n\\tupgradeCore(numCore) {\\n\\t\\tlet cost = this.hnConst.CoreBaseCost * Math.pow(this.hnConst.UpgradeCoreMult, numCore);\\n\\t\\treturn cost * this.hnMult.coreCost;\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport function serverCost(numServers) {\\n    if (numServers >= SERVER_MAX) {\\n        return Infinity;\\n    }\\n    return SERVER_BASE_COST * Math.pow(SERVER_COST_MULT, numServers);\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeLevel(numLevels) {\\n    if (numLevels >= LEVEL_MAX) {\\n        return Infinity;\\n    }\\n    return LEVEL_BASE_COST * Math.pow(LEVEL_COST_MULT, numLevels);\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeRam(numRam) {\\n    if (numRam >= RAM_MAX) {\\n        return Infinity;\\n    }\\n    return RAM_BASE_COST * Math.pow(RAM_COST_MULT, numRam);\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeCore(numCore) {\\n    if (numCore >= CORE_MAX) {\\n        return Infinity;\\n    }\\n    return CORE_BASE_COST * Math.pow(CORE_COST_MULT, numCore);\\n}\\n\\n/** @param {NS} ns */\\nexport function moneyGainRate(levels, ram, cores) {\\n    return (levels * 100 * ram * cores);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"new/ns4.js\",\"server\":\"home\"}}],[\"new/ns2.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const SERVER_COST_MULT = 1.85;\\nconst SERVER_BASE_COST = 30000;\\nconst SERVER_MAX = 100;\\n\\nconst LEVEL_BASE_COST = 1000;\\nconst LEVEL_COST_MULT = 1.2;\\nconst LEVEL_MAX = 30;\\n\\nconst RAM_BASE_COST = 10000;\\nconst RAM_COST_MULT = 2.85;\\nconst RAM_MAX = 64;\\n\\nconst CORE_BASE_COST = 5000;\\nconst CORE_COST_MULT = 1.5;\\nconst CORE_MAX = 24;\\n\\n\\n\\nclass HnConst {\\n\\t/** @param {NS} ns */\\n\\tconstructor(ns) {\\n\\t\\tif (HnConst.instance) {\\n\\t\\t\\treturn HnConst.instance;\\n\\t\\t}\\n\\t\\tthis.hnConst = ns.formulas.hacknetNodes.constants();\\n\\t\\tthis.hnMult = ns.getHacknetMultipliers();\\n\\t\\tHnConst.instance = this;\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nexport function serverCost(ns, numServers) {\\n\\tlet hn = new HnConst(ns);\\n\\tlet cost = hn.hnConst.BaseCost * Math.pow(hn.hnConst.PurchaseNextMult, numServers);\\n\\treturn cost * hn.hnMult.purchaseCost;\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeLevel(ns, numLevels) {\\n\\tlet hn = new HnConst(ns);\\n\\tlet cost = hn.hnConst.LevelBaseCost * Math.pow(hn.hnConst.UpgradeLevelMult, numLevels);\\n\\treturn cost * hn.hnMult.levelCost;\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeRam(ns, numRam) {\\n\\tlet hn = new HnConst(ns);\\n\\tlet cost = hn.hnConst.RamBaseCost * Math.pow(hn.hnConst.UpgradeRamMult, numRam);\\n\\treturn cost * hn.hnMult.ramCost;\\n}\\n\\n/** @param {NS} ns */\\nexport function upgradeCore(ns, numCore) {\\n\\tlet hn = new HnConst(ns);\\n\\tlet cost = hn.hnConst.CoreBaseCost * Math.pow(hn.hnConst.UpgradeCoreMult, numCore);\\n\\treturn cost * hn.hnMult.coreCost;\\n}\\n\\n/** @param {NS} ns */\\nexport function moneyGainRate(ns, levels, ram, cores) {\\n    return (levels * 100 * ram * cores);\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"new/ns2.js\",\"server\":\"home\"}}],[\"stats/hackStats.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0];\\n\\tlet server = ns.getServer(target);\\n\\tlet person = ns.getPlayer();\\n\\tlet obj = {}\\n\\n\\tns.tprint(server)\\n\\tobj.growPercent = ns.formulas.hacking.growPercent(server, 1, person, 1);\\n\\tobj.growTime = ns.formulas.hacking.growTime(server, person)\\n\\tobj.hackChance = ns.formulas.hacking.hackChance(server, person)\\n\\tobj.hackPercent = ns.formulas.hacking.hackPercent(server, person)\\n\\tobj.hackTime = ns.formulas.hacking.hackTime(server, person)\\n\\tobj.weakenTime = ns.formulas.hacking.weakenTime(server, person)\\n\\n\\n\\n\\tns.tprint('\\\\n')\\n\\tns.tprint(obj)\\n\\tadvanced(ns, obj)\\n}\\n\\n/** @param {NS} ns */\\nfunction advanced(ns, obj) {\\n\\tlet adv = {}\\n\\tadv.idealStartingPercent = 1 / obj.growPercent\\n\\tadv.hacksPerCycle = (1-adv.idealStartingPercent)/obj.hackPercent\\n\\tadv.growsPerCycle = 1\\n\\tadv.weakensPerCycle = (adv.hacksPerCycle*.002 + adv.growsPerCycle*.004) / .05\\n\\tadv.secondsPerCycle = obj.weakenTime\\n\\n\\tns.tprint('\\\\n')\\n\\tns.tprint(adv)\\n}\\n\\n\\n/** @param {NS} ns */\\nfunction cycle(ns) {\\n\\t// ns.tprintf(\\\"Initial\\\\t|\\\\t$%s (%s)\\\\t|\\\\t%s\\\\t|\\\\t%s|\\\\t%s\\\", 100)\\n\\n\\n\\n\\n}\\n\\n/** @param {NS} ns */\\nfunction calcGrow(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet server = ns.getServer(target)\\n\\tlet threads = Number(ns.args[1])\\n\\tlet cores = Number(ns.args[2])\\n\\tlet obj = {}\\n\\tobj.growPercent = ns.formulas.hacking.growPercent(server, threads, ns.getPlayer(), cores);\\n\\n\\tns.tprint(obj);\\n}\",\"filename\":\"stats/hackStats.js\",\"server\":\"home\"}}],[\"stats/noFormula.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet obj = basic(ns, target)\\n\\tlet rate = Number(ns.args[1])\\n\\tif (ns.args.length < 2) {\\n\\t\\trate = 1\\n\\t}\\n\\n\\tns.tprint(obj)\\n\\tsimple(ns, target)\\n\\tfor (let i = 1; i<100*rate; i+=rate){\\n\\t\\tlet adv = advanced(ns, obj, i, target)\\n\\t\\tif (adv.hacksPerCycle >= 1) {\\n\\t\\t\\t// ns.tprint(adv)\\n\\t\\t\\tns.tprintf(\\n\\t\\t\\t\\t\\\"t: %s, h|g|w: %s|%s|%s, $/t: %s, $/s: %s, $/ts: %s\\\",\\n\\t\\t\\t\\tns.formatNumber(adv.totalThreads),\\n\\t\\t\\t\\tns.formatNumber(adv.hacksPerCycle),\\n\\t\\t\\t\\tns.formatNumber(adv.growsPerCycle),\\n\\t\\t\\t\\tns.formatNumber(adv.weakensPerCycle),\\n\\t\\t\\t\\tns.formatNumber(adv.cashPerThread),\\n\\t\\t\\t\\tns.formatNumber(adv.totalCashPerSecond),\\n\\t\\t\\t\\tns.formatNumber(adv.cashPerThreadSec),\\n\\t\\t\\t)\\n\\t\\t}\\n\\t}\\n}\\n\\nexport function basic(ns, target) {\\n\\n\\tlet obj = {}\\n\\tobj.hackPercent = ns.hackAnalyze(target)\\n\\tobj.hackChance = ns.hackAnalyzeChance(target)\\n\\tobj.hackTime = ns.getHackTime(target) / 1000\\n\\tobj.hackSecurity = ns.hackAnalyzeSecurity(1, target)\\n\\n\\tobj.weakenSecurity = ns.weakenAnalyze(1)\\n\\tobj.weakenTime = ns.getWeakenTime(target) / 1000\\n\\n\\tobj.growTime = ns.getGrowTime(target) / 1000\\n\\tobj.growSecurity = ns.growthAnalyzeSecurity(1, target)\\n\\tobj.growPercent = growFactor(ns, target)\\n\\n\\tobj.target = target\\n\\n\\treturn obj\\n}\\n\\n\\n\\n/** @param {NS} ns */\\nfunction growFactor(ns, target) {\\n\\tlet growsToDouble = ns.growthAnalyze(target, 2)\\n\\treturn Math.pow(2, 1/growsToDouble)\\n}\\n\\n/** @param {NS} ns */\\nfunction simple(ns, target) {\\n\\tlet cash  = ns.getServerMoneyAvailable(target)\\n\\tlet cashMax = ns.getServerMaxMoney(target)\\n\\tlet sec = ns.getServerSecurityLevel(target)\\n\\tlet minSec = ns.getServerMinSecurityLevel(target)\\n\\n\\tns.tprintf(\\\"$%s/%s (%s), min / current = %s / %s\\\", cash, cashMax, (cash/cashMax)*100, minSec, sec)\\n}\\n\\n/** @param {NS} ns */\\nexport function advanced(ns, obj, grows) {\\n\\tlet adv = {}\\n\\tadv.idealStartingPercent = 1 / (Math.pow(obj.growPercent,grows))\\n\\tadv.hacksPerCycle = (1-adv.idealStartingPercent)/obj.hackPercent\\n\\tadv.growsPerCycle = grows\\n\\tadv.weakensPerCycle = (adv.hacksPerCycle*.002 + adv.growsPerCycle*.004) / .05\\n\\tadv.secondsPerCycle = obj.weakenTime\\n\\tadv.totalThreads = grows+adv.weakensPerCycle+adv.hacksPerCycle\\n\\tadv.percentPerThread = (1-adv.idealStartingPercent) / (adv.totalThreads)\\n\\tadv.cashPerThread = adv.percentPerThread*ns.getServerMaxMoney(obj.target)\\n\\tadv.cashPerThreadSec = adv.cashPerThread / adv.secondsPerCycle\\n\\tadv.totalCashPerCycle = adv.cashPerThread * adv.totalThreads\\n\\tadv.totalCashPerSecond = adv.totalCashPerCycle / adv.secondsPerCycle\\n\\treturn adv\\n}\",\"filename\":\"stats/noFormula.js\",\"server\":\"home\"}}],[\"basic/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\tawait ns.hack(ns.args[0])\\n\\t}\\n}\",\"filename\":\"basic/hack.js\",\"server\":\"home\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"home\"}}],[\"cycle.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length === 0) {\\n\\t\\tns.tprintf(\\\"Usage: cycle.js <target> <hackThreads> <growThreads> <weakenThreads>\\\")\\n\\t\\treturn\\n\\t}\\n\\tlet target = ns.args[0]\\n\\tlet hackThreads = Number(ns.args[1])\\n\\tlet growThreads = Number(ns.args[2])\\n\\tlet weakenThreads = Number(ns.args[3])\\n\\n\\tlet hackScript = \\\"basic/hackOnce.js\\\"\\n\\tlet growScript = \\\"basic/growOnce.js\\\"\\n\\tlet weakenScript = \\\"basic/weakenOnce.js\\\"\\n\\n\\tlet files = [hackScript, growScript, weakenScript]\\n\\tdl(ns, files, target)\\n\\n\\trunScript(ns, hackScript, target, hackThreads)\\n\\trunScript(ns, growScript, target, growThreads)\\n\\trunScript(ns, weakenScript, target, weakenThreads)\\n}\\n\\n/** @param {NS} ns */\\nfunction runScript(ns, script, target, threads) {\\n\\tif (threads === null || threads === undefined) {\\n\\t\\tns.run(script, 1, target, 1)\\n\\t}\\n\\n\\tif (threads > 0) {\\n\\t\\tns.run(script, threads, target, threads)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction dl(ns, files, target) {\\n\\tfor (let file of files) {\\n\\t\\tif (!ns.fileExists(file, target)) {\\n\\t\\t\\tns.scp(file, target)\\n\\t\\t}\\n\\t}\\n}\\n\\n\",\"filename\":\"cycle.js\",\"server\":\"home\"}}],[\"cycleCont.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet time = ns.getWeakenTime(ns.args[0])\\n\\twhile (true) {\\n\\t\\tns.run(\\\"cycle.js\\\", 1, ...ns.args)\\n\\t\\tawait ns.sleep(time + 1000)\\n\\t}\\n}\",\"filename\":\"cycleCont.js\",\"server\":\"home\"}}],[\"stats/compare.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\t// let target = ns.args[0]\\n\\tlet cores = Number(ns.args[0])\\n\\n\\tlet targets = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tlet results = getSortedResults(ns, targets)\\n\\tns.tprint(results)\\n\\n\\tfor (let result in results) {\\n\\t\\tlet stats = results[result]\\n\\t\\tlet viewModel = ns.formatNumber(stats)\\n\\t\\tns.tprintf(\\\"%s $/sec: %s\\\", result, viewModel)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction getSortedResults(ns, targets) {\\n\\n\\tlet results = {}\\n\\tfor (let target of targets) {\\n\\t\\tlet stats = getStats(ns, target)\\n\\t\\tresults[target] = stats\\n\\t}\\n\\tlet sortedKeys = Object.keys(results).sort((a, b) => results[b] - results[a]);\\n\\n\\tlet sortedObj = {};\\n\\tfor (let key of sortedKeys) {\\n\\t\\t\\tsortedObj[key] = results[key];\\n\\t}\\n\\treturn sortedObj\\n}\\n\\n/** @param {NS} ns */\\nfunction getStats(ns, target, cores) {\\n\\tlet maxC = ns.getServerMaxMoney(target)\\n\\n\\tlet growthR = growthRate(ns, target, cores)\\n\\n\\tlet time = ns.getWeakenTime(target)\\n\\n\\treturn (maxC*growthR) / time\\n\\n}\\n\\n/** @param {NS} ns */\\nfunction growthRate(ns, target, cores) {\\n\\tlet growsToDouble = ns.growthAnalyze(target, 2, cores)\\n\\treturn Math.pow(2, 1/growsToDouble)\\n}\\n\",\"filename\":\"stats/compare.js\",\"server\":\"home\"}}],[\"stats/graph.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns \\n *  @param {string} hostname\\n*/\\nexport async function getAllUniqueHosts(ns, hostname) {\\n  let queue = [hostname];\\n  let uniqueHosts = new Set();\\n\\n\\tlet hostGraph = {}\\n\\n  while (queue.length > 0) {\\n    const currentHost = queue.shift();\\n\\n    if (uniqueHosts.has(currentHost)) {\\n      continue;\\n    }\\n\\n    uniqueHosts.add(currentHost);\\n    const connectedHosts = ns.scan(currentHost);\\n\\t\\thostGraph[currentHost] = connectedHosts;\\n    queue = queue.concat(connectedHosts);\\n    await ns.sleep(5)\\n  }\\n\\n  return hostGraph\\n}\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet msg = \\\"graph TB\\\\n\\\"\\n\\tlet hostGraph = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tfor (let host in hostGraph) {\\n//\\t\\tfor (let connected of hostGraph[host]) {\\n//\\t\\t\\tmsg += `  ${host} --> ${connected}\\\\n`\\n//\\t\\t}\\n\\t\\tfor (let file of ns.ls(host)) {\\n\\t\\t\\tif (file.includes(\\\"/\\\")) {\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\t}\\n\\t\\t\\tmsg += `  ${host} --> ${file}\\\\n`\\n\\t\\t}\\n\\t}\\n\\tns.tprintf(\\\"%s\\\", msg)\\n}\",\"filename\":\"stats/graph.js\",\"server\":\"home\"}}],[\"stats/all.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\nimport {advanced, basic} from \\\"/stats/noFormula.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\n\\tlet advList = []\\n\\tfor (let target of hosts) {\\n\\t\\tlet obj = basic(ns, target)\\n\\t\\tlet adv = advanced(ns, obj, 1)\\n\\t\\tadvList.push([adv, obj])\\n\\t}\\n\\tadvList.sort((a, b) => b[0].cashPerThreadSec - a[0].cashPerThreadSec)\\n\\n\\tfor (let adv of advList) {\\n\\t\\tlet a = adv[0]\\n\\t\\tlet b = adv[1]\\n\\t\\tns.tprintf(\\\"%s: $/t: %s, $/s: %s, $/ts: %s\\\", b.target, a.cashPerThread, a.cashPerSecond, a.cashPerThreadSec)\\n\\t}\\n}\",\"filename\":\"stats/all.js\",\"server\":\"home\"}}],[\"whileCycle.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet hackThreads = Number(ns.args[1])\\n\\tlet growThreads = Number(ns.args[2])\\n\\tlet weakenThreads = Number(ns.args[3])\\n\\tlet delay = Number(ns.args[4])\\n\\n\\tlet hackScript = \\\"basic/hackOnce.js\\\"\\n\\tlet growScript = \\\"basic/growOnce.js\\\"\\n\\tlet weakenScript = \\\"basic/weakenOnce.js\\\"\\n\\n\\twhile (true) {\\n\\t\\trunScript(ns, hackScript, hackThreads, target)\\n\\t\\trunScript(ns, growScript, growThreads, target)\\n\\t\\trunScript(ns, weakenScript, weakenThreads, target)\\n\\t\\tawait ns.sleep(delay)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction runScript(ns, script, threads, target) {\\n\\tif (threads <= 0) {\\n\\t\\treturn;\\n\\t}\\n\\tns.run(script, threads, target, threads)\\n}\",\"filename\":\"whileCycle.js\",\"server\":\"home\"}}],[\"assign.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"basic/backdoor.js\\\"\\n\\nconst hackScript = \\\"basic/hackOnce.js\\\"\\nconst growScript = \\\"basic/growOnce.js\\\"\\nconst weakenScript = \\\"basic/weakenOnce.js\\\"\\nconst cycleScript = \\\"whileCycle.js\\\"\\nconst scriptCost = 1.75\\nconst cycleScriptCost = 2.6\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tlet target = ns.args[0]\\n\\tlet growPercent = Number(ns.args[1])\\n\\tlet weakenPercent = Number(ns.args[2])\\n\\t// let hackPercent = 1-(growPercent+weakenPercent)\\n\\n\\tfor (let targetHost of hosts) {\\n\\t\\tif (!ns.hasRootAccess(targetHost)) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tns.tprint(targetHost)\\n\\t\\tns.killall(targetHost, true)\\n\\t\\tcheckFiles(ns, targetHost)\\n\\t\\tawait handleServer(ns, targetHost, target, growPercent, weakenPercent)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction checkFiles(ns, targetHost) {\\n\\tns.scp(cycleScript, targetHost)\\n\\t//if (!ns.fileExists(cycleScript, targetHost)) {\\n\\t\\t// ns.scp(cycleScript, targetHost)\\n\\t// }\\n\\tif (!ns.fileExists(hackScript, targetHost)) {\\n\\t\\tns.scp(hackScript, targetHost)\\n\\t}\\n\\tif (!ns.fileExists(growScript, targetHost)) {\\n\\t\\tns.scp(growScript, targetHost)\\n\\t}\\n\\tif (!ns.fileExists(weakenScript, targetHost)) {\\n\\t\\tns.scp(weakenScript, targetHost)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nasync function handleServer(ns, targetHost, target, growPercent, weakenPercent) {\\n\\tlet distr = await getThreadDistr(ns, targetHost, growPercent, weakenPercent)\\n\\tns.tprint(distr)\\n\\tfor (let key in distr) {\\n\\t\\tns.tprintf(\\\"%s: %s\\\", key, distr[key])\\n\\t}\\n\\n\\tlet delay = ns.getWeakenTime(target) + 500\\n\\tns.exec(cycleScript, targetHost, 1, target, distr[hackScript], distr[growScript], distr[weakenScript], delay)\\n\\tns.tprintf(\\\"%s %s [%s] %s %s %s %s %s\\\", cycleScript, targetHost, 1, target, distr[hackScript], distr[growScript], distr[weakenScript], delay)\\n}\\n\\nfunction chooseScript(growPercent, weakenPercent) {\\n  const randNum = Math.random();\\n\\n  if (randNum < growPercent) {\\n    return growScript;\\n  } else if (randNum < growPercent + weakenPercent) {\\n    return weakenScript;\\n  } else {\\n    return hackScript;\\n  }\\n}\\n\\n/** @param {NS} ns */\\nasync function getThreadDistr(ns, targetHost, growPercent, weakenPercent) {\\n\\tlet ramRemaining = getRamRemaining(ns, targetHost)\\n\\tlet distr = {\\n\\t\\t[hackScript]: 0,\\n\\t\\t[growScript]: 0,\\n\\t\\t[weakenScript]: 0,\\n\\t}\\n\\n\\tlet cost = scriptCost\\n\\twhile (true) {\\n\\t\\tlet script = chooseScript(growPercent, weakenPercent)\\n\\t\\tif (cost > ramRemaining) {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t\\tdistr[script] += 1\\n\\t\\tramRemaining -= cost\\n\\t\\tawait ns.sleep(1)\\n\\t}\\n\\n\\treturn distr\\n}\\n\\n\\n/** @param {NS} ns */\\nfunction getRamRemaining(ns, targetHost) {\\n\\tlet used = ns.getServerUsedRam(targetHost)\\n\\tlet max = ns.getServerMaxRam(targetHost)\\n\\treturn max - used - cycleScriptCost\\n}\",\"filename\":\"assign.js\",\"server\":\"home\"}}],[\"stats/threads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\n\\nconst cycleScriptCost = 2.6\\nconst scriptCost = 1.75\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tlet potentialTotal = 0\\n\\tlet realTotal = 0\\n\\tlet total = 0\\n\\n\\tfor (let host of hosts) {\\n\\t\\tif (!ns.hasRootAccess(host)) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tconst maxRam = ns.getServerMaxRam(host)\\n\\t\\tlet freeRam = maxRam - ns.getServerUsedRam(host)\\n\\t\\tpotentialTotal += maxRam\\n\\t\\trealTotal += freeRam\\n\\t\\ttotal += (freeRam - cycleScriptCost)\\n\\t}\\n\\n\\tns.tprintf(\\\"Potential RAM: %s\\\\nPotential Threads: %s\\\", ns.formatRam(potentialTotal), ns.formatNumber(potentialTotal/scriptCost))\\n\\tns.tprintf(\\\"Total RAM: %s\\\\nTotal Threads: %s\\\", ns.formatRam(realTotal), ns.formatNumber(realTotal/scriptCost))\\n\\tns.tprintf(\\\"Effective RAM: %s\\\\nEffective Threads: %s\\\", ns.formatRam(total), ns.formatNumber(total/scriptCost))\\n}\",\"filename\":\"stats/threads.js\",\"server\":\"home\"}}],[\"new/clearSec.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\n\\nconst weakenScript = \\\"/basic/weakenOnce.js\\\"\\nconst weakenScriptCost = 1.75\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tlet arg = ns.args[0]\\n\\tlet obj = getWeakens(ns, hosts)\\n\\tns.print(obj)\\n\\twhile (true) {\\n\\t\\tqueueWeakens(ns, hosts, obj)\\n\\t\\tif (arg !== \\\"repeat\\\") {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t\\tawait ns.sleep(10000)\\n\\t}\\n}\\n\\n\\n/** @param {NS} ns */\\nfunction getWeakens(ns, hosts) {\\n\\tlet weakensToQueue = {}\\n\\n\\t// drop protection of each target as much as possible\\n\\t// only if it has prot\\n\\tfor (let host of hosts) {\\n\\t\\tlet server = ns.getServer(host)\\n\\t\\tif (!isTarget(server)) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\tconst difficultyDrop = server.hackDifficulty - server.minDifficulty\\n\\t\\tweakensToQueue[server.hostname] = Math.ceil( difficultyDrop / .05)\\n\\t}\\n\\treturn weakensToQueue\\n}\\n\\n/** @param {NS} ns */\\nfunction queueWeakens(ns, hosts, weakensToQueue) {\\n\\tfor (const target in weakensToQueue) {\\n\\t\\t// ns.printf(\\\"queueUp %s %s\\\", weakens, target)\\n\\t\\tqueueUp(ns, hosts, weakensToQueue, target)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction queueUp(ns, hosts, weakensToQueue, target) {\\n\\tfor (let host of hosts) {\\n\\t\\tlet server = ns.getServer(host)\\n\\n\\t\\tif (!server.hasAdminRights) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\tconst threadsAvailable = howManyThreads(server)\\n\\t\\tconst threads = Math.min(weakensToQueue[target], threadsAvailable)\\n\\t\\tif (threads <= 0) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\t// ns.printf(\\\"weakenOnce %s %s %s\\\", host, target, threads)\\n\\t\\tweakenOnce(ns, host, target, threads)\\n\\t\\tweakensToQueue[target] -= threads\\n\\t\\tif (weakensToQueue[target] <= 0) {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction install(ns, host) {\\n\\tif (!ns.fileExists(weakenScript, host)) {\\n\\t\\tns.scp(weakenScript, host)\\n\\t}\\n}\\n\\n/** @param {NS} ns */\\nfunction weakenOnce(ns, host, target, threads) {\\n\\tinstall(ns, host)\\n\\tns.exec(weakenScript, host, threads, target, threads)\\n}\\n\\n/** @param {Server} server */\\nfunction howManyThreads(server) {\\n\\tconst ramFree = server.maxRam - server.ramUsed\\n\\tconst runThisMany = Math.floor(ramFree / weakenScriptCost)\\n\\treturn runThisMany\\n}\\n\\n/** @param {Server} server */\\nfunction isTarget(server) {\\n\\treturn server.hasAdminRights && !server.purchasedByPlayer && server.hostname !== \\\"home\\\"\\n}\",\"filename\":\"new/clearSec.js\",\"server\":\"home\"}}],[\"oneCycle.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"basic/backdoor.js\\\"\\nconst hackScript = \\\"/basic/hackOnce.js\\\"\\nconst growScript = \\\"/basic/growOnce.js\\\"\\nconst weakenScript = \\\"/basic/weakenOnce.js\\\"\\n\\nconst hackScriptCost = 1.7\\nconst growScriptCost = 1.75\\nconst weakenScriptCost = 1.75\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length !== 4) {\\n\\t\\tns.tprintf(\\\"Usage: oneCycle.js <target> <hackThreads> <growThreads> <weakenThreads>\\\")\\n\\t\\treturn\\n\\t}\\n\\tconst target = ns.args[0]\\n\\tconst hackThreads = ns.args[1]\\n\\tconst growThreads = ns.args[2]\\n\\tconst weakenThreads = ns.args[3]\\n\\n\\tconst hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\t// assign the cycle to computers\\n\\twhile (true) {\\n\\t\\tconst queue = getQueue(hackThreads, growThreads, weakenThreads)\\n\\t\\tcycle(ns, target, hosts, queue)\\n\\t\\tconst delay = ns.getWeakenTime(target)\\n\\t\\tawait ns.sleep(delay + 500)\\n\\t}\\n}\\n\\n/** \\n * @param {NS} ns\\n * @param {string} host\\n * @param {string} script\\n */\\nfunction install(ns, host, script) {\\n\\tlet scriptExists = true\\n\\tscriptExists = ns.fileExists(script, host)\\n\\tif (!scriptExists) {\\n\\t\\tns.scp(script, host)\\n\\t}\\n}\\n\\n/** \\n * @param {number} hackThreads\\n * @param {number} growThreads\\n * @param {number} weakenThreads\\n */\\nfunction getQueue(hackThreads, growThreads, weakenThreads) {\\n\\treturn [\\n\\t\\t[hackScript, hackThreads, hackScriptCost],\\n\\t\\t[growScript, growThreads, growScriptCost],\\n\\t\\t[weakenScript, weakenThreads,\\tweakenScriptCost],\\n\\t]\\n}\\n\\n/** \\n * @param {NS} ns\\n * @param {string} target\\n * @param {string[]} hosts\\n * @param {number[][]} queue\\n */\\nfunction cycle(ns, target, hosts, queue) {\\n\\twhile (queue.length > 0) {\\n\\t\\tlet [script, threads, cost] = queue.pop()\\n\\t\\tassign(ns, hosts, target, script, threads, cost)\\n\\t}\\n}\\n\\n\\n\\n/** \\n * @param {NS} ns\\n * @param {string[]} hosts\\n * @param {string} script\\n * @param {number} threads\\n * @param {number} cost\\n */\\nfunction assign(ns, hosts, target, script, threads, cost) {\\n\\tlet remaining = threads\\n\\n\\tfor (let i = hosts.length - 1; i > -1; i--) {\\n\\t\\tconst host = hosts[i]\\n\\t\\tif (!ns.hasRootAccess(host)) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tconst freeRam = ns.getServerMaxRam(host) - ns.getServerUsedRam(host)\\n\\t\\tconst timesAble = Math.floor(freeRam / cost)\\n\\t\\tconst times = Math.min(timesAble, remaining)\\n\\t\\tif (times < 1) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tns.tprintf(\\\"runScript %s %s %s %s\\\", script, host, target, times)\\n\\t\\trunScript(ns, script, host, target, times)\\n\\t\\tremaining -= times\\n\\t\\tif (remaining < 1) {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t}\\n}\\n\\n\\n/** \\n * @param {NS} ns\\n * @param {string} host\\n * @param {string} script\\n * @param {number} threads\\n */\\nfunction runScript(ns, script, host, target, threads) {\\n\\tinstall(ns, host, script)\\n\\tns.exec(script, host, threads, target, threads)\\n}\",\"filename\":\"oneCycle.js\",\"server\":\"home\"}}],[\"install.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length === 0) {\\n\\t\\tns.tprintf(\\\"install a script onto all rooted computers\\\\nUsage: install.js <script>\\\")\\n\\t\\treturn\\n\\t}\\n\\tlet script = ns.args[0]\\n\\tlet hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tfor (let host of hosts) {\\n\\t\\tif (!ns.hasRootAccess(host)) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tinstall(ns, host, script)\\n\\t}\\n}\\n\\n/** \\n * @param {NS} ns\\n * @param {string} host\\n * @param {string} script\\n */\\nfunction install(ns, host, script) {\\n\\tif (!ns.fileExists(script, host)) {\\n\\t\\tns.scp(script, host)\\n\\t}\\n}\\n\",\"filename\":\"install.js\",\"server\":\"home\"}}],[\"stats/threadDistr.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length < 2) {\\n\\t\\tns.tprintf(\\\"Usage: threadDistr.js <target> <targetThreads> [growMultiplier] [weakenMultiplier]\\\")\\n\\t\\treturn\\n\\t}\\n\\tconst target = ns.args[0]\\n\\t// const startingCashDecimal = ns.args[1]\\n\\tconst targetThreads = Number(ns.args[1])\\n\\tlet growMultiplier = ns.args[2]\\n\\tlet weakenMultiplier = ns.args[3]\\n\\n\\tif (growMultiplier === undefined) {\\n\\t\\tgrowMultiplier = 1\\n\\t}\\n\\tif (weakenMultiplier === undefined) {\\n\\t\\tweakenMultiplier = 1\\n\\t}\\n\\n\\t// const grows = getGrowThreads(ns, target, startingCashDecimal, growMultiplier)\\n\\t// const [hacks, successHacks] = getHackThreads(ns, target, startingCashDecimal)\\n\\t// const weakens = getWeakenThreads(successHacks, grows, weakenMultiplier)\\n\\n\\tawait binSearch(ns, targetThreads, target, growMultiplier, weakenMultiplier)\\n\\t// const [threadsReq, hacks, grows, weakens] = getThreadsForStartingDecimal(ns, startingCashDecimal, target, growMultiplier, weakenMultiplier)\\n}\\n\\n/** \\n * @param {NS} ns \\n * @param {number} targetThreads \\n * @return {number} startingCashDecimal\\n */\\nasync function binSearch(ns, targetThreads, target, growMultiplier, weakenMultiplier) {\\n\\tconst accuracy = 100000\\n\\tlet l = 0\\n\\tlet r = accuracy\\n\\n\\n\\twhile (l <= r) {\\n\\t\\tconst m = (l + r) / 2;\\n\\t\\t// ns.tprintf(\\\"l: %s, r: %s, m: %s\\\", l, r, m)\\n\\t\\tconst startingCashDecimal = m/accuracy\\n\\t\\tconst [threadsReq, hacks, grows, weakens] = getThreadsForStartingDecimal(ns, startingCashDecimal, target, growMultiplier, weakenMultiplier)\\n\\t\\tns.tprintf(\\\"startingCashDecimal: %s => %s threads\\\", startingCashDecimal, threadsReq)\\n\\t\\tif (threadsReq === targetThreads) {\\n\\t\\t\\tprintStats(ns, target, startingCashDecimal, grows, hacks, weakens)\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (threadsReq > targetThreads) {\\n\\t\\t\\tl = m + 1\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tr = m - 1\\n\\t\\t}\\n\\t\\tawait ns.sleep(10)\\n\\t}\\n\\n\\t// too many threads required?\\n\\t// .95\\n\\t//\\n\\n\\t\\n}\\n\\n/** \\n * @param {NS} ns \\n * @param {number} startingCashDecimal \\n * @param {number} growMultiplier \\n * @param {number} weakenMultiplier \\n * @return {number[]} total, hacks, grows, weakens\\n */\\nfunction getThreadsForStartingDecimal(ns, startingCashDecimal, target, growMultiplier, weakenMultiplier) {\\n\\n\\tconst grows = getGrowThreads(ns, target, startingCashDecimal, growMultiplier)\\n\\tconst [hacks, successHacks] = getHackThreads(ns, target, startingCashDecimal)\\n\\tconst weakens = getWeakenThreads(successHacks, grows, weakenMultiplier)\\n\\n\\tconst total = grows + hacks + weakens\\n\\n\\treturn [total, hacks, grows, weakens]\\n}\\n\\n/** \\n * @param {NS} ns \\n * @param {string} target \\n * @param {number} startingCashDecimal \\n * @param {number} grows \\n * @param {number} hacks \\n * @param {number} weakens \\n */\\nfunction printStats(ns, target, startingCashDecimal, grows, hacks, weakens) {\\n\\n\\tconst total = grows + hacks + weakens\\n\\tconst cashPerCycle = ns.getServerMaxMoney(target) * (1-startingCashDecimal)\\n\\tconst cycleSecs = ns.getWeakenTime(target) / 1000\\n\\n\\tconst cashPerSec = cashPerCycle / cycleSecs\\n\\tconst cashPerThreadSec = cashPerSec / total\\n\\n\\n\\tns.tprintf(\\n\\t\\t\\\"t: %s, h|g|w: %s|%s|%s, $/s: $%s, $/ts: $%s\\\",\\n\\t\\tns.formatNumber(total),\\n\\t\\tns.formatNumber(hacks),\\n\\t\\tns.formatNumber(grows),\\n\\t\\tns.formatNumber(weakens),\\n\\t\\tns.formatNumber(cashPerSec),\\n\\t\\tns.formatNumber(cashPerThreadSec)\\n\\t)\\n}\\n\\n/** \\n * @param {number} successHacks \\n * @param {number} grows \\n * @param {number} weakenMultiplier \\n * @return {number}\\n */\\nfunction getWeakenThreads(successHacks, grows, weakenMultiplier) {\\n\\tlet baseWeakens = (successHacks * .002 + grows * .004) / .05\\n\\treturn Math.ceil(baseWeakens * weakenMultiplier)\\n}\\n\\n/** \\n * @param {NS} ns \\n * @param {string} target \\n * @param {number} startingCashDecimal \\n * @param {number} growMultiplier \\n * @return {number}\\n */\\nfunction getGrowThreads(ns, target, startingCashDecimal, growMultiplier) {\\n\\tlet baseGrows = ns.growthAnalyze(target, (1/startingCashDecimal))\\n\\treturn Math.ceil(baseGrows * growMultiplier)\\n}\\n\\n/** \\n * @param {NS} ns \\n * @param {string} target \\n * @param {number} startingCashDecimal \\n * @return {number[]}\\n */\\nfunction getHackThreads(ns, target, startingCashDecimal) {\\n\\tconst chance = ns.hackAnalyzeChance(target)\\n\\tconst percentPerHack = ns.hackAnalyze(target)\\n\\tconst percentToSteal = 1-startingCashDecimal\\n\\tconst hacks = percentToSteal/percentPerHack\\n\\tconst hackThreads = hacks/chance\\n\\treturn [Math.floor(hackThreads), Math.floor(hacks)]\\n}\\n\",\"filename\":\"stats/threadDistr.js\",\"server\":\"home\"}}],[\"killall.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tfor (let host of hosts) {\\n\\t\\tns.killall(host, true)\\n\\t}\\n}\",\"filename\":\"killall.js\",\"server\":\"home\"}}],[\"stats/ng.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst baseCost = Number(ns.args[0])\\n\\tconst mult = Number(ns.args[1])\\n\\tconst times = Number(ns.args[2])\\n\\tconst inc = Number(ns.args[3])\\n\\t// inc is how much price goes up regardless of mult\\n\\t// ex: 1.2 is 20% increase in price before mult\\n\\n\\tif (ns.args.length !== 4) {\\n\\t\\tns.tprintf(\\\"Usage: ng.js <baseCost> <mult> <times> <inc>\\\")\\n\\t\\treturn\\n\\t}\\n\\n\\tlet sum = 0\\n\\tfor (let i = 0; i < times; i++) {\\n\\t\\tsum += (baseCost*Math.pow(inc, i))*Math.pow(mult, i)\\n\\t}\\n\\tns.tprintf(\\\"$%s\\\", ns.formatNumber(sum))\\n}\",\"filename\":\"stats/ng.js\",\"server\":\"home\"}}],[\"stats/growThreads.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length !== 1) {\\n\\t\\tns.tprintf(\\\"Usage: growThreads.js <threadsAvailable>\\\")\\n\\t\\treturn\\n\\t}\\n\\tconst total = Number(ns.args[0])\\n\\n\\t// y = (x*.004)/.05\\n\\t// x + y = total\\n\\n\\t// x = total - y\\n\\n\\t// y = (total-y)*(.004 / .05)\\n\\n\\t// growThreads = y+(.004/.05)*y = (.004/.05)*total\\n\\n\\t// y(1 + (.004/.05)) = (.004/.05) * total\\n\\n\\tlet weakenThreads = ((.004/.05) * total) / (1 + (.004/.05))\\n\\tlet growThreads = total - weakenThreads\\n\\n\\tweakenThreads = Math.ceil(weakenThreads)\\n\\tgrowThreads = Math.floor(growThreads)\\n\\n\\tns.tprintf(\\\"T: %s, G|W: %s|%s\\\", total, growThreads, weakenThreads)\\n}\",\"filename\":\"stats/growThreads.js\",\"server\":\"home\"}}],[\"oneCycleAuto.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import { getAllUniqueHosts } from \\\"basic/backdoor.js\\\"\\nconst hackScript = \\\"/basic/hackOnce.js\\\"\\nconst growScript = \\\"/basic/growOnce.js\\\"\\nconst weakenScript = \\\"/basic/weakenOnce.js\\\"\\n\\nconst hackScriptCost = 1.7\\nconst growScriptCost = 1.75\\nconst weakenScriptCost = 1.75\\n\\nconst hackSuccessEffect = 0.002\\nconst growEffect = 0.004\\nconst weakenEffect = 0.05\\n\\nconst addedDelay = 500\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length !== 4) {\\n\\t\\tns.tprintf(\\\"Usage: oneCycleAuto.js <target> <hackThreads> <growThreads> <weakenThreads>\\\")\\n\\t\\treturn\\n\\t}\\n\\tconst target = ns.args[0]\\n\\tconst hackThreads = ns.args[1]\\n\\tconst growThreads = ns.args[2]\\n\\tconst weakenThreads = ns.args[3]\\n\\tconst totalThreads = hackThreads + growThreads + weakenThreads\\n\\n\\tconst hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\t// assign the cycle to computers\\n\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > ns.getServerMinSecurityLevel(target)) {\\n\\t\\t\\tawait weakenHost(ns, hosts, target, totalThreads)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tif ((ns.getServerMoneyAvailable(target)/ns.getServerMaxMoney(target)) <= .85) {\\n\\t\\t\\tawait growHost(ns, hosts, target, totalThreads)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tawait hackHost(ns, hosts, target, hackThreads, growThreads, weakenThreads)\\n\\t}\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string[]} hosts\\n * @param {string} target\\n * @param {number} hackThreads\\n * @param {number} growThreads\\n * @param {number} weakenThreads\\n */\\nasync function hackHost(ns, hosts, target, hackThreads, growThreads, weakenThreads) {\\n\\tconst queue = getQueue(hackThreads, growThreads, weakenThreads)\\n\\tcycle(ns, target, hosts, queue)\\n\\tconst delay = ns.getWeakenTime(target)\\n\\tawait ns.sleep(delay + addedDelay)\\n}\\n\\n/** \\n * @param {NS} ns\\n * @param {string} host\\n * @param {string} script\\n * @param {number} maxThreads\\n */\\nasync function weakenHost(ns, hosts, target, maxThreads) {\\n\\tconst secDiff = ns.getServerSecurityLevel(target) - ns.getServerMinSecurityLevel(target)\\n\\tif (secDiff <= 0) {\\n\\t\\treturn\\n\\t}\\n\\tlet remaining = Math.ceil(secDiff / weakenEffect)\\n\\n\\twhile (remaining > 0) {\\n\\t\\tconst threads = Math.min(remaining, maxThreads)\\n\\t\\tassign(ns, hosts, target, weakenScript, threads, weakenScriptCost)\\n\\t\\tconst delay = ns.getWeakenTime(target) + addedDelay\\n\\t\\tawait ns.sleep(delay)\\n\\t\\tremaining -= threads\\n\\t}\\n}\\n\\n/** \\n * @param {NS} ns\\n * @param {string} target\\n */\\nfunction getGrowsRemaining(ns, target) {\\n\\tconst growFactor = ns.getServerMaxMoney(target) / ns.getServerMoneyAvailable(target)\\n\\tconst growThreads = ns.growthAnalyze(target, growFactor)\\n\\n\\tconst growsRemaining = Math.ceil(growThreads)\\n\\n\\treturn growsRemaining\\n}\\n\\n/** \\n * @param {NS} ns\\n * @param {string} host\\n * @param {string} target\\n * @param {number} maxThreads\\n */\\nasync function growHost(ns, hosts, target, maxThreads) {\\n\\n\\tlet growsRemaining = getGrowsRemaining(ns, target)\\n\\n\\tconst weakenThreads = Math.ceil(((growEffect / weakenEffect) * maxThreads) / (1 + (growEffect / weakenEffect)))\\n\\tconst growThreads = maxThreads - weakenThreads\\n\\n\\twhile (growsRemaining > 0) {\\n\\n\\t\\tassign(ns, hosts, target, weakenScript, weakenThreads, weakenScriptCost)\\n\\t\\tassign(ns, hosts, target, growScript, growThreads, growScriptCost)\\n\\t\\tconst delay = ns.getWeakenTime(target) + addedDelay\\n\\t\\tawait ns.sleep(delay)\\n\\t\\tgrowsRemaining -= growThreads\\n\\t}\\n}\\n\\n/** \\n * @param {NS} ns\\n * @param {string} host\\n * @param {string} script\\n */\\nfunction install(ns, host, script) {\\n\\tlet scriptExists = true\\n\\tscriptExists = ns.fileExists(script, host)\\n\\tif (!scriptExists) {\\n\\t\\tns.scp(script, host)\\n\\t}\\n}\\n\\n/** \\n * @param {number} hackThreads\\n * @param {number} growThreads\\n * @param {number} weakenThreads\\n */\\nfunction getQueue(hackThreads, growThreads, weakenThreads) {\\n\\treturn [\\n\\t\\t[hackScript, hackThreads, hackScriptCost],\\n\\t\\t[growScript, growThreads, growScriptCost],\\n\\t\\t[weakenScript, weakenThreads, weakenScriptCost],\\n\\t]\\n}\\n\\n/** \\n * @param {NS} ns\\n * @param {string} target\\n * @param {string[]} hosts\\n * @param {number[][]} queue\\n */\\nfunction cycle(ns, target, hosts, queue) {\\n\\twhile (queue.length > 0) {\\n\\t\\tlet [script, threads, cost] = queue.pop()\\n\\t\\tassign(ns, hosts, target, script, threads, cost)\\n\\t}\\n}\\n\\n\\n\\n/** \\n * @param {NS} ns\\n * @param {string[]} hosts\\n * @param {string} script\\n * @param {number} threads\\n * @param {number} cost\\n */\\nfunction assign(ns, hosts, target, script, threads, cost) {\\n\\tlet remaining = threads\\n\\n\\tfor (let i = hosts.length - 1; i > -1; i--) {\\n\\t\\tconst host = hosts[i]\\n\\t\\tif (!ns.hasRootAccess(host)) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tconst freeRam = ns.getServerMaxRam(host) - ns.getServerUsedRam(host)\\n\\t\\tconst timesAble = Math.floor(freeRam / cost)\\n\\t\\tconst times = Math.min(timesAble, remaining)\\n\\t\\tif (times < 1) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tns.printf(\\\"runScript %s %s %s %s\\\", script, host, target, times)\\n\\t\\trunScript(ns, script, host, target, times)\\n\\t\\tremaining -= times\\n\\t\\tif (remaining < 1) {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t}\\n}\\n\\n\\n/** \\n * @param {NS} ns\\n * @param {string} host\\n * @param {string} script\\n * @param {number} threads\\n */\\nfunction runScript(ns, script, host, target, threads) {\\n\\tinstall(ns, host, script)\\n\\tns.exec(script, host, threads, target, threads)\\n}\",\"filename\":\"oneCycleAuto.js\",\"server\":\"home\"}}],[\"stats/info.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {getAllUniqueHosts} from \\\"/basic/backdoor.js\\\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst hosts = await getAllUniqueHosts(ns, ns.getHostname())\\n\\tconst servers = []\\n\\tfor (const host of hosts) {\\n\\t\\tconst server = ns.getServer(host)\\n\\t\\tif (!server.hasAdminRights) {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\t\\tserver.percentPerGrow = growStats(ns, server)\\n\\t\\tserver.cashPerGrow = (server.percentPerGrow * server.moneyMax) - server.moneyMax\\n\\t\\tserver.potentialCashPerGrow = server.moneyMax*(server.serverGrowth/100000)\\n\\t\\tserver.cashPerGrowPerSecond = server.cashPerGrow / ns.getGrowTime(host)\\n\\t\\tserver.potentialCashPerGrowPerSecond = server.potentialCashPerGrow / ns.getGrowTime(host)\\n\\t\\tservers.push(server)\\n\\t}\\n\\n\\tservers.sort((a, b) => a.potentialCashPerGrowPerSecond - b.potentialCashPerGrowPerSecond)\\n\\n\\tfor (const server of servers) {\\n\\t\\tprintMoney(ns, server)\\n\\t}\\n}\\n\\n/** \\n * @param {NS} ns \\n * @param {Server} server \\n */\\nfunction growStats(ns, server) {\\n\\tconst grows = ns.growthAnalyze(server.hostname, 2)\\n\\tconst percentPerGrow = Math.pow(2, 1/grows)\\n\\treturn percentPerGrow\\n}\\n\\n/** \\n * @param {NS} ns \\n * @param {Server} server \\n */\\nfunction printMoney(ns, server) {\\n\\tns.tprintf(\\\"%s\\\", server.hostname)\\n\\tns.tprintf(\\\"  maxMoney: $%s\\\", ns.formatNumber(server.moneyMax))\\n\\tns.tprintf(\\\"  serverGrowth: %s\\\", server.serverGrowth)\\n\\tns.tprintf(\\\"  percentPerGrow: %s\\\", ns.formatPercent((server.percentPerGrow-1)*100))\\n\\tns.tprintf(\\\"  cashPerGrow: $%s\\\", ns.formatNumber(server.cashPerGrow))\\n\\tns.tprintf(\\\"  potentialCashPerGrow: $%s\\\", ns.formatNumber(server.potentialCashPerGrow))\\n\\tns.tprintf(\\\"  cashPerGrowPerSecond: $%s\\\", ns.formatNumber(server.cashPerGrowPerSecond))\\n\\tns.tprintf(\\\"  potentialCashPerGrowPerSecond: $%s\\\", ns.formatNumber(server.potentialCashPerGrowPerSecond))\\n\\n}\\n\\n/** \\n * @param {NS} ns \\n * @param {Server} server \\n */\\nfunction printServer(ns, server) {\\n\\tns.tprintf(\\\"%s\\\", host)\\n\\tfor (let key in server) {\\n\\t\\tns.tprintf(\\\"  %s: %s\\\", key, server[key])\\n\\t}\\n\\tns.tprintf(\\\"\\\\n\\\")\\n}\",\"filename\":\"stats/info.js\",\"server\":\"home\"}}],[\"contracts/lempelziv.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// const msg = \\\"5aaabb450723abb\\\"\\r\\n\\r\\nclass Parser {\\r\\n    /**\\r\\n     * @param {string} msg \\r\\n     */\\r\\n    constructor(msg) {\\r\\n        this.msg = msg\\r\\n        this.mode = 0\\r\\n        this.i = 0\\r\\n        this.result = \\\"\\\"\\r\\n    }\\r\\n\\r\\n    alternate() {\\r\\n        this.mode += 1\\r\\n        this.mode %= 2\\r\\n    }\\r\\n\\r\\n    process() {\\r\\n        if (this.mode === 0) {\\r\\n            this.process0()\\r\\n        }\\r\\n        else {\\r\\n            this.process1()\\r\\n        }\\r\\n        this.alternate()\\r\\n    }\\r\\n    process1() {\\r\\n        const lchars = Number(this.msg[this.i])\\r\\n        if (lchars === 0) {\\r\\n            this.i += 1\\r\\n            return\\r\\n        }\\r\\n        const xback = Number(this.msg[this.i+1])\\r\\n        const clip = this.result.substring(this.result.length-xback)\\r\\n        const repeated = this.getCharsFrom(clip, lchars)\\r\\n        \\r\\n        this.result += repeated\\r\\n        this.i += 2\\r\\n    }\\r\\n\\r\\n    process0() {\\r\\n        const lchars = Number(this.msg[this.i])\\r\\n        if (lchars === 0) {\\r\\n            this.i += 1\\r\\n            return\\r\\n        }\\r\\n        \\r\\n        this.result += this.msg.substring(this.i+1, this.i+lchars+1)\\r\\n        this.i += lchars+1\\r\\n    }\\r\\n    /**\\r\\n     * @param {string} clip \\r\\n     * @param {number} amount \\r\\n     * @return {string}\\r\\n     */\\r\\n    getCharsFrom(clip, amount) {\\r\\n        let res = \\\"\\\"\\r\\n        for (let i = 0; i < amount; i++) {\\r\\n            res += clip[i%clip.length]\\r\\n        }\\r\\n        return res\\r\\n    }\\r\\n\\r\\n    run(print) {\\r\\n        while (this.i < this.msg.length) {\\r\\n            this.process()\\r\\n            print(this)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\t// const msg = \\\"8mP27BoOI558OI47rzKG256VwlVwl681d7974sJnwZ6419XyZcqv1w509N4r51w5563161AkBHz56\\\"\\r\\n\\tconst msg = ns.args[0]\\r\\n\\tconst parser = new Parser(msg)\\r\\n\\tparser.run(ns.tprint)\\r\\n}\",\"filename\":\"contracts/lempelziv.js\",\"server\":\"home\"}}],[\"contracts/waysToSum.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst numbers = [2,3,4,7,8,9,13,14,15,17,19]\\n\\tconst target = 131\\n\\tconst res = recurse(ns, 0, numbers, [], target)\\n\\tns.tprintf(\\\"res: %s\\\", res)\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {number} i\\n * @param {number[]} numbers\\n * @param {number[]} choices\\n */\\nfunction recurse(ns, i, numbers, choices, target) {\\n\\tns.tprintf(\\\"recurse <%s> <%s> <%s> <%s>\\\", i, numbers, choices, target)\\n\\tconst total = choices.reduce((prev, curr) => prev + curr, 0)\\n\\tif (total === target) {\\n\\t\\treturn choices\\n\\t}\\n\\tif (total > target) {\\n\\t\\treturn\\n\\t}\\n\\tif (i >= numbers.length - 1) {\\n\\t\\treturn\\n\\t}\\n\\n\\tchoices.push(numbers[i])\\n\\tconst val = recurse(ns, i, numbers, choices)\\n\\tchoices.pop()\\n\\tconst val2 = recurse(ns, i+1, numbers, choices)\\n\\n\\tif (val) {\\n\\t\\treturn val\\n\\t}\\n\\n\\tif (val2) {\\n\\t\\treturn val2\\n\\t}\\n}\",\"filename\":\"contracts/waysToSum.js\",\"server\":\"home\"}}],[\"contracts/stockTrader.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"class Option {\\r\\n    None = 0;\\r\\n    Buy = 1;\\r\\n    Sell = 2;\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @param {NS} ns \\r\\n */\\r\\nexport async function main(ns) {\\r\\n    //const prices = [195, 104, 190, 61, 59, 27, 56]\\r\\n\\t\\t//const prices = ns.args.map(x => Number(x))\\r\\n\\t\\tconst prices = ns.args[0].split(',').map(x => Number(x))\\r\\n\\t\\tns.tprint(prices)\\r\\n\\r\\n    // split into sections\\r\\n\\r\\n    // buy or sell or none?\\r\\n    // buy or sell or none?\\r\\n\\r\\n    // const result = recurse(Option.Buy, prices)\\r\\n    \\r\\n    let profit = 0\\r\\n    let trend = \\\"down\\\"\\r\\n    let stockOwned = -1\\r\\n    for (let i = 0; i < prices.length; i++) {\\r\\n        let diff = prices[i+1] - prices[i]\\r\\n        if (diff > 0) {\\r\\n            if (trend == \\\"down\\\") {\\r\\n                ns.tprint(`BOUGHT ${prices[i]}`)\\r\\n                stockOwned = i\\r\\n            }\\r\\n            trend = \\\"up\\\"\\r\\n        }\\r\\n        else {\\r\\n            if (trend == \\\"up\\\") {\\r\\n                if (stockOwned !== -1) {\\r\\n                    profit += prices[i] - prices[stockOwned]\\r\\n                    ns.tprint(`SOLD ${prices[stockOwned]} for ${prices[i]}`)\\r\\n                    ns.tprint(`Profit: ${profit}`)\\r\\n                    stockOwned = -1\\r\\n                }\\r\\n            }\\r\\n            trend = \\\"down\\\"\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction recurse(option, remaining) {\\r\\n    \\r\\n}\\r\\n\\r\\n// main(new NS())\",\"filename\":\"contracts/stockTrader.js\",\"server\":\"home\"}}],[\"auctionSniper.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tif (ns.args.length !== 2) {\\n\\t\\tns.tprintf(\\\"Usage: auctionSniper.js <target> <$invest>\\\")\\n\\t\\treturn\\n\\t}\\n\\tlet stock = ns.args[0]\\n\\tlet investment = Number(ns.args[1])\\n\\tbuy(ns, stock, investment)\\n\\tawait hodl(ns, stock)\\n\\tconst logs = ns.getScriptLogs()\\n\\tlog(ns, logs.join(\\\"\\\\n\\\"))\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} stock\\n * @param {number} investment\\n */\\nfunction buy(ns, stock, investment) {\\n\\tconst cost = ns.stock.getPrice(stock)\\n\\tconst idealAmount = Math.floor(investment / cost)\\n\\tconst maxShares = ns.stock.getMaxShares(stock)\\n\\tconst amount = Math.min(idealAmount, maxShares)\\n\\tconst price = ns.stock.buyStock(stock, amount)\\n\\tns.printf(\\\"bought %s of %s at $%s for $%s\\\", ns.formatNumber(amount), stock, ns.formatNumber(price), ns.formatNumber(price*amount))\\n\\treturn price\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} stock\\n * @param {number} price\\n */\\nasync function hodl(ns, stock) {\\n\\tconst [shares, price, shorts, shortPrice] = ns.stock.getPosition(stock)\\n\\t\\n\\n\\tlet forecast = ns.stock.getForecast(stock)\\n\\twhile (forecast >= .6) {\\n\\t\\t// sleep until change detected\\n\\t\\tawait ns.sleep(1000)\\n\\t\\tforecast = ns.stock.getForecast(stock)\\n\\t\\t// ns.tprintf(\\\"chance of increase (%s): %s\\\", stock, forecast)\\n\\t}\\n\\t// const bidPrice = ns.stock.getBidPrice(stock)\\n\\t//const profit = (bidPrice-avgPrice)*shares\\n\\tconst revenue = ns.stock.sellStock(stock, shares)\\n\\tns.printf(\\\"sold %s of %s at $%s for $%s\\\", ns.formatNumber(shares), stock, ns.formatNumber(revenue), ns.formatNumber(revenue * shares))\\n\\tconst profit = (revenue - price)*shares\\n\\tns.printf(\\\"made $%s (%s)\\\", ns.formatNumber(profit), ns.formatPercent(revenue/price))\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} text\\n */\\nfunction log(ns, text) {\\n\\tns.write(\\\"stockLog.txt\\\", text, \\\"a\\\")\\n}\\n\",\"filename\":\"auctionSniper.js\",\"server\":\"home\"}}],[\"stock.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet stock = ns.args[0]\\n\\t// let investment = Number(ns.args[1])\\n\\tconst [a, b, c, d] = ns.stock.getPosition(stock)\\n\\tns.printf(\\\"%s %s %s %s\\\", a, b, c, d)\\n\\t// ns.disableLog(ns.sleep)\\n\\twhile (true) {\\n\\t\\tns.printf(\\\"forecast for %s: %s\\\", stock, ns.stock.getForecast(stock))\\n\\t\\tawait ns.sleep(1000)\\n\\t}\\n}\",\"filename\":\"stock.js\",\"server\":\"home\"}}],[\"autoSniper.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\n\\n/** @param {NS} ns */\\nexport async function main(ns) {\\n\\t// find all good forecast stocks\\n\\n\\t// set auctionSniper for as many as possible with all the money\\n\\n\\t// only reassign auctionSnipers when they are no longer running\\n\\t// maybe reassign when all auctionSnipers have returned\\n\\t\\n\\n\\tns.scriptRunning\\n\\tns.getPlayer().money\\n\\t// spend like all but 1% of the money\\n\\t// or until all possible stock is bought\\n\\t// 10 trillion leave 100 billion\\n\\n}\\n\\nfunction goodForecastStocks(ns) {\\n}\",\"filename\":\"autoSniper.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"bitNodeUpgradeOrder.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"bitNodeUpgradeOrder.txt\",\"text\":\"**upgrade order\\n\\n- level to 85 (buy new one when cheaper +$/sec)\\n- upgrade ram twice (to 8 GB)\\n- level up to 91\\n- upgrade ram again (16 GB)\\n- level up to 93\\n- upgrade ram twice (to 64 GB)\\n- level up to 105\\n- upgrade cores\\n- level up to 118\\n\\n\"}}],[\"augmentUpgradeMultiplier.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"augmentUpgradeMultiplier.txt\",\"text\":\"augments | multiplier\\n0 | 1\\n1 | 1.9\\n2 | 3.6\"}}],[\"successfulAssign.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"successfulAssign.txt\",\"text\":\"how many of hack grow weaken threads?\\n\\nbump up weaken threads by 20%\\n\\nsteal threads equally from hack and grow\\n\\nthen calc growThreads/total and weakenThreads/total\"}}],[\"netburnersInvite.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"netburnersInvite.txt\",\"text\":\"invite at 425 $/s total for bitnodes\"}}],[\"stockLog.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"stockLog.txt\",\"text\":\"bought 7300000 of FSIG for $325.694k\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 7.300m shares of FSIG. After commissions, you gained a total of $2.379t.\\nmade $1.675b (100.07%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 8.700m shares of JGN. After commissions, you gained a total of $38.422t.\\nmade $17.117t (180.34%)stock.buyStock: Purchasing '25600000' shares would exceed BLD's maximum (12800000) number of shares\\nbought 12800000 of BLD at $0.000 for $0.000\\nstock.sellStock: Sold 12.800m shares of BLD. After commissions, you gained a total of $64.762b.\\nsold 12800000 of BLD at $5.060k for $64.762b\\nmade $892.082m (101.40%)stock.buyStock: Bought 7.300m shares of FSIG for $2.411t. Paid $100.000k in commission fees.\\nbought 7300000 of FSIG at $330.280k for $2.411t\\nstock.sellStock: Sold 7.300m shares of FSIG. After commissions, you gained a total of $2.387t.\\nsold 7300000 of FSIG at $326.994k for $2.387t\\nmade $-23.991b (99.00%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 13.000m shares of FLCM. After commissions, you gained a total of $4.608t.\\nsold 13000000 of FLCM at $354.440k for $4.608t\\nmade $530.215b (113.00%)stock.buyStock: Bought 8.700m shares of JGN for $40.916t. Paid $100.000k in commission fees.\\nbought 8.700m of JGN at $4.703m for $40.916t\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 8.700m shares of JGN. After commissions, you gained a total of $40.391t.\\nsold 8.700m of JGN at $4.643m for $40.391t\\nmade $-525.071b (98.72%)stock.buyStock: Bought 10.100m shares of OMTK for $387.280b. Paid $100.000k in commission fees.\\nbought 10.100m of OMTK at $38.345k for $387.280b\\nstock.sellStock: Sold 10.100m shares of OMTK. After commissions, you gained a total of $384.963b.\\nsold 10.100m of OMTK at $38.115k for $384.963b\\nmade $-2.317b (99.40%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 18.700m shares of MGCP. After commissions, you gained a total of $1.272t.\\nsold 18.700m of MGCP at $67.997k for $1.272t\\nmade $-5.787b (99.55%)stock.buyStock: Bought 12.800m shares of BLD for $68.034b. Paid $100.000k in commission fees.\\nbought 12.800m of BLD at $5.315k for $68.034b\\nstock.sellStock: Sold 12.800m shares of BLD. After commissions, you gained a total of $67.492b.\\nsold 12.800m of BLD at $5.273k for $67.492b\\nmade $-542.103m (99.20%)stock.buyStock: Bought 5.800m shares of SYSC for $1.094b. Paid $100.000k in commission fees.\\nbought 5.800m of SYSC at $188.564 for $1.094b\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 5.800m shares of SYSC. After commissions, you gained a total of $1.116b.\\nsold 5.800m of SYSC at $192.455 for $1.116b\\nmade $22.572m (102.06%)stock.buyStock: Bought 19.200m shares of VITA for $1.133t. Paid $100.000k in commission fees.\\nbought 19.200m of VITA at $59.004k for $1.133t\\nstock.sellStock: Sold 19.200m shares of VITA. After commissions, you gained a total of $1.128t.\\nsold 19.200m of VITA at $58.769k for $1.128t\\nmade $-4.522b (99.60%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 5.000m shares of TITN. After commissions, you gained a total of $161.156b.\\nsold 5.000m of TITN at $32.231k for $161.156b\\nmade $12.302b (108.26%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 4.600m shares of GPH. After commissions, you gained a total of $107.595b.\\nsold 4.600m of GPH at $23.390k for $107.595b\\nmade $3.799b (103.66%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 13.000m shares of FLCM. After commissions, you gained a total of $4.584t.\\nsold 13.000m of FLCM at $352.625k for $4.584t\\nmade $657.188b (116.74%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 8.700m shares of JGN. After commissions, you gained a total of $99.710t.\\nsold 8.700m of JGN at $11.461m for $99.710t\\nmade $72.571t (367.39%)stock.buyStock: Bought 5.733m shares of JGN for $65.715t. Paid $100.000k in commission fees.\\nbought 5.733m of JGN at $11.463m for $65.715t\\nstock.sellStock: Sold 5.733m shares of JGN. After commissions, you gained a total of $64.285t.\\nsold 5.733m of JGN at $11.214m for $64.285t\\nmade $-1.430t (97.82%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 2.672m shares of CTYS. After commissions, you gained a total of $4.958b.\\nsold 2.672m of CTYS at $1.855k for $4.958b\\nmade $-111.977m (97.79%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 830.408k shares of FLCM. After commissions, you gained a total of $52.780b.\\nsold 830.408k of FLCM at $63.560k for $52.780b\\nmade $20.748b (164.77%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 144.066k shares of OMTK. After commissions, you gained a total of $7.909b.\\nsold 144.066k of OMTK at $54.899k for $7.909b\\nmade $-138.940m (98.27%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 18.400m shares of CTYS. After commissions, you gained a total of $34.272b.\\nsold 18.400m of CTYS at $1.863k for $34.272b\\nmade $3.305b (110.67%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 3.748m shares of BLD. After commissions, you gained a total of $110.034b.\\nsold 3.748m of BLD at $29.359k for $110.034b\\nmade $37.674b (152.06%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 5.900m shares of FSIG. After commissions, you gained a total of $377.016b.\\nsold 5.900m of FSIG at $63.901k for $377.016b\\nmade $18.565b (105.18%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 18.400m shares of CTYS. After commissions, you gained a total of $67.003b.\\nsold 18.400m of CTYS at $3.641k for $67.003b\\nmade $12.226b (122.32%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 2.388m shares of CLRK. After commissions, you gained a total of $84.284b.\\nsold 2.388m of CLRK at $35.291k for $84.284b\\nmade $4.889b (106.16%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 757.463k shares of FLCM. After commissions, you gained a total of $4.183t.\\nsold 757.463k of FLCM at $5.523m for $4.183t\\nmade $1.681t (167.16%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 1.051m shares of FLCM. After commissions, you gained a total of $6.229t.\\nsold 1.051m of FLCM at $5.925m for $6.229t\\nmade $1.624t (135.28%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 11.100m shares of UNV. After commissions, you gained a total of $136.687b.\\nsold 11.100m of UNV at $12.314k for $136.687b\\nmade $1.749b (101.30%)sleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nsleep: Sleeping for 1000 milliseconds\\nstock.sellStock: Sold 5.900m shares of FSIG. After commissions, you gained a total of $268.767b.\\nsold 5.900m of FSIG at $45.554k for $268.767b\\nmade $27.250b (111.28%)\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",403,8804,793],\"dataMap\":{},\"filename\":\"oneCycleAuto.js\",\"offlineExpGained\":1677487814.8444076,\"offlineMoneyMade\":0,\"offlineRunningTime\":81899.696,\"onlineExpGained\":1773503489.3298128,\"onlineMoneyMade\":112727436523.85988,\"onlineRunningTime\":83525.20999934556,\"ramUsage\":5.45,\"server\":\"home\",\"scriptKey\":\"oneCycleAuto.js*[\\\"phantasy\\\",403,8804,793]\",\"title\":\"oneCycleAuto.js phantasy 403 8804 793\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",316,3399,285],\"dataMap\":{},\"filename\":\"oneCycleAuto.js\",\"offlineExpGained\":829234561.8430642,\"offlineMoneyMade\":0,\"offlineRunningTime\":81899.696,\"onlineExpGained\":872725110.8829521,\"onlineMoneyMade\":56515643312.50417,\"onlineRunningTime\":83229.00999934986,\"ramUsage\":5.45,\"server\":\"home\",\"scriptKey\":\"oneCycleAuto.js*[\\\"max-hardware\\\",316,3399,285]\",\"title\":\"oneCycleAuto.js max-hardware 316 3399 285\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",364,3816,320],\"dataMap\":{},\"filename\":\"oneCycleAuto.js\",\"offlineExpGained\":541429119.7717619,\"offlineMoneyMade\":0,\"offlineRunningTime\":81899.697,\"onlineExpGained\":569600158.5514988,\"onlineMoneyMade\":76186934599.59541,\"onlineRunningTime\":83173.80999935066,\"ramUsage\":5.45,\"server\":\"home\",\"scriptKey\":\"oneCycleAuto.js*[\\\"silver-helix\\\",364,3816,320]\",\"title\":\"oneCycleAuto.js silver-helix 364 3816 320\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",514,3208,278],\"dataMap\":{},\"filename\":\"oneCycleAuto.js\",\"offlineExpGained\":278802336.99236536,\"offlineMoneyMade\":0,\"offlineRunningTime\":81899.697,\"onlineExpGained\":292981811.09458256,\"onlineMoneyMade\":23098991721.12352,\"onlineRunningTime\":83029.40999935276,\"ramUsage\":5.45,\"server\":\"home\",\"scriptKey\":\"oneCycleAuto.js*[\\\"johnson-ortho\\\",514,3208,278]\",\"title\":\"oneCycleAuto.js johnson-ortho 514 3208 278\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",423,4222,355],\"dataMap\":{},\"filename\":\"oneCycleAuto.js\",\"offlineExpGained\":420375841.38874066,\"offlineMoneyMade\":0,\"offlineRunningTime\":81899.697,\"onlineExpGained\":440874872.81418467,\"onlineMoneyMade\":47739765903.2061,\"onlineRunningTime\":82888.40999935482,\"ramUsage\":5.45,\"server\":\"home\",\"scriptKey\":\"oneCycleAuto.js*[\\\"omega-net\\\",423,4222,355]\",\"title\":\"oneCycleAuto.js omega-net 423 4222 355\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",31636,16401,1965],\"dataMap\":{},\"filename\":\"oneCycleAuto.js\",\"offlineExpGained\":888822809.8679624,\"offlineMoneyMade\":0,\"offlineRunningTime\":81899.697,\"onlineExpGained\":850834887.7534803,\"onlineMoneyMade\":1928870552624,\"onlineRunningTime\":75569.20999946132,\"ramUsage\":5.45,\"server\":\"home\",\"scriptKey\":\"oneCycleAuto.js*[\\\"4sigma\\\",31636,16401,1965]\",\"title\":\"oneCycleAuto.js 4sigma 31636 16401 1965\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",609,4043,348],\"dataMap\":{},\"filename\":\"oneCycleAuto.js\",\"offlineExpGained\":178882065.19225115,\"offlineMoneyMade\":0,\"offlineRunningTime\":81899.697,\"onlineExpGained\":169770679.4652558,\"onlineMoneyMade\":124981838245.71114,\"onlineRunningTime\":75442.20999946317,\"ramUsage\":5.45,\"server\":\"home\",\"scriptKey\":\"oneCycleAuto.js*[\\\"rho-construction\\\",609,4043,348]\",\"title\":\"oneCycleAuto.js rho-construction 609 4043 348\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",212815,3709,974],\"dataMap\":{},\"filename\":\"oneCycleAuto.js\",\"offlineExpGained\":3449580962.862233,\"offlineMoneyMade\":0,\"offlineRunningTime\":81899.697,\"onlineExpGained\":3288086785.8086686,\"onlineMoneyMade\":986668316716,\"onlineRunningTime\":74754.60999947318,\"ramUsage\":5.45,\"server\":\"home\",\"scriptKey\":\"oneCycleAuto.js*[\\\"omnitek\\\",212815,3709,974]\",\"title\":\"oneCycleAuto.js omnitek 212815 3709 974\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",16111],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.275,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":615.010000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"omnitek\\\",16111]\",\"title\":\"basic/weakenOnce.js omnitek 16111\",\"threads\":16111,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"SYSC\",7900000000000],\"dataMap\":{},\"filename\":\"auctionSniper.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.279,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":426.6099999999843,\"ramUsage\":15.1,\"server\":\"home\",\"scriptKey\":\"auctionSniper.js*[\\\"SYSC\\\",7900000000000]\",\"title\":\"auctionSniper.js SYSC 7900000000000\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"SYSC\",7700000000000],\"dataMap\":{},\"filename\":\"auctionSniper.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.279,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":418.4099999999848,\"ramUsage\":15.1,\"server\":\"home\",\"scriptKey\":\"auctionSniper.js*[\\\"SYSC\\\",7700000000000]\",\"title\":\"auctionSniper.js SYSC 7700000000000\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",3311],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.279,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",3311]\",\"title\":\"basic/weakenOnce.js 4sigma 3311\",\"threads\":3311,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",46298],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.282,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"basic/growOnce.js*[\\\"4sigma\\\",46298]\",\"title\":\"basic/growOnce.js 4sigma 46298\",\"threads\":46298,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",46298],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":144.41000000000034,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"basic/growOnce.js*[\\\"4sigma\\\",46298]\",\"title\":\"basic/growOnce.js 4sigma 46298\",\"threads\":46298,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",371],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.282,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":231.4099999999954,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"rho-construction\\\",371]\",\"title\":\"basic/weakenOnce.js rho-construction 371\",\"threads\":371,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\",371],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":144.41000000000034,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"rho-construction\\\",371]\",\"title\":\"basic/weakenOnce.js rho-construction 371\",\"threads\":371,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",3704],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":144.41000000000034,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",3704]\",\"title\":\"basic/weakenOnce.js 4sigma 3704\",\"threads\":3704,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\",1380],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":144.41000000000034,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"omnitek\\\",1380]\",\"title\":\"basic/weakenOnce.js omnitek 1380\",\"threads\":1380,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",3418],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"basic/growOnce.js*[\\\"johnson-ortho\\\",3418]\",\"title\":\"basic/growOnce.js johnson-ortho 3418\",\"threads\":3418,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\",320],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.609999999999946,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"silver-helix\\\",320]\",\"title\":\"basic/weakenOnce.js silver-helix 320\",\"threads\":320,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",271],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"max-hardware\\\",271]\",\"title\":\"basic/weakenOnce.js max-hardware 271\",\"threads\":271,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",3399],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"basic/growOnce.js*[\\\"max-hardware\\\",3399]\",\"title\":\"basic/growOnce.js max-hardware 3399\",\"threads\":3399,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",4206],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"basic/growOnce.js*[\\\"omega-net\\\",4206]\",\"title\":\"basic/growOnce.js omega-net 4206\",\"threads\":4206,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",423],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"basic/hackOnce.js*[\\\"omega-net\\\",423]\",\"title\":\"basic/hackOnce.js omega-net 423\",\"threads\":423,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",508],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"phantasy\\\",508]\",\"title\":\"basic/weakenOnce.js phantasy 508\",\"threads\":508,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",8804],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"basic/growOnce.js*[\\\"phantasy\\\",8804]\",\"title\":\"basic/growOnce.js phantasy 8804\",\"threads\":8804,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",403],\"dataMap\":{},\"filename\":\"basic/hackOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"basic/hackOnce.js*[\\\"phantasy\\\",403]\",\"title\":\"basic/hackOnce.js phantasy 403\",\"threads\":403,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"3.6.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":10548484713.2,\"moneyMax\":52742423566,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1388,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-563308.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[8,14],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"96.6.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":9883127575.6,\"moneyMax\":49415637878,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1235,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-338089.cct\",\"type\":\"Total Ways to Sum\",\"data\":29,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-68480.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"10600504935\",57],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-624761-CyberSec.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"8xJLX2dY8767a7VFO76921P7135mq631K742mq555QU1rJ63\",\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"49.3.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":3480403298,\"moneyMax\":17402016490,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1070,\"serverGrowth\":71,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-512967.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9IXjV6aqAz957z6aaaaf838uApAwxtZ819PiTcLkvf109YcJXWo6mI06fioRXa5184Xa7Tlm2552Iu\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-807750.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"8w3VZ3A7G448zu4HzXMi963SJP874ymE5813DaD956Xd1xaS642tV44\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"31.4.5.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"blade\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"blade\"}}]]},\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":2416132496.8,\"moneyMax\":12080662484,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1033,\"serverGrowth\":85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",292],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"ramUsage\":1.75,\"server\":\"blade\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"omega-net\\\",292]\",\"title\":\"basic/weakenOnce.js omega-net 292\",\"threads\":292,\"temporary\":false}}]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-495655.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[39,102,181,73,192,48,80,147,38,7,9,171,64,134,41,136,97,45,192,185,91],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"54.1.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":7423721700.8,\"moneyMax\":37118608504,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1138,\"serverGrowth\":88,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-375975.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[103,[2,4,5,7,9,10,13,14,15,16]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-46535.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"1165721\",70],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-795068.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,1],[0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"28.4.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":3599734586.4,\"moneyMax\":17998672932,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1034,\"serverGrowth\":50,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-195527-BitRunners.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[71,76,65,105,151,14,37,49,120,179,57,7,119,189,55,63,139,9,187,17,134,158,113,158,198,176,6,110,30,149,158,32,122,35,50,118,116,101,137,137,143,68,16,118],\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-230942-CyberSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[18,24],[15,24],[16,19],[12,20],[14,21],[3,7],[5,7],[6,12],[24,31],[8,17],[16,26],[1,11],[19,27],[5,13],[22,28]],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"61.5.1.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"omnitek\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"omnitek\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"nwo\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":100,\"minDifficulty\":31,\"moneyAvailable\":17011522702,\"moneyMax\":17011522702,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":967,\"serverGrowth\":96,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",85],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"omnitek\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"johnson-ortho\\\",85]\",\"title\":\"basic/weakenOnce.js johnson-ortho 85\",\"threads\":85,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",45],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"ramUsage\":1.75,\"server\":\"omnitek\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"omega-net\\\",45]\",\"title\":\"basic/weakenOnce.js omega-net 45\",\"threads\":45,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",16],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.75,\"server\":\"omnitek\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"phantasy\\\",16]\",\"title\":\"basic/weakenOnce.js phantasy 16\",\"threads\":16,\"temporary\":false}}]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"24.2.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":307409441.30113846,\"moneyMax\":20519899496,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":990,\"serverGrowth\":86,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-582590-TheBlackHand.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[129,158,107,30,144,165,155,127,162,21,194,29,28,119,71,184,5,132,68,191,91,166,10,52,174,61,192,14,75],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-13296.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":703550227918,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"8.9.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":4712757855,\"moneyMax\":23563789275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1085,\"serverGrowth\":93,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-881114.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"ZZmmmmmmSZZmInG64P6XG64P6XG68cRXG683x683x683xeP4eP4eP4eP4oLmx0jjjjjM1hZBSmWDFSmWDFSH6ptQ26tQ2\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"69.8.4.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"fulcrumtech\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"fulcrumtech\"}}]]},\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":328471561,\"moneyMax\":1642357805,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1035,\"serverGrowth\":95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",73],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"johnson-ortho\\\",73]\",\"title\":\"basic/weakenOnce.js johnson-ortho 73\",\"threads\":73,\"temporary\":false}}]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-931229-Sector12.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[28,50,130,49,12,39,20,116,199,157,68,119,116,177,101,94,9,146,41,49,44,124,20,61,60,185,91,19,147,196,62,71,121,30,25,148],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"33.7.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1447,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-334402.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"00VVVVVVVVVVVV55555uuVVVVVVjLLtjjjjkk77WMM77bLLLLLLLL6ZZZZZZZZZZZZbbbbTAAAAAAAAAAAAAAYY\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"31.2.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"kuai-gong\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":217584357.60000002,\"moneyMax\":1087921788,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1034,\"serverGrowth\":87,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"79.6.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":185225183.60000002,\"moneyMax\":926125918,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":921,\"serverGrowth\":68,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-418099.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"3Jot318kLjufP8T623m3m611X583MbV676XQQK8G766GprIvc4143coj57\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"54.1.4.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":178679674.60000002,\"moneyMax\":893398373,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":903,\"serverGrowth\":58,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-343294.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[7,[[0,1],[0,6],[0,5],[1,2]]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-639437.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[57,37,155,7,31,112,69,30,102,9,17,10,78,160,171,81,109,155],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-967834-CyberSec.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"CLOUD DEBUG ENTER CACHE PASTE\",12],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-494376.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,4,0,6,3,3],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"30.7.9.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"helios\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"helios\"}}]]},\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":137274952.8,\"moneyMax\":686374764,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":875,\"serverGrowth\":79,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",36],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"helios\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"johnson-ortho\\\",36]\",\"title\":\"basic/weakenOnce.js johnson-ortho 36\",\"threads\":36,\"temporary\":false}}]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"26.9.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"vitalife\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"vitalife\"}}]]},\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":151001565.8,\"moneyMax\":755007829,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":868,\"serverGrowth\":78,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",9],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"vitalife\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"johnson-ortho\\\",9]\",\"title\":\"basic/weakenOnce.js johnson-ortho 9\",\"threads\":9,\"temporary\":false}}]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-747957.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0],[0,1,0,1],[0,0,0,0],[0,0,1,1],[0,1,0,0],[0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"85.6.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":194893870,\"moneyMax\":974469350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":919,\"serverGrowth\":85,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-729398-CyberSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[2,4,4,0,0,3,8,9,10,0,0,10,10,2,7,1],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-811280.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[21,30],[5,6],[10,16],[1,5],[12,16],[8,16],[15,18],[20,29],[16,24],[4,8],[7,11],[3,6]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"79.6.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"univ-energy\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"univ-energy\"}}]]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":236667297.4,\"moneyMax\":1183336487,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":87,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",18],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"phantasy\\\",18]\",\"title\":\"basic/weakenOnce.js phantasy 18\",\"threads\":18,\"temporary\":false}}]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-508282.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1100100000000000100000000011001000111011001101100111111111110000\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"42.8.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"titan-labs\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"titan-labs\"}}]]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":156052927,\"moneyMax\":780264635,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":837,\"serverGrowth\":72,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",18],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"johnson-ortho\\\",18]\",\"title\":\"basic/weakenOnce.js johnson-ortho 18\",\"threads\":18,\"temporary\":false}}]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"61.1.6.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"microdyne\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"microdyne\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":135056895.4,\"moneyMax\":675284477,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":832,\"serverGrowth\":90,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",18],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.75,\"server\":\"microdyne\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"phantasy\\\",18]\",\"title\":\"basic/weakenOnce.js phantasy 18\",\"threads\":18,\"temporary\":false}}]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"80.3.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":162443973.8,\"moneyMax\":812219869,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":897,\"serverGrowth\":73,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-362205-Sector12.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[154,44,18,17,196,161,41,27,141,27,91,128,200,2,29,63,182,167,10,72,53,193,153,163,127,55,160,94,38,50,178,10,45,162,27,89,52]],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"5.9.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":154191164.20000002,\"moneyMax\":770955821,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":843,\"serverGrowth\":81,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"19.1.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":207695735.4,\"moneyMax\":1038478677,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":907,\"serverGrowth\":57,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-561076.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,1,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"87.9.6.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"omnia\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"omnia\"}}]]},\"serversOnNetwork\":[\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":182643019,\"moneyMax\":913215095,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":910,\"serverGrowth\":61,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",36],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.75,\"server\":\"omnia\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"phantasy\\\",36]\",\"title\":\"basic/weakenOnce.js phantasy 36\",\"threads\":36,\"temporary\":false}}]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"3.8.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":202344018.4,\"moneyMax\":1011720092,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":795,\"serverGrowth\":73,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-74879.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"PASTECLOUDLOGICSHIFTPOPUP\",\"OFFLINE\"],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-283613.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[30,19,16,37,1,29,48],[27,7,24,44,26,29,31],[45,45,32,18,32,22,16],[29,17,4,41,2,39,30],[50,28,17,6,41,28,40],[19,14,19,41,46,45,44],[15,49,11,31,45,38,4],[13,42,12,2,14,7,23],[38,19,1,30,32,15,2],[10,37,21,45,21,6,44]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"99.3.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"helios\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":175139662.20000002,\"moneyMax\":875698311,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":829,\"serverGrowth\":71,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-855389.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[31,23,47,7,29,47],[50,30,21,36,21,15],[26,12,41,7,5,7],[41,24,16,5,27,34],[5,17,1,49,22,12],[10,43,16,49,12,47],[33,38,41,24,21,28],[23,35,12,24,25,10],[25,31,47,4,27,31],[36,12,18,28,1,24],[37,17,45,7,38,20],[32,37,18,4,1,14],[5,16,31,31,22,18],[15,16,3,46,12,5]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"60.0.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"solaris\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"solaris\"}}]]},\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":144073881.20000002,\"moneyMax\":720369406,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":813,\"serverGrowth\":77,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",9],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.75,\"server\":\"solaris\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"phantasy\\\",9]\",\"title\":\"basic/weakenOnce.js phantasy 9\",\"threads\":9,\"temporary\":false}}]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-619852.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[170,116,2,94,124,166,154,122,64,147],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"23.1.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":307490000.2,\"moneyMax\":1537450001,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":803,\"serverGrowth\":67,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"78.4.7.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"global-pharm\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":333239122.20000005,\"moneyMax\":1666195611,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":759,\"serverGrowth\":80,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",4],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"phantasy\\\",4]\",\"title\":\"basic/weakenOnce.js phantasy 4\",\"threads\":4,\"temporary\":false}}]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"14.8.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":240910733.20000002,\"moneyMax\":1204553666,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":795,\"serverGrowth\":69,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"96.0.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":278567385.2,\"moneyMax\":1392836926,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":812,\"serverGrowth\":70,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"38.4.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"unitalife\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"unitalife\"}}]]},\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":207108878.20000002,\"moneyMax\":1035544391,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":819,\"serverGrowth\":79,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",18],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.75,\"server\":\"unitalife\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"phantasy\\\",18]\",\"title\":\"basic/weakenOnce.js phantasy 18\",\"threads\":18,\"temporary\":false}}]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-504134-Sector12.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[19,28,31,15,24,11,29,36,33,26,16,10,19,26,28],[18,34,48,16,40,20,2,24,17,22,1,8,8,14,40],[11,8,17,37,47,7,14,46,23,17,39,25,6,11,43],[38,32,17,22,37,3,36,35,30,10,37,8,1,5,37],[29,36,41,30,5,17,44,3,12,13,29,25,41,7,19],[32,43,9,4,14,27,24,7,11,19,3,36,6,11,9],[24,28,34,11,10,24,25,11,21,27,13,5,37,38,20],[35,34,34,28,41,4,21,46,25,5,11,15,12,28,39],[21,43,33,36,16,32,5,33,41,39,7,31,2,32,39],[31,27,3,18,22,3,45,35,50,36,25,10,37,10,18],[40,39,17,42,16,34,47,24,25,14,24,43,44,7,42]],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-890037.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"7V1zvUal419TkM2liAkO064ik2e6920988XNl37u0n582yS869aOp5g5kRq\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"62.9.0.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"lexo-corp\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"syscore\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":150116710.6,\"moneyMax\":750583553,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":705,\"serverGrowth\":60,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",73],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"scriptKey\":\"basic/growOnce.js*[\\\"johnson-ortho\\\",73]\",\"title\":\"basic/growOnce.js johnson-ortho 73\",\"threads\":73,\"temporary\":false}}]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-605121.cct\",\"type\":\"Array Jumping Game II\",\"data\":[5,3,1,4,2,5,2,4,5,2,2,0,1,1,2,5,5,3,1,2],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"39.3.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"rho-construction\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":22.64,\"minDifficulty\":17,\"moneyAvailable\":535497344,\"moneyMax\":535497344,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":510,\"serverGrowth\":48,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",9],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"scriptKey\":\"basic/growOnce.js*[\\\"johnson-ortho\\\",9]\",\"title\":\"basic/growOnce.js johnson-ortho 9\",\"threads\":9,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"98.3.4.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"alpha-ent\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":133265167,\"moneyMax\":666325835,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":500,\"serverGrowth\":52,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",36],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"scriptKey\":\"basic/growOnce.js*[\\\"johnson-ortho\\\",36]\",\"title\":\"basic/growOnce.js johnson-ortho 36\",\"threads\":36,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-360710.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[0,5],[0,3],[2,8],[1,7],[2,7],[2,6],[1,5],[0,7]]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"89.8.6.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"aevum-police\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":74663057.4,\"moneyMax\":373315287,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":426,\"serverGrowth\":41,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",36],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"scriptKey\":\"basic/growOnce.js*[\\\"johnson-ortho\\\",36]\",\"title\":\"basic/growOnce.js johnson-ortho 36\",\"threads\":36,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"63.6.0.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"rothman-uni\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":35556165.800000004,\"moneyMax\":177780829,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":403,\"serverGrowth\":44,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",62],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.29,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",62]\",\"title\":\"basic/weakenOnce.js 4sigma 62\",\"threads\":62,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",11],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"scriptKey\":\"basic/growOnce.js*[\\\"johnson-ortho\\\",11]\",\"title\":\"basic/growOnce.js johnson-ortho 11\",\"threads\":11,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-65760.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[59,[1,2,6,7,8,9,10,11,12,13,14,15]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-990383.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":99181607373,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"49.6.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"zb-institute\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":169074123,\"moneyMax\":845370615,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":774,\"serverGrowth\":77,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",9],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"scriptKey\":\"basic/growOnce.js*[\\\"johnson-ortho\\\",9]\",\"title\":\"basic/growOnce.js johnson-ortho 9\",\"threads\":9,\"temporary\":false}}]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-839794.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[4,[81,187,19,173,49,18,155,130,7,182,25,198,130,104,7,81,70,178,12,75,49,135,74,35,193,103,149,157,140,105,198,90,46,199,47,191,141,138,9,136,155,173,41]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-981615.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[6,[[2,4],[1,5],[1,3],[2,3],[4,5],[0,3]]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"36.2.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"summit-uni\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":48431298.400000006,\"moneyMax\":242156492,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":444,\"serverGrowth\":58,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",18],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"scriptKey\":\"basic/growOnce.js*[\\\"johnson-ortho\\\",18]\",\"title\":\"basic/growOnce.js johnson-ortho 18\",\"threads\":18,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"97.1.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":106032415.80000001,\"moneyMax\":530162079,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":637,\"serverGrowth\":65,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"72.5.3.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"catalyst\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":96915431,\"moneyMax\":484577155,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":417,\"serverGrowth\":49,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",73],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"catalyst\",\"scriptKey\":\"basic/growOnce.js*[\\\"johnson-ortho\\\",73]\",\"title\":\"basic/growOnce.js johnson-ortho 73\",\"threads\":73,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-517334.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[93,[3,7,9,11,13,14,15,17,19,20,21,22]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-525658-Sector12.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"00001000110000000000111000011111\",\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-531335.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,9],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"33.0.6.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"the-hub\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":14,\"minDifficulty\":14,\"moneyAvailable\":36384127.800000004,\"moneyMax\":181920639,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":309,\"serverGrowth\":54,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",9],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.292,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"the-hub\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",9]\",\"title\":\"basic/weakenOnce.js 4sigma 9\",\"threads\":9,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"70.1.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":20,\"minDifficulty\":20,\"moneyAvailable\":45523424.2,\"moneyMax\":227617121,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":395,\"serverGrowth\":56,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"30.4.4.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"netlink\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":392,\"serverGrowth\":65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",36],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.292,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"netlink\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",36]\",\"title\":\"basic/weakenOnce.js 4sigma 36\",\"threads\":36,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"34.4.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":12,\"minDifficulty\":12,\"moneyAvailable\":3056707.5095211305,\"moneyMax\":71095337,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":273,\"serverGrowth\":58,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-967329.cct\",\"type\":\"Total Ways to Sum\",\"data\":24,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"14.4.1.1\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"n00dles\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":14000,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",2],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.292,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",2]\",\"title\":\"basic/weakenOnce.js 4sigma 2\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"34.9.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"foodnstuff\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",9],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.293000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",9]\",\"title\":\"basic/weakenOnce.js 4sigma 9\",\"threads\":9,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-533350.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0011101000111100100100111011000010100101100011000100000010101100\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"90.6.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"sigma-cosmetics\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":460000,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",9],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.293000000005,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",9]\",\"title\":\"basic/weakenOnce.js 4sigma 9\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"56.7.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"joesguns\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":500000,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",9],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.294,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",9]\",\"title\":\"basic/weakenOnce.js 4sigma 9\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"47.2.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"zer0\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":1500000,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",18],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.294,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",18]\",\"title\":\"basic/weakenOnce.js 4sigma 18\",\"threads\":18,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"48.6.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"nectar-net\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":550000,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",9],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.295000000006,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",9]\",\"title\":\"basic/weakenOnce.js 4sigma 9\",\"threads\":9,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"28.2.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"neo-net\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":1000000,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",18],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.295000000006,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",18]\",\"title\":\"basic/weakenOnce.js 4sigma 18\",\"threads\":18,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-46364.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"TTVGGREEEEEEEEEEEEE66HHpp66jjrrrrSSjjjjjjjjjjjjjj44IIIIIIIZZ1h5uKpFbbuuAAAAAA\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"41.5.4.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"silver-helix\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":25.992,\"minDifficulty\":10,\"moneyAvailable\":41478423.32728231,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",36],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.296,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",36]\",\"title\":\"basic/weakenOnce.js 4sigma 36\",\"threads\":36,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"57.0.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"hong-fang-tea\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":600000,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",9],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.296,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",9]\",\"title\":\"basic/weakenOnce.js 4sigma 9\",\"threads\":9,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"55.9.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"harakiri-sushi\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":800000,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",9],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.297,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",9]\",\"title\":\"basic/weakenOnce.js 4sigma 9\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-564036-Sector12.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"TOhnCpMp8TMp8TMp8T6hTMpMhTBMpMhTBMpjMrPIrPPPPPPPPPeeeeeeeeeeeeoNlHno6llololrKkv\",\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"35.6.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"phantasy\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",18],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.297,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"phantasy\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",18]\",\"title\":\"basic/weakenOnce.js 4sigma 18\",\"threads\":18,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-74830.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"4952\",5],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-494374-Sector12.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,1,0,1,0],[0,1,0,0,1,0,0,0,0,0,0]],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"1.3.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"max-hardware\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.632,\"minDifficulty\":5,\"moneyAvailable\":1908661.0748959044,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",18],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.297,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",18]\",\"title\":\"basic/weakenOnce.js 4sigma 18\",\"threads\":18,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"86.5.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"omega-net\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":12,\"minDifficulty\":12,\"moneyAvailable\":61259766,\"moneyMax\":61259766,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":213,\"serverGrowth\":36,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",18],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.298,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",18]\",\"title\":\"basic/weakenOnce.js 4sigma 18\",\"threads\":18,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-960832.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"ARRAYLOGINFRAMELOGICDEBUG\",\"DOCUMENT\"],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-968739.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0,0,0],[0,0,0,0,1,0,1,0],[0,0,1,1,0,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"34.4.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":12,\"minDifficulty\":12,\"moneyAvailable\":11592572.8,\"moneyMax\":57962864,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":234,\"serverGrowth\":30,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-330495.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0000100010000111000011001000100111001111001110001000011011101101\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"32.1.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"iron-gym\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":4000000,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",18],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.298,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",18]\",\"title\":\"basic/weakenOnce.js 4sigma 18\",\"threads\":18,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-125009.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[103,88,73,36,138,154,71,198,90,150,65,46]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-107790.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"611189440\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"0.8.9.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"millenium-fitness\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":18,\"minDifficulty\":18,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":480,\"serverGrowth\":33,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",20],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"basic/growOnce.js*[\\\"johnson-ortho\\\",20]\",\"title\":\"basic/growOnce.js johnson-ortho 20\",\"threads\":20,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\",14],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"max-hardware\\\",14]\",\"title\":\"basic/weakenOnce.js max-hardware 14\",\"threads\":14,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",16],\"dataMap\":{},\"filename\":\"basic/growOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"basic/growOnce.js*[\\\"omega-net\\\",16]\",\"title\":\"basic/growOnce.js omega-net 16\",\"threads\":16,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",96],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"phantasy\\\",96]\",\"title\":\"basic/weakenOnce.js phantasy 96\",\"threads\":96,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-768894-CyberSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[5,6],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"76.2.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"powerhouse-fitness\"}}],[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"powerhouse-fitness\"}}]]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":998,\"serverGrowth\":55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"omega-net\\\",9]\",\"title\":\"basic/weakenOnce.js omega-net 9\",\"threads\":9,\"temporary\":false}}]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-688024.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"MEDIADEBUGMACROPOPUPTRASH\",\"FLAMING\"],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-892883.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"12612380233\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"59.4.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":739,\"serverGrowth\":56,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-119928-TheBlackHand.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[9,[[1,8],[2,4],[0,6],[4,5],[2,8],[5,8],[4,6],[3,5],[0,1]]],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"2.8.8.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"run4theh111z\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":514,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\",76],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.809999999999945,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"johnson-ortho\\\",76]\",\"title\":\"basic/weakenOnce.js johnson-ortho 76\",\"threads\":76,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\",70],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"phantasy\\\",70]\",\"title\":\"basic/weakenOnce.js phantasy 70\",\"threads\":70,\"temporary\":false}}]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-349995-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[56,43,79,147,94,153,62,83,87,153,177,184,69,31,87,19,121,163,44,177,153,106,116,47,127,64,113,193,83,149,181,86,174,38,55,108,168,22,114,12,98,79,145,32,36],\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"37.3.2.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"I.I.I.I\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"the-hub\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":343,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",9],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.3,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",9]\",\"title\":\"basic/weakenOnce.js 4sigma 9\",\"threads\":9,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-329947.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"21378233\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-316035.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"11821220251\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"79.2.5.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"avmnite-02h\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":219,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",73],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.301,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",73]\",\"title\":\"basic/weakenOnce.js 4sigma 73\",\"threads\":73,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-183136-TheBlackHand.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":3869,\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-422742.cct\",\"type\":\"Array Jumping Game II\",\"data\":[0,7,5,1,3,6,0,3,0,4,3,4,1,3,1,2,6,5,2,5,4,2],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"90.8.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\".\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"stormtech\",\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"requiredHackingSkill\":548,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\",9],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"ramUsage\":1.75,\"server\":\".\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"omega-net\\\",9]\",\"title\":\"basic/weakenOnce.js omega-net 9\",\"threads\":9,\"temporary\":false}}]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-219595-TheBlackHand.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"22517323512\",\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"58.4.8.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"basic/weakenOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn;\\n\\t}\\n\\tawait ns.weaken(target, {threads: numThreads})\\n}\",\"filename\":\"basic/weakenOnce.js\",\"server\":\"CSEC\"}}],[\"basic/growOnce.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tlet target = ns.args[0]\\n\\tlet numThreads = 1\\n\\tif (ns.args.length > 1) {\\n\\t\\tnumThreads = Number(ns.args[1])\\n\\t}\\n\\tif (numThreads == 0) {\\n\\t\\treturn\\n\\t}\\n\\tawait ns.grow(target, {threads: numThreads})\\n}\\n\",\"filename\":\"basic/growOnce.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"silver-helix\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":57,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\",4],\"dataMap\":{},\"filename\":\"basic/weakenOnce.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":35497.302,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.40999999998974,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"basic/weakenOnce.js*[\\\"4sigma\\\",4]\",\"title\":\"basic/weakenOnce.js 4sigma 4\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-982594.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[46,12,12,50,41,27,42,7,44,42,24,8,37,22],[6,5,28,4,11,28,30,13,18,17,15,5,34,31],[5,33,49,21,50,50,36,34,10,20,33,10,39,4],[21,13,27,30,11,14,18,12,10,40,13,34,29,45],[43,29,25,17,11,13,19,30,29,1,1,21,47,19],[36,21,48,48,1,6,4,40,29,40,22,27,49,36],[13,47,35,31,41,30,15,31,2,34,13,34,5,42],[38,20,3,25,40,36,11,3,48,32,8,40,7,45],[44,35,34,44,15,31,10,32,43,32,34,11,7,41],[19,12,40,19,10,39,34,42,35,38,21,27,50,19],[42,36,12,20,32,33,22,17,22,9,23,12,48,23],[23,23,17,30,45,6,25,4,21,35,23,42,25,31]],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-136984-Sector12.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"1248\",0],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"60.1.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"18.0.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-187441.cct\",\"type\":\"Total Ways to Sum\",\"data\":58,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-871002-TheBlackHand.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"67273861400\",58],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-510791.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[146,46,116,137,113,55,60,118,60,45,177,160,177,192,151,13,155,120,103,107,196,11,83,136,133,192,46,168,20,99,173,98,194,117,25,44,19,124,68,58,39,144],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"95.7.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":14.6132,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0624,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":39.0341,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.069,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.1187,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.1389,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0497,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":3.0122,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":3.9839,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.016,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":24.2279,\"isBanned\":false,\"isMember\":true,\"playerReputation\":2661546.8237284324}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":175.2945,\"isBanned\":false,\"isMember\":true,\"playerReputation\":1304118.6822019292}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":261.5645,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":47.5505,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":148.2439,\"isBanned\":false,\"isMember\":true,\"playerReputation\":1178090.1891418276}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":1.0144,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":145.4897,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":35.7737,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":188.2776,\"isBanned\":false,\"isMember\":true,\"playerReputation\":1365910.2827335077}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{\"dir\":\"ls\",\"nvim\":\"vim\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":29492.13962181209,\"lastPrice\":29531.56180200707,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.45,\"b\":true,\"otlkMag\":16.40699330303757,\"otlkMagForecast\":66.24876892240846,\"cap\":221530789,\"spreadPerc\":0.1,\"shareTxForMovement\":47461,\"shareTxUntilMovement\":47461,\"totalShares\":126500000,\"maxShares\":25300000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":41586.72610108118,\"lastPrice\":41638.609194984354,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":false,\"otlkMag\":15.537640459649975,\"otlkMagForecast\":33.84657910323663,\"cap\":749396935,\"spreadPerc\":0.1,\"shareTxForMovement\":56507,\"shareTxUntilMovement\":56507,\"totalShares\":78100000,\"maxShares\":15600000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":56882.513090331995,\"lastPrice\":56751.02387079239,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":13.34516079521374,\"otlkMagForecast\":64.89076615921654,\"cap\":390752506,\"spreadPerc\":0.5,\"shareTxForMovement\":52944,\"shareTxUntilMovement\":52944,\"totalShares\":70400000,\"maxShares\":14100000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":26406.681601317527,\"lastPrice\":26352.668944447872,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":11.767130984422048,\"otlkMagForecast\":36.87449736191173,\"cap\":351832466,\"spreadPerc\":0.5,\"shareTxForMovement\":46386,\"shareTxUntilMovement\":46386,\"totalShares\":100800000,\"maxShares\":20200000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":7786.016332788685,\"lastPrice\":7800.124382753714,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":13.606812308804198,\"otlkMagForecast\":65.6699619090644,\"cap\":802271699,\"spreadPerc\":0.6,\"shareTxForMovement\":49321,\"shareTxUntilMovement\":49321,\"totalShares\":42700000,\"maxShares\":8500000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":32207.32402995964,\"lastPrice\":32305.864291588845,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.03,\"b\":false,\"otlkMag\":28.113190168558617,\"otlkMagForecast\":20.282917516121337,\"cap\":265544165,\"spreadPerc\":0.5,\"shareTxForMovement\":44259,\"shareTxUntilMovement\":18313,\"totalShares\":29700000,\"maxShares\":5900000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":23500.295228240568,\"lastPrice\":23441.10923664904,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":false,\"otlkMag\":11.99225413288835,\"otlkMagForecast\":37.401045925553035,\"cap\":94555457,\"spreadPerc\":0.2,\"shareTxForMovement\":46543,\"shareTxUntilMovement\":46543,\"totalShares\":112800000,\"maxShares\":22600000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":1310645.0807945395,\"lastPrice\":1305603.3870159434,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":true,\"otlkMag\":15.957293551163579,\"otlkMagForecast\":65.1758759654107,\"cap\":188050009,\"spreadPerc\":0.1,\"shareTxForMovement\":52202,\"shareTxUntilMovement\":52202,\"totalShares\":68200000,\"maxShares\":13600000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":129141.35393744554,\"lastPrice\":128797.02763916548,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.9,\"b\":false,\"otlkMag\":5.8715807430869145,\"otlkMagForecast\":44.063426975881235,\"cap\":271185708,\"spreadPerc\":0.6,\"shareTxForMovement\":82169,\"shareTxUntilMovement\":82169,\"totalShares\":48600000,\"maxShares\":9700000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":26402.909955307885,\"lastPrice\":26349.68611559509,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":7.412238345403049,\"otlkMagForecast\":58.43070037337465,\"cap\":248866946,\"spreadPerc\":0.4,\"shareTxForMovement\":96351,\"shareTxUntilMovement\":96351,\"totalShares\":57800000,\"maxShares\":11600000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":5538.1342821628605,\"lastPrice\":5528.609265710095,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":6.671059809235434,\"otlkMagForecast\":42.303434249094686,\"cap\":258344249,\"spreadPerc\":0.4,\"shareTxForMovement\":70167,\"shareTxUntilMovement\":70167,\"totalShares\":74300000,\"maxShares\":14900000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":16996.183704849333,\"lastPrice\":17034.048405140747,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":6.2485516922877595,\"otlkMagForecast\":41.759358469481704,\"cap\":58598981,\"spreadPerc\":0.3,\"shareTxForMovement\":75475,\"shareTxUntilMovement\":75475,\"totalShares\":123700000,\"maxShares\":24700000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":17779.135544099478,\"lastPrice\":17746.97850143157,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":7.120543717058774,\"otlkMagForecast\":57.641570517137595,\"cap\":476497584,\"spreadPerc\":0.5,\"shareTxForMovement\":76837,\"shareTxUntilMovement\":76837,\"totalShares\":39800000,\"maxShares\":8000000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":17259.563948531264,\"lastPrice\":17228.85750115585,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":13.754540319310413,\"otlkMagForecast\":59.47813635195874,\"cap\":84624807,\"spreadPerc\":0.7,\"shareTxForMovement\":91299,\"shareTxUntilMovement\":91299,\"totalShares\":55600000,\"maxShares\":11100000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":5771.3100748187835,\"lastPrice\":5781.596098084559,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":6.679049554577186,\"otlkMagForecast\":42.90161988340557,\"cap\":291775559,\"spreadPerc\":0.6,\"shareTxForMovement\":64968,\"shareTxUntilMovement\":64968,\"totalShares\":52600000,\"maxShares\":10500000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":34357.618799922464,\"lastPrice\":34433.1413455536,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":7.246082063535928,\"otlkMagForecast\":55.950211025450045,\"cap\":292298137,\"spreadPerc\":0.8,\"shareTxForMovement\":124143,\"shareTxUntilMovement\":124143,\"totalShares\":40000000,\"maxShares\":8000000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":3203.3842100770203,\"lastPrice\":3196.642435100508,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":13.878937504577225,\"otlkMagForecast\":64.02920079631077,\"cap\":210488157,\"spreadPerc\":0.8,\"shareTxForMovement\":79256,\"shareTxUntilMovement\":79256,\"totalShares\":44400000,\"maxShares\":8900000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":8540.666741581246,\"lastPrice\":8556.39589357492,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":11.502490968585311,\"otlkMagForecast\":62.05937100050042,\"cap\":91856667,\"spreadPerc\":0.4,\"shareTxForMovement\":48031,\"shareTxUntilMovement\":48031,\"totalShares\":53900000,\"maxShares\":10800000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":12895.37670469813,\"lastPrice\":12923.339381124772,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":3.413386819434078,\"otlkMagForecast\":51.75762203609971,\"cap\":312568816,\"spreadPerc\":0.4,\"shareTxForMovement\":117423,\"shareTxUntilMovement\":117423,\"totalShares\":38200000,\"maxShares\":7600000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":4091.141384636283,\"lastPrice\":4121.765734162766,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.52,\"b\":false,\"otlkMag\":5.668646086522559,\"otlkMagForecast\":46.48359222121101,\"cap\":154977130,\"spreadPerc\":1,\"shareTxForMovement\":23865,\"shareTxUntilMovement\":23865,\"totalShares\":68300000,\"maxShares\":13700000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":3538.054760357504,\"lastPrice\":3551.401958725587,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.27,\"b\":false,\"otlkMag\":7.895463350997221,\"otlkMagForecast\":41.582879390787305,\"cap\":61718957,\"spreadPerc\":0.7,\"shareTxForMovement\":68160,\"shareTxUntilMovement\":68160,\"totalShares\":38100000,\"maxShares\":7600000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":4884.188737021727,\"lastPrice\":4891.733014009308,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.52,\"b\":false,\"otlkMag\":3.361280792299297,\"otlkMagForecast\":47.63401608738616,\"cap\":100298007,\"spreadPerc\":0.6,\"shareTxForMovement\":63019,\"shareTxUntilMovement\":63019,\"totalShares\":30800000,\"maxShares\":6200000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":245.50962166209888,\"lastPrice\":244.13898990126745,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.89,\"b\":true,\"otlkMag\":1.2274195427474097,\"otlkMagForecast\":48.37530618741478,\"cap\":120871958,\"spreadPerc\":1.2,\"shareTxForMovement\":84722,\"shareTxUntilMovement\":84722,\"totalShares\":33400000,\"maxShares\":6700000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":484.1904025392383,\"lastPrice\":486.6354480193029,\"playerShares\":7000000,\"playerAvgPx\":362.76051478676413,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.7,\"b\":true,\"otlkMag\":12.252376837415603,\"otlkMagForecast\":61.080323033268314,\"cap\":138933424,\"spreadPerc\":0.5,\"shareTxForMovement\":61128,\"shareTxUntilMovement\":30770,\"totalShares\":34800000,\"maxShares\":7000000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":4551.625427860569,\"lastPrice\":4565.145791071326,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1,\"b\":false,\"otlkMag\":5.561995378641255,\"otlkMagForecast\":47.33697921991227,\"cap\":30532571,\"spreadPerc\":0.7,\"shareTxForMovement\":87574,\"shareTxUntilMovement\":87574,\"totalShares\":102000000,\"maxShares\":20400000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":972.529646350732,\"lastPrice\":978.4228962877033,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.04,\"b\":false,\"otlkMag\":7.4198020997893135,\"otlkMagForecast\":39.85960496560371,\"cap\":33064026,\"spreadPerc\":1.3,\"shareTxForMovement\":29361,\"shareTxUntilMovement\":29361,\"totalShares\":14100000,\"maxShares\":2800000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":2534.492667422636,\"lastPrice\":2542.1718157183145,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.02,\"b\":false,\"otlkMag\":8.309376115745255,\"otlkMagForecast\":42.140927954833394,\"cap\":48197662,\"spreadPerc\":0.9,\"shareTxForMovement\":35405,\"shareTxUntilMovement\":35405,\"totalShares\":18900000,\"maxShares\":3800000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2189.637836752551,\"lastPrice\":2184.511545474675,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":6.5504263954786035,\"otlkMagForecast\":44.14795520290802,\"cap\":25424346,\"spreadPerc\":0.7,\"shareTxForMovement\":87462,\"shareTxUntilMovement\":87462,\"totalShares\":12000000,\"maxShares\":2400000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":21.8110761695601,\"lastPrice\":21.66179525906513,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.32,\"b\":false,\"otlkMag\":7.50352065984152,\"otlkMagForecast\":42.929037100373364,\"cap\":14664328,\"spreadPerc\":1,\"shareTxForMovement\":47132,\"shareTxUntilMovement\":47132,\"totalShares\":14300000,\"maxShares\":2900000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":212.41665185289534,\"lastPrice\":210.32990705073883,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.34,\"b\":false,\"otlkMag\":5.358352758823216,\"otlkMagForecast\":44.92159849314569,\"cap\":13037740,\"spreadPerc\":1,\"shareTxForMovement\":37708,\"shareTxUntilMovement\":37708,\"totalShares\":34200000,\"maxShares\":6800000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":79311.02423916217,\"lastPrice\":78991.91206092262,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.36,\"b\":false,\"otlkMag\":12.067964792785153,\"otlkMagForecast\":39.065233122437625,\"cap\":2876097,\"spreadPerc\":1.4,\"shareTxForMovement\":59118,\"shareTxUntilMovement\":59118,\"totalShares\":92000000,\"maxShares\":18400000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":13170.799015174855,\"lastPrice\":13143.080028816035,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":5.385236877172211,\"otlkMagForecast\":45.98559671607668,\"cap\":663227814,\"spreadPerc\":0.6,\"shareTxForMovement\":151280,\"shareTxUntilMovement\":151280,\"totalShares\":13500000,\"maxShares\":2700000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":16176.565258555453,\"lastPrice\":16208.759853134306,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":8.774782140855004,\"otlkMagForecast\":40.724487568844175,\"cap\":219480066,\"spreadPerc\":0.6,\"shareTxForMovement\":134052,\"shareTxUntilMovement\":134052,\"totalShares\":23800000,\"maxShares\":4800000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":321369,\"lastUpdate\":1691512737133,\"ticksUntilCycle\":61}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":11,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"33","AllGangsSave":"","LastExportBonus":"1691512610254","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}